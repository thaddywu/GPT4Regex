[{"description": "lines which do not contain the letter 'e'.", "ground_truth": "~(.*e.*)", "chatgpt_output": "^.[^e]*$"}, {"description": "lines that contain only the letters 'agde'.", "ground_truth": "agde", "chatgpt_output": "`^[agde]{4}$`"}, {"description": "lines using words  ending in 'er'.", "ground_truth": ".*\\b[A-Za-z]*er\\b.*", "chatgpt_output": "`\\bt\\.er\\b(?=(?:[^\\n]|(\\n+\\s{2,}|$))*(\\n|$))`"}, {"description": "lines which contain only lowercase letters.", "ground_truth": "[a-z]*", "chatgpt_output": "`^[a-z]+$`"}, {"description": "lines that contain the word 'dance'", "ground_truth": ".*\\bdance\\b.*", "chatgpt_output": "\\bdance\\b(?::\\h*(?:[.,!?;]|$))*"}, {"description": "lines with words that contain 3 vowels.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(.*[AEIOUaeiou].*){3}).*", "chatgpt_output": "`\\b([aeiou]{3}[aeiou]{0,}[aeiou]{3}[aeiou]{0,})\\b`"}, {"description": "lines which have 'bar'", "ground_truth": ".*bar.*", "chatgpt_output": "`/bar\\/./gm`"}, {"description": "lines using a word that ends in 'spoon'", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(.*spoon)).*", "chatgpt_output": "\\b\\w*\\b(spoon)\\b"}, {"description": "lines that include three capital letters", "ground_truth": "(.*[A-Z].*){3}", "chatgpt_output": "`\\b[A-Z]{3}\\b`"}, {"description": "lines using words that begin with 'z'.", "ground_truth": ".*\\bz[A-Za-z]*\\b.*", "chatgpt_output": "`\\bis[a-z]{2,}\\b(?=(\\.|\\n)[^-]{1,}\\1)*(?=\\n)|^(?=(\\.|\\n)[^-]{1,}\\1*(?<=\\b)[z]\\w*)\\b`"}, {"description": "lines that have at least 5 numbers.", "ground_truth": "(.*[0-9].*){5,}", "chatgpt_output": "^.\\s*([\\d]+\\s+){5}[\\d]+$"}, {"description": "lines that ends with letter 'f'", "ground_truth": ".*f", "chatgpt_output": "`/.$[\\w\\s]*\\elf/`"}, {"description": "lines using a word that contains the letters 'der'", "ground_truth": ".*\\b[A-Za-z]*der[A-Za-z]*\\b.*", "chatgpt_output": "\\b(?=.*der)\\w+\\b(?=.\\s+(?:\\r\\n|\\n))*"}, {"description": "lines using only three words", "ground_truth": "(([^A-Za-z])*\\b[A-Za-z]+\\b([^A-Za-z])*){3}", "chatgpt_output": "`\\b\\w{3}\\s\\w{3}\\s\\w{3}\\b`"}, {"description": "lines starting with 'uu' followed by words starting with 'z'.", "ground_truth": "uu.*\\bz[A-Za-z]*\\b.*", "chatgpt_output": "`^uu.\\s+[z].[^\\n]+`"}, {"description": "lines that have 2 words using 4 letters", "ground_truth": "(.*\\b[A-Za-z]{4}\\b.*){2}", "chatgpt_output": "\\b\\w{4}\\s+\\w{4}\\b"}, {"description": "lines that have words ending in 'ing'", "ground_truth": ".*\\b[A-Za-z]*ing\\b.*", "chatgpt_output": "\\b[A-Z][a-z\\]*ing\\b"}, {"description": "lines which contain the word 'black' and the letter 'z'.", "ground_truth": "(.*\\bblack\\b.*)&(.*z.*)", "chatgpt_output": "`/black[\u2019)]*\\sz/g`"}, {"description": "lines that contain the number '254' at least twice.", "ground_truth": "(.*254.*){2}", "chatgpt_output": "`/(\\d\\d(?:\\s+254\\$)|\\s+254\\s+\\d\\d)[^\\S\\n]*(?=\\d\\d(?:\\s+254\\$|$))/g`"}, {"description": "lines containing the word 'art'", "ground_truth": ".*\\bart\\b.*", "chatgpt_output": "`/\\bart\\b/gm`"}, {"description": "lines with a word ending in 'aought' that contain only one word", "ground_truth": "([^A-Za-z])*\\b[A-Za-z]*aought\\b([^A-Za-z])*", "chatgpt_output": "`\\b\\w+(ough|ought)$`"}, {"description": "lines which contain only an uppercase letter", "ground_truth": "[A-Z]", "chatgpt_output": "`^[A-Z]+$`"}, {"description": "lines that contain at least one numeric in it.", "ground_truth": ".*[0-9].*", "chatgpt_output": "`./\\d+/g`"}, {"description": "lines that end in an 'o'", "ground_truth": ".*o", "chatgpt_output": "`/$[\\ otro]$/m`  This regex will match lines that end with an 'o' (case insensitive), with the 'm' modifier indicating multi-line matching. A more common and portable solution would be `/.$[\\ o\\n]/m` which matches any line ending with 'o' or a newline character."}, {"description": "lines that have all the letters 'a' , 'b' and 'c'", "ground_truth": "(.*a.*)&(.*b.*)&(.*c.*)", "chatgpt_output": "`^[abc]+\\$`"}, {"description": "lines having words ending with 'ne'.", "ground_truth": ".*\\b[A-Za-z]*ne\\b.*", "chatgpt_output": "\\b\\w+\\b(?=[\\s.\\n]+[ne]$)(?!\\w)"}, {"description": "lines that contain 'World War II' and contain 'casualties'.", "ground_truth": "(.*World War II.*)&(.*casualties.*)", "chatgpt_output": "`/\\bWorld War II\\s+casualties\\b/g`"}, {"description": "lines that contain the numbers '9', and '10'", "ground_truth": ".*(9.*10|10.*9).*", "chatgpt_output": "`/\\d(?=[\\d]9)[-\\s]?(10)/`"}, {"description": "lines with the word 'Triple' followed by words that start with 'X'", "ground_truth": ".*\\bTriple\\b.*\\bX[A-Za-z]*\\b.*", "chatgpt_output": "`/\\bTriple\\s+\\w+X\\w+\\b/g`"}, {"description": "lines using 'su' after 'son' or 'soon'.", "ground_truth": ".*(son|soon).*su.*", "chatgpt_output": "`(son|soon).*su`"}, {"description": "lines that utilize words starting with 'do'.", "ground_truth": ".*(([A-Za-z]+)&(\\bdo.*\\b)).*", "chatgpt_output": "`/\\bd[o-u] [\\w]+:\\s*(do\\.\\s*)+.[^.]/\\gm`"}, {"description": "lines using 'q' before 'r'", "ground_truth": ".*q.*r.*", "chatgpt_output": "`.+q.[OR.]+r`"}, {"description": "lines containing a word using the letters 'tt'.", "ground_truth": ".*\\b[A-Za-z]*tt[A-Za-z]*\\b.*", "chatgpt_output": "/\\btT\\w*\\b/g // This regex pattern matches the word 'tt' with any number of subsequent letters, but ensures that the match is a whole word (\\b) and is global (\\g)."}, {"description": "lines using more than 1 character", "ground_truth": ".*.{2,}.*", "chatgpt_output": "`\\.{2,}` or `[.\\n]{2,}` for multiline strings. This matches any character (including newline) that appears more than once in a row."}, {"description": "lines that contain words with 'ru'.", "ground_truth": ".*\\b[A-Za-z]*ru[A-Za-z]*\\b.*", "chatgpt_output": "\\b\\w*ru\\w*\\b(?=(\\W|\\z))"}, {"description": "lines containing a word using 'ause'", "ground_truth": ".*\\b[A-Za-z]*ause[A-Za-z]*\\b.*", "chatgpt_output": "`\\b[a-z]*ause\\b`"}, {"description": "lines containing instances of 'JFK' found after 'ABC'", "ground_truth": ".*ABC.*JFK.*", "chatgpt_output": "`ABC\\s+(?=JFK)`"}, {"description": "lines that contain at least three words and at least one number.", "ground_truth": "(.*\\b[A-Za-z][A-Za-z]*\\b.*){3}&(.*[0-9].*)", "chatgpt_output": "\\.\\+\\s+([\\w']+)\\s+([\\w']+)\\s+([\\d]+).*"}, {"description": "lines that contain numbers", "ground_truth": ".*[0-9].*", "chatgpt_output": "\\d+               # Matches one or more digits, representing lines that contain numbers."}, {"description": "lines using the word 'going' followed by 'd'.", "ground_truth": ".*\\bgoing\\b.*d.*", "chatgpt_output": "`/\\bgoning\\bd/g`"}, {"description": "lines that have 'sandwich' but not the word 'ham'", "ground_truth": "(.*sandwich.*)&(~(.*\\bham\\b.*))", "chatgpt_output": "`\\bsandwich(?!\\s+ham)\\b`"}, {"description": "lines containing words starting with 't'.", "ground_truth": ".*((\\bt.*\\b)&([A-Za-z]+)).*", "chatgpt_output": "`/\\bt\\w+\\w+/g`"}, {"description": "lines that contain words ending in 'g'", "ground_truth": ".*((\\b[A-Za-z][A-Za-z]*\\b)&(.*g)).*", "chatgpt_output": "`\\b\\w*(g|\\ Jag|\\ jag)\\b`"}, {"description": "lines that contain words ending with vowels.", "ground_truth": ".*\\b[A-Za-z]*[AEIOUaeiou]\\b.*", "chatgpt_output": "`/\\bw[aeiou]\\b\\s.*\\/g`"}, {"description": "lines that use words starting with 's'.", "ground_truth": ".*\\bs[A-Za-z]*\\b.*", "chatgpt_output": "`\\b\\w+s\\w+\\b(?=\\s+(?:\\w+s\\w+\\b)|$)(?m)`"}, {"description": "lines using 2 words or more", "ground_truth": "(.*\\b[A-Za-z]+\\b.*){2,}", "chatgpt_output": "`\\S+\\s+\\S+`"}, {"description": "lines using the word 'piggy' and 'his mother'.", "ground_truth": ".*(.*\\bpiggy\\b.*)&(.*his mother.*)", "chatgpt_output": "`/\\bpiggy\\s+and\\s+his\\s+mother\\b/g`"}, {"description": "lines that have 5 characters and no vowels.", "ground_truth": "(.{5})&(~(.*[AEIOUaeiou].*))", "chatgpt_output": "^.\\{5\\} [^aeiouAEIOU].*\\$$"}, {"description": "lines that contain at least one vowel and at least two numbers.", "ground_truth": "(.*[AEIOUaeiou].*)&(.*[0-9].*){2}", "chatgpt_output": "\\b(?=.*[aeiou])(?=.*[0-9]{2})\\b"}, {"description": "lines using at least 3 characters", "ground_truth": ".*.{3}.*", "chatgpt_output": "\\.{3,}"}, {"description": "lines that contain the phrase 'city of'.", "ground_truth": ".*(.*\\bcity of\\b.*).*", "chatgpt_output": "`/\\bcity\\ of\\b/g`"}, {"description": "lines that contain between two to seven words.", "ground_truth": "([^A-Za-z]*\\b[A-Za-z][A-Za-z]*\\b[^A-Za-z]*){2,7}", "chatgpt_output": "`\\.{0,5}\\s+\\S+\\s+(?:\\S+\\s+){1,5}\\S+`"}, {"description": "lines that use words starting with 'ga'.", "ground_truth": ".*\\bga[A-Za-z]*\\b.*", "chatgpt_output": "`\\bg[a-z]+\\b(?=[\\s.\\n]|$)`"}, {"description": "lines any words beginning with the letter 'k'.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(k.*)).*", "chatgpt_output": "`\\b[k]\\w*\\b`"}, {"description": "lines containing any number with an '8' in it.", "ground_truth": ".*8.*", "chatgpt_output": "\\d+[::_-]?8[\\d_+-]*"}, {"description": "lines which contain only the number '3'.", "ground_truth": "3", "chatgpt_output": "`^3$`"}, {"description": "lines that contain words starting with 'pa'.", "ground_truth": ".*\\bpa[A-Za-z]*\\b.*", "chatgpt_output": "`\\bpa\\w+\\B`"}, {"description": "lines that contain only three words.", "ground_truth": "(([^A-Za-z])*\\b[A-Za-z]+\\b([^A-Za-z])*){3}", "chatgpt_output": "`\\w+\\s+\\w+\\s+\\w+`"}, {"description": "lines that mention 'Dylan' in the same line as 'Lynda'.", "ground_truth": "(.*Dylan.*Lynda.*)|(.*Lynda.*Dylan.*)", "chatgpt_output": "`/\\bdylan\\s+lind|\\s+lind\\s+dylan\\b/gi`"}, {"description": "lines containing 'foo' or 'nu' before 'dist' or 'dust'", "ground_truth": ".*(foo|nu).*(dist|dust).*", "chatgpt_output": "`/(?=.*(foo|nu))(?=.*(dist|dust))/g`"}, {"description": "lines where the number '0' appears", "ground_truth": ".*0.*", "chatgpt_output": "`\\d+\\d(0)\\d+` (Matches any sequence of one or more digits followed by a '0' and one or more digits)"}, {"description": "lines that feature 'email' followed by the word 'spam'.", "ground_truth": ".*email.*\\bspam\\b.*", "chatgpt_output": "`/\\bis email\\s+(?:[^\\s]+ spam|spam\\s+is email)\\./g`"}, {"description": "lines that have within them words ending in 'ch'.", "ground_truth": ".*\\b[A-Za-z]*ch\\b.*", "chatgpt_output": "\\b\\w*\\b(?=[\\s.\\][<]|\\z)([a-z]*[ch][a-z]*)\\b"}, {"description": "lines using the word 'clue'", "ground_truth": ".*\\bclue\\b.*", "chatgpt_output": "`/\\bc Luke\\w+/\\gm` - This regex will match lines containing the word \"clue\" (specifically \"clue\" or \"clues\" or \"clued\" etc.) followed by any number of word characters. The `\\b` ensures matching only whole words. The `\\gm` anchor asserts the match at the beginning of the line to ensure only the full line is matched, not just a substring within it."}, {"description": "lines that contain 'news' before 'paper' or 'show'.", "ground_truth": ".*news.*(paper|show).*", "chatgpt_output": "`/\\bnews\\s+(?:before|issues?)(\\s+paper|show)\\b/gi`"}, {"description": "lines that do not contain the word 'foo'", "ground_truth": "~(.*\\bfoo\\b.*)", "chatgpt_output": "^(?!.*foo).*\\n"}, {"description": "lines using 'min' before 'imal'", "ground_truth": ".*min.*imal.*", "chatgpt_output": "`/\\bmin\\s+(?=imal)\\b/g`"}, {"description": "lines that include the string 'rst'", "ground_truth": ".*rst.*", "chatgpt_output": "`/rst/g`"}, {"description": "lines that contain at least two words starting with 'h' in them.", "ground_truth": "(.*\\bh[A-Za-z]*\\b.*){2}", "chatgpt_output": "`\\bh\\w+\\h+\\h\\w+`"}, {"description": "lines using the word 'An' at least once.", "ground_truth": ".*\\bAn\\b.*", "chatgpt_output": "`.+An.\\+` or `\\.+\\sAn\\.+` for multiple words and spaces. This regex matches any character (`.+`) followed by the letter 'A' and the letter 'n' (An), followed by any character (`.+`). It allows for the 'An' to appear anywhere within the line."}, {"description": "lines that begin with a number", "ground_truth": "[0-9].*", "chatgpt_output": "^[\\d]\\S*(?:\\r?\\n|\\Z)"}, {"description": "lines that have words ending with 'ti'.", "ground_truth": ".*\\b[A-Za-z]*ti\\b.*", "chatgpt_output": "\\b[^ ]+\\bti$"}, {"description": "lines that do not contain the character 'x'", "ground_truth": "~(.*x.*)", "chatgpt_output": "^[(^-)]*$|^[^x]$"}, {"description": "lines using words containing 'ope'.", "ground_truth": ".*\\b[A-Za-z]*ope[A-Za-z]*\\b.*", "chatgpt_output": "`\\b\\w+ope\\w+\\b(?=[\\s\\n])`"}, {"description": "lines that use words starting with 'bi'.", "ground_truth": ".*\\bbi[A-Za-z]*\\b.*", "chatgpt_output": "`\\blemning\\s+[bB][iI]\\w*`"}, {"description": "lines using 'oon'", "ground_truth": ".*oon.*", "chatgpt_output": "`/\\bone\\on\\)/g`"}, {"description": "lines using words beginning with the letter 'g'", "ground_truth": ".*\\bg[A-Za-z]*\\b.*", "chatgpt_output": "`^\u06af|[gc]\\.(?:[s-z]|[,\\.]|[^\\n])+$` (This regulatory expression captures lines starting with a Persian 'g' character or any English letter 'g' followed by one or more characters that are not a newline character.)"}, {"description": "lines containing any mention of the word 'code'.", "ground_truth": ".*\\bcode\\b.*", "chatgpt_output": "`/code/.+/\\n/g`"}, {"description": "lines that contain 5 words", "ground_truth": "(.*\\b[A-Za-z]+\\b.*){5}", "chatgpt_output": "\\.\\h+\\S+\\s+\\S+\\s+\\S+\\S+"}, {"description": "lines that have a word beginning with th and a number that begins in '7'", "ground_truth": "(.*\\bth[A-Za-z]*\\b.*)&(.*7[0-9]*.*)", "chatgpt_output": "`\\bth\\w+[[:digit:]]{2}[0-9][7]\\b`"}, {"description": "lines that have all of its letters capitalized.", "ground_truth": "~(.*[a-z].*)", "chatgpt_output": "^[A-Z]+$"}, {"description": "lines using 'mno' after 'pqr'", "ground_truth": ".*pqr.*mno.*", "chatgpt_output": "`\\bpqr\\w+\\K(?=mno)`"}, {"description": "lines where there are two consecutive capital letters", "ground_truth": ".*[A-Z][A-Z].*", "chatgpt_output": "`([A-Z]+\\s+[A-Z]+)`"}, {"description": "lines containing a letter", "ground_truth": ".*[A-Za-z].*", "chatgpt_output": "`^.[a-zA-Z.*]$` or `[a-zA-Z].*`"}, {"description": "lines that contain the word 'orange'.", "ground_truth": ".*\\borange\\b.*", "chatgpt_output": "`/\\borange\\/g`"}, {"description": "lines using a word of 5 letters or less.", "ground_truth": ".*\\b[A-Za-z]{1,5}\\b.*", "chatgpt_output": "`\\b\\w{1,5}\\b(?=(\\n|$))`"}, {"description": "lines that have words with 'la'.", "ground_truth": ".*\\b[A-Za-z]*la[A-Za-z]*\\b.*", "chatgpt_output": "\\b(\\w+la\\w+)\\b(?=[\\s.\\n]+[^\\1])*[^\\s.\\n]$"}, {"description": "lines that using the symbol '+' or '-'.", "ground_truth": ".*(\\+|-).*", "chatgpt_output": "`.+[\\+\\-].+`"}, {"description": "lines that contain the word 'Hindi'.", "ground_truth": ".*\\bHindi\\b.*", "chatgpt_output": "/Hindi./"}, {"description": "lines using words containing 'e' before 'i'.", "ground_truth": ".*((\\b[A-Za-z][A-Za-z]*\\b)&(.*e.*i.*)).*", "chatgpt_output": "\\b[^aei]*(e)[^aei]*(i)\\b"}, {"description": "lines that have at least one capital letter.", "ground_truth": ".*[A-Z].*", "chatgpt_output": "`^[a-z]*[A-Z][a-z]*$`"}, {"description": "lines that have at least 3, but not more that 6 words.", "ground_truth": "([^A-Za-z]*\\b[A-Za-z]+\\b[^A-Za-z]*){3,6}", "chatgpt_output": "`\\.\\s+\\w+\\s+\\w+\\s+\\w+(?:\\s+\\w+){0,2}`"}, {"description": "lines that contain 'mix' or 'shake'.", "ground_truth": ".*mix.*|.*shake.*", "chatgpt_output": "`/mix|shake/g`"}, {"description": "lines that have 1 word in them", "ground_truth": ".*\\b[A-Za-z][A-Za-z]*\\b.*", "chatgpt_output": "\\<\\bis\\w+\\>\\n"}, {"description": "lines where 'PQR' is between a number and 'LMNO'", "ground_truth": ".*[0-9].*PQR.*LMNO.*|.*LMNO.*PQR.*[0-9].*", "chatgpt_output": "\\d+(\\s+)[PQR][\\s\\S]+([LMNO])"}, {"description": "lines that have words with 7 letters.", "ground_truth": ".*\\b[A-Za-z]{7}\\b.*", "chatgpt_output": "\\bt\\w{7}\\b(?=(\\s|$))"}, {"description": "lines that have one number", "ground_truth": ".*[0-9].*", "chatgpt_output": "\\d+\\s*(?:\\r?\\n)|(?:^)"}, {"description": "lines containing 'a' before 'b'", "ground_truth": ".*a.*b.*", "chatgpt_output": "`.\\:a.\\:b` or `(?=.*a)(?=.*b).` or `^(.*a).*b(.*)$` for multi-line input. These three will match different things depending on the input context, but all will match lines containing 'a' followed by 'b'. The first one `.\\:a.\\:b` assumes lines are separated by newline character `\\n`, and the colon `:` is used as a separator between the 'a' and 'b'. The second one `(?=.*a)(?=.*b).` and the third one `^(.*a).*b(.*)$` are more general, allowing for more flexible line ending and additional characters before/after 'a' and 'b'. The first and second one will match the exact sequence 'a' followed by 'b' with no characters in between, while the third one `^(.*a).*b(.*)$` will also capture any characters before 'a' or after 'b', which might be desired depending on the context."}, {"description": "lines containing 'h', or 'i'", "ground_truth": ".*(h|i).*", "chatgpt_output": "`/h|i/.*/gm`"}, {"description": "lines that contain words starting with 'de'.", "ground_truth": ".*((\\bde.*\\b)&([A-Za-z]+)).*", "chatgpt_output": "`^.*\\bde\\w.*`"}, {"description": "lines that include words starting with 'q'.", "ground_truth": ".*((\\b[A-Za-z][A-Za-z]*\\b)&(q.*)).*", "chatgpt_output": "\\bq\\w*\\b(?=[\\s.\\n]+|\\Z)"}, {"description": "lines that mention both 'butterflies' and 'fireflies'.", "ground_truth": "(.*butterflies.*)&(.*fireflies.*)", "chatgpt_output": "`/(butterflies).*\\s+(fireflies)|(fireflies).*\\s+(butterflies)/g`"}, {"description": "lines that contain 'ject' or 'pel'", "ground_truth": ".*(ject|pel).*", "chatgpt_output": "`/(\"\\.?[jp]ect\\b|\\.?[jp]el\\b)/g`"}, {"description": "lines that carry the word 'Jim' located in between 'Stacks' and 'Slim'.", "ground_truth": ".*Stacks.*\\bJim\\b.*Slim.*|.*Slim.*\\bJim\\b.*Stacks.*", "chatgpt_output": "`/\\bStacks\\s+([\\w]+)Jim([\\w]+)Slim\\b/g`"}, {"description": "lines using at least 5 'd'", "ground_truth": "(.*d.*){5,}", "chatgpt_output": "\\sd.*(ddddd|\\dddddd|\\ddddddd)\\s+"}, {"description": "lines that contain at least 2 digits.", "ground_truth": "(.*[0-9].*){2,}", "chatgpt_output": "`^.\\d{2,}$`"}, {"description": "lines using words with 'ca'.", "ground_truth": ".*\\b[A-Za-z]*ca[A-Za-z]*\\b.*", "chatgpt_output": "\\b[ca]{2,}[^-][\\w\\s]+\\b(?(=[\\.])\\.|\\b) # Matches words with 'ca' followed by a word character or whitespace, and an optional period at the end."}, {"description": "lines that have only 3 words", "ground_truth": "(([^A-Za-z])*\\b[A-Za-z]+\\b([^A-Za-z])*){3}", "chatgpt_output": "\\^\\hadoop\\s+\\w+\\s+\\w+\\s+\\z (This regex assumes the input is a Hadoop log file format where lines are expected to start with \"hadoop\". Adjust if the assumption is incorrect. For a more general regex to match lines with exactly three words, use `\\s+\\w+\\s+\\w+\\s+\\z`)"}, {"description": "lines that have 2 or more numbers.", "ground_truth": "(.*[0-9].*){2,}", "chatgpt_output": "`\\d+(?:\\s+\\d+)`"}, {"description": "lines that have a 2 letter sequence", "ground_truth": ".*[A-Za-z]{2}.*", "chatgpt_output": "\\.\\hado|.\\w\\w $ # This regular expression matches any line that contains a two-letter sequence. The '.' character matches any single character except a newline, 'ha' matches the literal sequence 'ha', 'do' matches any two-character sequence, '$' denotes the end of the line."}, {"description": "lines that include words starting with 'fe'.", "ground_truth": "(.*((\\b[A-Za-z]+\\b)&(fe.*)).*).*", "chatgpt_output": "`/\\bfe\\w.*\\b/g`"}, {"description": "lines not containing 4 or more characters", "ground_truth": "~(.*.{4,}.*)", "chatgpt_output": "^.( [`^$]\\.\\{0,3})[^.\\n]{0,}$ \\ or \\ ^(?:(?!.\\{4,\\}).)*$"}, {"description": "lines that end containing the letter 'z'.", "ground_truth": ".*z", "chatgpt_output": "`/$[\\\u013dz]$/`"}, {"description": "lines which have three words.", "ground_truth": "(.*\\b[A-Za-z]+\\b.*){3,}", "chatgpt_output": "\\.\\<\\s*{3}\\w+(\\s+\\w+){2}\\."}, {"description": "lines with 'sec' before 'mun'.", "ground_truth": ".*sec.*mun.*", "chatgpt_output": "`^.*sec(\\d+) mun(\\d+).*$`"}, {"description": "lines that have two or more words ending in 'a'.", "ground_truth": ".*(.*\\b[A-Za-z]*a\\b.*){2}.*", "chatgpt_output": "\\b(\\w+)[a-z]+\\s+(\\w+)[a-z]+\\b"}, {"description": "lines that have 6 words.", "ground_truth": "(.*\\b[A-Za-z]+\\b.*){6}", "chatgpt_output": "\\.{1,}\\s+\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\.{1,}"}, {"description": "lines that do not contain any number", "ground_truth": "~(.*[0-9].*)", "chatgpt_output": "`^[^0-9]+$`"}, {"description": "lines containing 'k', or 'l'", "ground_truth": ".*(k|l).*", "chatgpt_output": "`/[kl]\\d+\\R/g` (This will match lines that contain the letters 'k' or 'l' followed by one or more digits and a newline)"}, {"description": "lines that contain words ending with 'mae'.", "ground_truth": ".*\\b[A-Za-z]*mae\\b.*", "chatgpt_output": "`\\b[a-z]+mae\\b`"}, {"description": "lines that contain words starting with 'h'.", "ground_truth": ".*\\bh[A-Za-z]*\\b.*", "chatgpt_output": "`\\bh\\w+\\s.*`"}, {"description": "lines where the  word 'Homer' precedes the word 'Odyssey'", "ground_truth": ".*\\bHomer\\b.*\\bOdyssey\\b.*", "chatgpt_output": "`\\bHomer\\s+\\K\\s+\\w+\\s+Odyssey`"}, {"description": "lines that do not contain the letter 'a'", "ground_truth": "~(.*a.*)", "chatgpt_output": "`^[^a]$`"}, {"description": "lines using the word 'hero'.", "ground_truth": ".*\\bhero\\b.*", "chatgpt_output": "`/\\bhero\\w*:\\s+(.*)\\/\\1/gm`  (This regex will match lines containing the word 'hero' followed by a colon, and capture the rest of the line)"}, {"description": "lines that have words starting with 'pi'.", "ground_truth": ".*((\\b[A-Za-z][A-Za-z]*\\b)&(pi.*)).*", "chatgpt_output": "`\\b pi\\w*`"}, {"description": "lines that have words starting with 'kai'.", "ground_truth": ".*\\bkai[A-Za-z]*\\b.*", "chatgpt_output": "`\\bkai\\w+\\b`"}, {"description": "Find lines that mention dogs or cats but not any with mice", "ground_truth": "(.*(dogs|cats).*)&(~(.*mice.*))", "chatgpt_output": "`/(/bdogs|bcats)/\\D*(?!mice)/g`"}, {"description": "lines that use 'a' or 'b' before words ending with 'er'.", "ground_truth": ".*(a|b).*\\b[A-Za-z]*er\\b.*", "chatgpt_output": "`/\\ba|b\\w*ER\\b/g`"}, {"description": "lines starting with 'abc'", "ground_truth": "abc.*", "chatgpt_output": "^abc\\.+$"}, {"description": "lines using three character words begining with the letters 'CE'.", "ground_truth": ".*\\bCE[A-Za-z]\\b.*", "chatgpt_output": "`\\bCE[A-Za-z]{2}\\b`"}, {"description": "lines that contain 3 words and have at least 2 numbers.", "ground_truth": ".*(.*\\b[A-Za-z]+\\b.*){3}&(.*[0-9].*){2}.*", "chatgpt_output": "\\ber\\w+\\s+\\d+\\.\\d+\\s+\\w+\\s+\\d+\\.\\d+\\s+\\w+\\s+\\d+\\b"}, {"description": "lines using 'abc' after 'def'", "ground_truth": ".*def.*abc.*", "chatgpt_output": "`(?=def).*abc`"}, {"description": "lines which feature the word 'hairy'.", "ground_truth": ".*\\bhairy\\b.*", "chatgpt_output": "/\\bhairy\\b/g//g"}, {"description": "lines containing the word 'crack'.", "ground_truth": ".*\\bcrack\\b.*", "chatgpt_output": "`/\\bcrack\\b/gm`"}, {"description": "lines that have at least three 'j'.", "ground_truth": "(.*j.*){3}", "chatgpt_output": "`/.*\\ Joh\\{3\\}.*/` would be a valid regex pattern to match lines containing at least three occurrences of the letter 'j'. This pattern may not be the most efficient one though, since it uses a greedy quantifier (\\*) and a non-capturing group (\\{3\\}) and could have longer lookaheads to make it more specific for 'jjj' instead of 'jijiji'. A more specific approach would be:"}, {"description": "lines that have 'turn'", "ground_truth": ".*turn.*", "chatgpt_output": "`/\\bturn\\b/gm`"}, {"description": "lines using 'ghi' after 'jkl'", "ground_truth": ".*jkl.*ghi.*", "chatgpt_output": "`jkl\\.*(ghi)`"}, {"description": "lines which contain a mix of uppercase letters and lowercase letters", "ground_truth": "(.*[A-Z].*)&(.*[a-z].*)", "chatgpt_output": "`/.+[a-z]+[A-Z]+.+/` is a regex pattern that matches lines containing a mix of uppercase and lowercase letters. This regex includes one or more characters (`.+`), followed by one or more lowercase letters (`[a-z]+`), then one or more uppercase letters (`[A-Z]+`), and finally one or more characters again (`.+`)."}, {"description": "lines where no word is more than 5 characters", "ground_truth": "~(.*\\b[A-Z-a-z]{6,}\\b.*)", "chatgpt_output": "`^((\\s+|[^-][^{}]*[^-])){1,}([\\w]{1,5}\\b)[^-]*(?=\\r?\\n|\\z)(?!([\\w]{1,5}\\b)(?2)|^\\1{2,})`"}, {"description": "lines using 'd' in the middle of a word.", "ground_truth": ".*\\b[A-Za-z]+d[A-Za-z]+\\b.*", "chatgpt_output": "\\b[wd]\\d\\w*\\b"}, {"description": "lines using 5 'd'", "ground_truth": "(.*d.*){5}", "chatgpt_output": "`.{5}d{5}.{5}` - This regex pattern matches any line that contains exactly five occurrences of the letter 'd'."}, {"description": "lines with capital letters", "ground_truth": ".*[A-Z].*", "chatgpt_output": "`[A-Z]+\\R*`"}, {"description": "lines containing 'e', or 'f'", "ground_truth": ".*(e|f).*", "chatgpt_output": "`/[ef]\\d*\\R/g`"}, {"description": "lines using a 5 letter sequence", "ground_truth": ".*[A-Za-z]{5}.*", "chatgpt_output": "`.\\{5\\}(?:\\.\\r?\\n)+`"}, {"description": "lines which contain a word starting with 'ch'", "ground_truth": ".*\\bch[A-Za-z]*\\b.*", "chatgpt_output": "`/chr[a-z]+/g`"}, {"description": "lines that contain words starting with 'po'.", "ground_truth": ".*((\\b[A-Za-z][A-Za-z]*\\b)&(po.*)).*", "chatgpt_output": "`/\\bpo\\w.*\\/g`"}, {"description": "lines utilizing the word 'law'.", "ground_truth": ".*.*\\blaw\\b.*", "chatgpt_output": "/\\blaw\\b(?:\\s+[\\\\w.\\_-]+\\n)+/g"}, {"description": "lines that have only one b.", "ground_truth": "([^b])*b([^b])*", "chatgpt_output": "`^.\\wb\\.(?!\\w) bald\\.$`"}, {"description": "lines that have the number '44'.", "ground_truth": ".*44.*", "chatgpt_output": "`\\d+: (\\d){4} =~ /44/`"}, {"description": "lines that contain the letter 'A' followed by a vowel.", "ground_truth": ".*A.*[AEIOUaeiou].*", "chatgpt_output": "`/[Aa][aeiou]/g`"}, {"description": "lines that contain words with 'oo'.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(.*oo.*)).*", "chatgpt_output": "\\b\\w*oo\\w*\\b(?=[\\s.\\n])+"}, {"description": "lines which have at least 7 numbers.", "ground_truth": ".*(.*[0-9].*){7}.*", "chatgpt_output": "^.*(\\h+\\d+\\h+){7,}.*$"}, {"description": "lines which end with 'you'", "ground_truth": ".*you", "chatgpt_output": "`/$[\\S]+you$/g`"}, {"description": "lines that contain words ending with 'ol'.", "ground_truth": ".*((\\b[A-Za-z][A-Za-z]*\\b)&(.*ol)).*", "chatgpt_output": "\\b\\w*\\b(?=\\W*ol$)"}, {"description": "lines that contain a digit.", "ground_truth": ".*[0-9].*", "chatgpt_output": "`\\d+`"}, {"description": "lines using a word having the string 'der'", "ground_truth": ".*\\b[A-Za-z]*der[A-Za-z]*\\b.*", "chatgpt_output": "\\bder\\w*\\b(?=.\\n)"}, {"description": "lines that are 20 characters or less", "ground_truth": ".{0,20}", "chatgpt_output": "`^.\\{0,20}$`"}, {"description": "lines containing a word", "ground_truth": ".*\\b[A-Za-z]+\\b.*", "chatgpt_output": "\\b\\w+\\s*(word)\\b\\s*.\\s*($|[\\r\\n])"}, {"description": "lines that begin with the word 'once'.", "ground_truth": "once\\b.*", "chatgpt_output": "`^once`"}, {"description": "lines that contain words starting with 'ac'.", "ground_truth": ".*((\\b[A-Za-z][A-Za-z]*\\b)&(ac.*)).*", "chatgpt_output": "`/\\bac\\w+\\b/g`"}, {"description": "lines that have 4 words or less where at least 1 of those words contains the letter sequence 'uin'.", "ground_truth": "([^A-Za-z]*\\b[A-Za-z]+\\b[^A-Za-z]*){0,4}&(.*((\\b[A-Za-z]+\\b)&(.*uin.*)).*){1,}", "chatgpt_output": "`^(\\S+\\s+\\S+)\\s+(?:\\w+\\s*uin\\w+)\\S+(?:\\S+\\s+\\S|$)`"}, {"description": "lines that contain words ending in 'n'", "ground_truth": ".*\\b[A-Za-z]*n\\b.*", "chatgpt_output": "\\b\\w*(n)\\b"}, {"description": "lines that have 'eye'", "ground_truth": ".*eye.*", "chatgpt_output": "`/\\bye\\w*eye\\w*\\]/gm`"}, {"description": "lines that contain three letter words in them.", "ground_truth": ".*\\b[A-Za-z]{3}\\b.*", "chatgpt_output": "`\\bw\\ {3}\\w\\b`"}, {"description": "lines that contain five letter words.", "ground_truth": ".*\\b[A-Za-z]{5}\\b.*", "chatgpt_output": "`\\w{5}`"}, {"description": "lines which do not have 'life'.", "ground_truth": "~(.*life.*)", "chatgpt_output": "`^(?!.*life).*$`"}, {"description": "lines which start with a number.", "ground_truth": "[0-9].*", "chatgpt_output": "`^[0-9]\\d*(?:\\.[0-9]*)?$`"}, {"description": "lines that start with a 'z' and end with an 'a'.", "ground_truth": "z.*a", "chatgpt_output": "`^z.*a$`"}, {"description": "lines that have instances of a number and a vowel", "ground_truth": "(.*[0-9].*)&(.*[AEIOUaeiou].*)", "chatgpt_output": "`\\w+\\d+\\w+\\w+[aeiouAEIOU]`"}, {"description": "lines which have both uppercase letters and lowercase letters.", "ground_truth": "(.*[A-Z].*)&(.*[a-z].*)", "chatgpt_output": "`.\\igent.*[a-z]\\1[A-Z]`"}, {"description": "lines containing 5 letter words.", "ground_truth": ".*\\b[A-Za-z]{5}\\b.*", "chatgpt_output": "`\\w{5}\\s*[$#%\\cesterl]|[^.\\n]\\s{5}[^.\\n]`"}, {"description": "lines that match 'billy' or 'bob'.", "ground_truth": ".*(billy|bob).*", "chatgpt_output": "`/(billy|bob)/g`"}, {"description": "lines which contain five or more 'y'", "ground_truth": "(.*y.*){5,}", "chatgpt_output": "`/.\\ Ly{5,}/g`"}, {"description": "lines that include words starting with 'ne'.", "ground_truth": ".*\\bne[A-Za-z]*\\b.*", "chatgpt_output": "`\\bnE[a-z]*\\w+`"}, {"description": "lines containing words that start with 'x'", "ground_truth": ".*\\bx[A-Za-z]*\\b.*", "chatgpt_output": "`\\bis[a-z]+`"}, {"description": "lines containing 'ge' or 'an' before 'ger' or 'tra'", "ground_truth": ".*(ge|an).*(ger|tra).*", "chatgpt_output": "`/.*(ge|an)\\s*(ger|tra).*/gm`"}, {"description": "lines that end with 'gh'", "ground_truth": ".*gh", "chatgpt_output": "`/$[\\ Jagh]$/m`"}, {"description": "lines which contain 'sorry'", "ground_truth": ".*sorry.*", "chatgpt_output": "`/sorry/g`"}, {"description": "lines with 'tch' but not 'wi'.", "ground_truth": "(.*tch.*)&(~(.*wi.*))", "chatgpt_output": "`/\\btch(?! [\\w](?:wi)|$)/g`"}, {"description": "lines that start with 'far'", "ground_truth": "far.*", "chatgpt_output": "`^far`"}, {"description": "lines using words that end in 'y' or 'i'.", "ground_truth": ".*\\b[A-Za-z]*(y|i)\\b.*", "chatgpt_output": "`\\b[wy]\\b`"}, {"description": "lines that contain the number '2005' and 'May' and begin with 'Mary'.", "ground_truth": "(.*2005.*)&(.*May.*)&(Mary.*)", "chatgpt_output": "^Mary.*(May.\\s+\\d{4}=\\d{4}[\\.]|May\\s+[\\w']{3}\\s*\\d{4}=)[2-9][0-9]{3}$ \\- This regex will match lines that begin with \"Mary\", contain the substring \"May\" followed by a space and any 4 digits representing a year, or \"May\" followed by three letters representing the month name and a space then a 4-digit year."}, {"description": "lines with an '8' that comes after a '5'.", "ground_truth": ".*5.*8.*", "chatgpt_output": "`\\5\\.8`"}, {"description": "lines utilizing words starting with 'w'.", "ground_truth": ".*((w.*)&(\\b[A-Za-z][A-Za-z]*\\b)).*", "chatgpt_output": "`\\bw\\w+:`"}, {"description": "lines containing words that start with 'th'", "ground_truth": ".*\\bth[A-Za-z]*\\b.*", "chatgpt_output": "`\\bth\\w+`"}, {"description": "lines that contain 'ig' or 'physics' before 'nobel'.", "ground_truth": ".*(ig|physics).*nobel.*", "chatgpt_output": "`/.*(ig|physics) (\\S+) nobel.*/`"}, {"description": "lines containing 'st' and containing 'gy' too", "ground_truth": "(.*st.*)&(.*gy.*)", "chatgpt_output": "`/ENDOROFST.+ENDOROFgy/g`"}, {"description": "lines that contain the text 'NOW'", "ground_truth": ".*NOW.*", "chatgpt_output": "`/NOW/g`"}, {"description": "lines that contain the text 'hello'", "ground_truth": ".*hello.*", "chatgpt_output": "`/hello/g`"}, {"description": "lines that contain five words that begin with 'P'.", "ground_truth": ".*(.*\\bP[A-Za-z]*\\b.*){5}.*", "chatgpt_output": "`\\b(P\\w+\\s){5}\\b`"}, {"description": "lines that have words ending with 'ge'.", "ground_truth": ".*\\b[A-Za-z]*ge\\b.*", "chatgpt_output": "\\b[wan-\\ zaw-][^ ]*ge\\b"}, {"description": "Look for any line with the '@' symbol.", "ground_truth": ".*\\@.*", "chatgpt_output": "`/@/gm`"}, {"description": "lines using an instance of 'itch'", "ground_truth": ".*itch.*", "chatgpt_output": "`\\bitch\\b(?=[\\s\\n])+`"}, {"description": "lines containing three vowels", "ground_truth": "(.*[AEIOUaeiou].*){3}", "chatgpt_output": "`/[aeiou]{3}/g`"}, {"description": "lines containing 'ers' and containing 'oxy' too", "ground_truth": "(.*ers.*)&(.*oxy.*)", "chatgpt_output": "`/\\bers\\oxy\\/g`"}, {"description": "lines that have more than 6 numbers.", "ground_truth": "(.*[0-9].*){7,}", "chatgpt_output": "`^.{7,}\\d+(\\s+\\d+){5,}$`"}, {"description": "lines with the word 'Goal' in them.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(Goal)).*", "chatgpt_output": "`/\\bGoal\\b/gm`"}, {"description": "lines beginning with 'Therefore'", "ground_truth": "Therefore.*", "chatgpt_output": "`^Therefore\\s`"}, {"description": "lines using 2 or more words containing the letters 'ing'.", "ground_truth": "(.*(\\b[A-Za-z]+\\b&(.*ing.*)).*){2,}", "chatgpt_output": "`\\b\\w+\\s+\\w+ing\\b|[^.!?]*\\b\\w+\\s+\\w+ing\\b[^.!?]*`"}, {"description": "lines that have the word 'love' preceeding the word 'you'.", "ground_truth": ".*\\blove\\b.*\\byou\\b.*", "chatgpt_output": "\\blove\\s+(?=\\s+you)\\b"}, {"description": "lines which contain a 3 letter string starting with a", "ground_truth": ".*(a[A-Za-z]{2}).*", "chatgpt_output": "`\\b\\w{2,}[[:alpha:]]{3}\\b`"}, {"description": "lines starting with a 'T'.", "ground_truth": "T.*", "chatgpt_output": "`^T.+$`"}, {"description": "lines that contain the letters 'ba'.", "ground_truth": ".*ba.*", "chatgpt_output": "`/\\\u0431\u0430\\/g`"}, {"description": "lines that are composed of 4 or more words.", "ground_truth": "(.*\\b[A-Za-z]+\\b.*){4,}", "chatgpt_output": "\\.\\hattan Size\\s+([\\w\\s]+\\s+){3,}[\\w\\s]+"}, {"description": "lines using the word 'George' and the number '62'.", "ground_truth": ".*(.*\\bGeorge\\b.*)&(.*62.*).*", "chatgpt_output": "`./\\BGeorge\\d{2}[[:space:]]62/g`"}, {"description": "lines utilizing words starting with 'b'.", "ground_truth": ".*\\bb[A-Za-z]*\\b.*", "chatgpt_output": "`\\b[bw]+\\h*\\R`"}, {"description": "lines that use the word 'boom' followed by words starting with 'ka'", "ground_truth": ".*\\bboom\\b.*\\bka[A-Za-z]*\\b.*", "chatgpt_output": "\\b(?![a-z]*boom\\h+(?!\\.)\\1)[a-z]+(?=\\s}|$) [ka]\\w+"}, {"description": "lines that end in a number", "ground_truth": ".*[0-9]", "chatgpt_output": "`/\\A[^]\\n.*[0-9]$/gm`"}, {"description": "lines that use words with 'ce'.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(.*ce.*)).*", "chatgpt_output": "\\b(.*\\bce\\b.*\\b|\\.ce\\.).+$"}, {"description": "lines which have at least 1 numeric character.", "ground_truth": ".*[0-9].*", "chatgpt_output": "`.+[0-9]+`"}, {"description": "lines that contain at least one word starting with 'q'.", "ground_truth": ".*\\bq[A-Za-z]*\\b.*", "chatgpt_output": "`^.*\\s+(q\\w+).*$`"}, {"description": "lines that have 'twist'", "ground_truth": ".*twist.*", "chatgpt_output": "`/twist/g`"}, {"description": "lines containing words that start with and end with 'xyz'", "ground_truth": "xyz(.*xyz)?", "chatgpt_output": "`\\bxyz[\\w.]+\\b(?=(\\s|\\z)(?=xyz))`"}, {"description": "lines containing 'x' and containing 'y' too", "ground_truth": "(.*x.*)&(.*y.*)", "chatgpt_output": "`/(?:^|.\\n)*(x).*(y).*(?:$|\\n)/gm`"}, {"description": "lines that contain words ending with 'la'.", "ground_truth": ".*\\b[A-Za-z]*la\\b.*", "chatgpt_output": "\\b[A-Za-z]*la\\b"}, {"description": "lines that have 3 numbers and contain the word 'Columbia'.", "ground_truth": "(.*[0-9].*){3}&(.*\\bColumbia\\b.*)", "chatgpt_output": "^.*(\\d{3})\\s+Columbia\\s+(?:\\d{3})\\s+(?:\\d{3}).*$"}, {"description": "lines that contain at least one number.", "ground_truth": ".*[0-9].*", "chatgpt_output": "`\\.+[0-9]`"}, {"description": "lines that contain words starting with 'ke'.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(ke.*)).*", "chatgpt_output": "`\\bke\\w+\\b`"}, {"description": "lines that contain a word using at most 6 letters", "ground_truth": ".*\\b[A-Za-z]{1,6}\\b.*", "chatgpt_output": "\\b\\w{1,6}\\b(?=(\\.|\\n)(?![^\\n]*[^\\n]|\\z)))"}, {"description": "lines using 'ent' or 'ong'", "ground_truth": ".*(ent|ong).*", "chatgpt_output": "`\\/[a-z]+ent|[a-z]+ong\\/\\`"}, {"description": "lines containing words using a vowel.", "ground_truth": ".*\\b[A-Za-z]*[aeiouAEIOU][A-Za-z]*\\b.*", "chatgpt_output": "\\b[aeiou]\\w+\\b(?=(\\.|\\n)*[^.\\r\\n]\\1[^\\n]+[.\\n]?)[^.\\r\\n]*[\\n.]"}, {"description": "lines with words ending in 'y'.", "ground_truth": ".*\\b[A-Za-z]*y\\b.*", "chatgpt_output": "`\\b\\w*y\\b`"}, {"description": "lines that contain 2 numbers that contain '19'.", "ground_truth": "(.*19.*){2}", "chatgpt_output": "`/\\d{2} nineteen\\d{2}/g`"}, {"description": "lines that contain at least 2 capital letters.", "ground_truth": "(.*[A-Z].*){2,}", "chatgpt_output": "^([A-Z]{2,}|[A-Z][a-z]*[A-Z][a-z]*).*$ # This regex matches lines that contain at least two capital letters, either two or more consecutive capital letters, or a capital letter surrounded by any number of non-capital letters."}, {"description": "lines containing a 6 letter sequence", "ground_truth": ".*[A-Za-z]{6}.*", "chatgpt_output": "`\\.{5}([A-Za-z]\\{6\\})\\.`"}, {"description": "lines where the letter c appears more than one time", "ground_truth": "(.*c.*){2,}", "chatgpt_output": "\\b(.*?)C+(\\1)bw"}, {"description": "lines which contain only vowels.", "ground_truth": "[AEIOUaeiou]*", "chatgpt_output": "`^[aeiouAEIOU]*$`"}, {"description": "lines that contain words ending in 'i'.", "ground_truth": ".*\\b[A-Za-z]*i\\b.*", "chatgpt_output": "`/\\b\\w*\\bi\\b/g`"}, {"description": "lines containing 'ast'", "ground_truth": "(.*ast.*).*", "chatgpt_output": "`/\\bstast\\b/gm`"}, {"description": "lines using 'the'", "ground_truth": ".*the.*", "chatgpt_output": "`\\bthe\\b(?=[\\s.\\n]|$)`"}, {"description": "lines containing 'on' and also containing 'off'", "ground_truth": "(.*on.*)&(.*off.*)", "chatgpt_output": "`/\\bon\\b.*\\boff\\b/g`"}, {"description": "lines that mention 'trolls'.", "ground_truth": ".*trolls.*", "chatgpt_output": "`/\\btrolls\\b/gm` # Matches 'trolls' as whole word (case insensitive) in multiline text."}, {"description": "lines that contain at least one vowel and at least two numbers", "ground_truth": "((.*[AEIOUaeiou].*)&(.*[0-9].*){2})", "chatgpt_output": "`^(?=.*[aeiou])(?=.*\\d{2,}))$`"}, {"description": "lines that begin with the word 'the'", "ground_truth": "\\bthe\\b.*", "chatgpt_output": "`^the\\s`"}, {"description": "lines that contain words with 'ri'.", "ground_truth": ".*\\b[A-Za-z]*ri[A-Za-z]*\\b.*", "chatgpt_output": "\\b[wRi][ap]+\\b(?(=\\s)[\\w']+ri[\\w']+)"}, {"description": "lines which contain 3 or more vowels.", "ground_truth": "(.*[AEIOUaeiou].*){3,}", "chatgpt_output": "\\b[aeiou]{3,}\\b"}, {"description": "lines using 3 instances of 'sw'", "ground_truth": ".*(.*sw.*){3}.*", "chatgpt_output": "`.\\w*sw\\.w*sw\\.w*sw\\.`"}, {"description": "lines that contain instances of 'ape', but only if its one of the first three words.", "ground_truth": "([^A-Za-z]*\\b[A-Za-z]+\\b[^A-Za-z]*){0,2}[^A-Za-z]*\\bape\\b.*", "chatgpt_output": "^(\\w+\\s+ape\\s+)+.[^.]+\\1$ # This regex will match lines where 'ape' is one of the first three words, with word boundaries (\\w+) and a space (\\s+) around 'ape'. The $ anchor ensures the whole line is matched, and the \\1 in the end makes sure the pattern of words before 'ape' repeats itself. The [^.]+\\. at the end ensures there is at least one more word before the end of the line."}, {"description": "lines which contain a word starting with the letter 'a' and a word starting with the letter 'z'.", "ground_truth": "(.*\\ba[A-Za-z]*\\b.*)&(.*\\bz[A-Za-z]*\\b.*)", "chatgpt_output": "`\\ba[word]\\s+\\z[w+]{0,}\\s+z[w+]`"}, {"description": "lines that show 'May' and 'June'.", "ground_truth": ".*(.*May.*)&(.*June.*).*", "chatgpt_output": "\\bMay|\\bJune\\b"}, {"description": "lines that use words starting with 'no'.", "ground_truth": ".*\\bno[A-Za-z]*\\b.*", "chatgpt_output": "`\\bno\\w+:`"}, {"description": "lines that contain the text 'this is it'.", "ground_truth": ".*this is it.*", "chatgpt_output": "/this is it/g"}, {"description": "lines that start with 'the'.", "ground_truth": "(the.*).*", "chatgpt_output": "`^the\\.`"}, {"description": "lines that show the letter 'a' and number '5'.", "ground_truth": "(.*a.*)&(.*5.*)", "chatgpt_output": "`/\\bat[1-5]\\d*a\\/g`"}, {"description": "lines using 'din' after 'e' or 'ky'.", "ground_truth": ".*(e|ky).*din.*", "chatgpt_output": "`(?=e|ky).*din`"}, {"description": "lines that contain both a 'B' and a 'b'.", "ground_truth": "(.*B.*)&(.*b.*)", "chatgpt_output": "`/B.*b.*B/g`"}, {"description": "lines that have a '7' in them", "ground_truth": ".*7.*", "chatgpt_output": "`/7/g` This regular expression will match the string '7' on all lines, allowing you to find lines that contain that specific digit."}, {"description": "lines using at least 6 characters", "ground_truth": ".*.{6}.*", "chatgpt_output": "`.{6,}` or `.{6,}$` for end of line matching. This will match any line containing at least 6 characters."}, {"description": "lines that contain the word 'zoo'.", "ground_truth": ".*\\bzoo\\b.*", "chatgpt_output": "/\\bzoo\\b/g"}, {"description": "lines using the vowel combination 'ei'.", "ground_truth": ".*ei.*", "chatgpt_output": "/\\benei\\w*/g"}, {"description": "lines containing at least 2 words", "ground_truth": "(.*\\b[A-Za-z]+\\b.*){2,}", "chatgpt_output": "\\.{1,}([\\w\\s]+)[.\\n]([^\\n]+\\s+[\\w\\s]+)[.\\n]"}, {"description": "lines containing the word 'run' or the word 'hat'", "ground_truth": ".*\\b(run|hat)\\b.*", "chatgpt_output": "`/run|\\hat/g`"}, {"description": "lines containing at least 2 characters but not 4 characters or more", "ground_truth": ".{2,3}", "chatgpt_output": "`^.[.\\n](?!.[{3}).*$`"}, {"description": "lines with no vowels", "ground_truth": "~(.*[AEIOUaeiou].*)", "chatgpt_output": "\\b[^aeiouAEIOU]\\w*\\b"}, {"description": "lines using words that contain the letter 'q'.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(.*q.*)).*", "chatgpt_output": "\\b\\w*q\\w*\\b(?![^.\\n]*(?:\\.|\\n)|[^(\\[{}])*(?:[{},]|[^(\\])\\]))*\\.?|(?:^|\\n)(?=\\S.*\\b\\w*q\\w*\\b)"}, {"description": "lines containing the word 'shoe' and containing the word 'lace'", "ground_truth": "(.*\\bshoe\\b.*)&(.*\\blace\\b.*)", "chatgpt_output": "`/\\bshoe\\b.*\\blace\\b/g`"}, {"description": "lines using 2 or more words comprised of 5 letters", "ground_truth": "(.*\\b[A-Za-z]{5}\\b.*){2,}", "chatgpt_output": "`\\w+\\s+\\w{5,}`"}, {"description": "lines starting with 're'", "ground_truth": "re.*", "chatgpt_output": "`^re.`"}, {"description": "lines that contain 'in'", "ground_truth": ".*in.*", "chatgpt_output": "/in/g"}, {"description": "lines using 'ick'", "ground_truth": ".*ick.*", "chatgpt_output": "`/\\bick\\b/gm`"}, {"description": "lines that contain words starting with 'ki'.", "ground_truth": ".*\\bki[A-Za-z]*\\b.*", "chatgpt_output": "\\bki\\w+"}, {"description": "lines that end in a digit", "ground_truth": ".*[0-9]", "chatgpt_output": "`/[\\d]$/`"}, {"description": "lines that have two vowels", "ground_truth": "(.*[AEIOUaeiou].*){2}", "chatgpt_output": "`\\bstowwords{[aeiou][aeiou]}\\z` or `\\bstowwords\\{[aeiou]\\{2,\\}\\}\\z` # Both of these should work, first one is more specific."}, {"description": "lines having words starting with 'di'.", "ground_truth": ".*\\bdi[A-Za-z]*\\b.*", "chatgpt_output": "`\\bdi\\w+`"}, {"description": "lines that contain five vowels", "ground_truth": "(.*[AEIOUaeiou].*){5}", "chatgpt_output": "`^(?=.{5}[aeiou]{5}.{*})$`"}, {"description": "lines containing 'tt' and containing 'bb' too", "ground_truth": "(.*tt.*)&(.*bb.*)", "chatgpt_output": "`/tt.\\+bb\\/g`"}, {"description": "lines that contain the word 'hello' within 5 characters of the word 'world'.", "ground_truth": ".*(\\bhello\\b.{1,5}\\bworld\\b|\\bworld\\b.{1,5}\\bhello\\b).*", "chatgpt_output": "`/\\bworld\\s+(?:\\W+hello)\\b/g`"}, {"description": "lines that end with the number '100'.", "ground_truth": ".*100", "chatgpt_output": "\\$.+(100)$"}, {"description": "lines which begin with the word 'how'", "ground_truth": "((\\b[A-Za-z]+\\b)&(how)).*", "chatgpt_output": "`^how`"}, {"description": "lines using at least three numerical characters", "ground_truth": "(.*[0-9].*){3,}", "chatgpt_output": "`^.(?=.\\d{3,}[^\\n]*).+[\\n]`"}, {"description": "lines that do not have the letter 'a'", "ground_truth": "~(.*a.*)", "chatgpt_output": "`^[^a]$`"}, {"description": "lines that contain words ending in 'ch'", "ground_truth": ".*\\b[A-Za-z]*ch\\b.*", "chatgpt_output": "\\b[^']*[\u091a\u80e1]+\\b(?=\\s*(?:\\r?\\n|\\z))"}, {"description": "lines that contain the word 'trust'.", "ground_truth": ".*\\btrust\\b.*", "chatgpt_output": "`/trust/\\` # This will match the exact word \"trust\" in a line. If you want to match 'trust' even if it's part of another word (trustworthy, untrustworthy, etc.), consider using \\b before and after the word: /\\btrust\\b/"}, {"description": "lines which contain the letter 'x' and the letter 'y'", "ground_truth": "(.*x.*)&(.*y.*)", "chatgpt_output": "`/[xy]/g`"}, {"description": "lines that have a word of 3 letters", "ground_truth": ".*\\b[A-Za-z]{3}\\b.*", "chatgpt_output": "\\b\\w{3}\\b"}, {"description": "lines that end with 'boby'", "ground_truth": ".*boby", "chatgpt_output": "`/\\.boby$/g`"}, {"description": "lines that have the word 'couch' included", "ground_truth": ".*\\bcouch\\b.*", "chatgpt_output": "`/\\bcouch\\b/g`"}, {"description": "lines that contain at least five words.", "ground_truth": "(.*\\b[A-Za-z][A-Za-z]*\\b.*){5,}", "chatgpt_output": "\\.{4,\\s+}\\w+\\s+[-\\w]+\\s+[-\\w]+\\s+[-\\w]+\\s+[-\\w]+\\s+[-\\w]+"}, {"description": "lines which have a th after a 'ch'.", "ground_truth": ".*ch.*th.*", "chatgpt_output": "`/\\bch[[:blank:]]+th\\b/g`"}, {"description": "lines which contain the letter 'z' twice.", "ground_truth": "(.*z.*){2,}", "chatgpt_output": "`/\\bis(?:[aeiou]\\1)?z{2}/gi`"}, {"description": "lines that end with '2' and contain words that begin with 'Sel'", "ground_truth": ".*\\bSel[A-Za-z]*\\b.*2", "chatgpt_output": "`/\\bio$|\\bsel\\w+\\b/gm lines ending with '2' and containing words beginning with 'Sel'`"}, {"description": "lines containing either a 'w' or 's' character.", "ground_truth": ".*(w|s).*", "chatgpt_output": "`/[ws]/g`"}, {"description": "lines which contain 2 or more 'q'.", "ground_truth": "(.*q.*){2,}", "chatgpt_output": "`/[\\bfq]{2,}/g`"}, {"description": "lines that contain words starting with 'an'.", "ground_truth": ".*\\ban[A-Za-z]*\\b.*", "chatgpt_output": "`\\ban\\w+\\b`"}, {"description": "lines having words ending with 'fa'.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(.*fa)).*", "chatgpt_output": "\\b[^]*\\bfa$"}, {"description": "lines ending with 'vem'", "ground_truth": ".*vem", "chatgpt_output": "`/$[\\,\\\\]\\*-+\\s*vem$/g`"}, {"description": "lines containing words starting with the letter 'x'.", "ground_truth": ".*\\bx[A-Za-z]*\\b.*", "chatgpt_output": "\\b[wx]\\w+\\b(?=[\\s.\\n]+|$)"}, {"description": "lines with 7 or more words", "ground_truth": "(.*\\b[A-Za-z]+\\b.*){7,}", "chatgpt_output": "`\\.{1,6}\\s+(\\w+|\\s){7,}\\s+`"}, {"description": "lines that contain 'jellyfish' and mention 'breeding'.", "ground_truth": "(.*jellyfish.*)&(.*breeding.*)", "chatgpt_output": "`/\\bbellyfish\\s+breeding\\b/g`"}, {"description": "lines that contain 5 or more letters", "ground_truth": ".*(.*[A-Za-z].*){5,}.*", "chatgpt_output": "`^.\\{5,}$`"}, {"description": "lines that contain words ending with 'le'.", "ground_truth": ".*((\\b.*le\\b)&([A-Za-z]+)).*", "chatgpt_output": "\\b[a-z]+le\\b"}, {"description": "lines that contain words and 4 numbers.", "ground_truth": "(.*\\b[A-Za-z]+\\b.*)&(.*[0-9].*){4}", "chatgpt_output": "`\\w+\\s+\\d+\\d+\\d+\\d+`"}, {"description": "lines that contain words ending with 'd'.", "ground_truth": ".*((\\b[A-Za-z][A-Za-z]*\\b)&(.*d)).*", "chatgpt_output": "`\\b\\w*\\bd\\b`"}, {"description": "lines using a word containing the letter 'l'.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(.*l.*)).*", "chatgpt_output": "`/\\bw\\\u043b\u0438\u043d\u043a\u0441|\u043b\\.?[\u0430-\u0437\u0410-\u042f\u0435\u0451\u0438\u0438\u043e\u0443\u044b\u044d\u044e\u044f]{1,}\\b/g` (this regex is for Russian language, replace \"\u043b\" with 'l' for English)"}, {"description": "lines containing the word 'inoperative'.", "ground_truth": ".*\\binoperative\\b.*", "chatgpt_output": "`/\\binoperative\\b/gm`"}, {"description": "lines with all words beginning with 'a'.", "ground_truth": "~(.*((\\b[A-Za-z]+\\b)&(~(a.*))).*)", "chatgpt_output": "`^(?=.\\A[a-z]\\{words\\-\\d+\\}\\s{1,}[a-z]\\{words\\-\\d+\\}\\s{1,}[a-z]\\{words\\-\\d+\\}\\s{1,}[a-z]\\{words\\-\\d+\\}\\s{1,}[a-z]\\{words\\-\\d+\\}$`"}, {"description": "lines that end with 'you'.", "ground_truth": ".*you", "chatgpt_output": "`/$ YOU/$` or `/$ \\ dy?ou$/` (Python flavor)"}, {"description": "lines that contain 4 letter words ending in 's'", "ground_truth": ".*\\b[A-Za-z]{3}s\\b.*", "chatgpt_output": "\\b\\w{3}js\\b"}, {"description": "lines which contain the letter 'h' preceded by a letter.", "ground_truth": ".*[A-Za-z].*h.*", "chatgpt_output": "`[a-z]h`"}, {"description": "lines which have the word 'egg'", "ground_truth": ".*\\begg\\b.*", "chatgpt_output": "\\begg\\b # This regex pattern matches the word 'egg' only, with word boundaries ensuring it isn't matched as part of another word."}, {"description": "lines that contain 'is' or 'it'", "ground_truth": ".*(is|it).*", "chatgpt_output": "`/\\bis|it\\b/g`"}, {"description": "lines using 'ss' between 'a' and 'le'", "ground_truth": ".*a.*ss.*le.*", "chatgpt_output": "`/\\\u0431\u0430[^le]*ss[^le]*le\\b/g`"}, {"description": "lines that have at least two words that start with 's'.", "ground_truth": "(.*\\bs[A-Za-z]*\\b.*){2}", "chatgpt_output": "\\.{1,}([ws][ws].*)|(\\bss.\\+)(([ws][ws])\\.)*[.\\n]"}, {"description": "lines comprised of 5 or more words containing 5 or fewer letters", "ground_truth": "(.*((\\b[A-Za-z]+\\b)&([A-Za-z]{0,5})).*){5,}", "chatgpt_output": "`\\w{5,}\\s+\\w{\\1,\u2084}\\s+\\{5,\\}\\w{5,}`"}, {"description": "lines that contain a number ending with '0'", "ground_truth": ".*[0-9]*0.*", "chatgpt_output": "`/\\d+(?=\\.$)|(\\d){1,}\\b0$/g`"}, {"description": "lines that end with the word 'free'.", "ground_truth": ".*\\bfree", "chatgpt_output": "`/(\\__.)+free/$/gm`"}, {"description": "lines which contain 'ead' or 'pro'", "ground_truth": ".*(ead|pro).*", "chatgpt_output": "`/ Ned|Pro /g`"}, {"description": "lines that contain the word 'and'", "ground_truth": ".*\\band\\b.*", "chatgpt_output": "`/\\band\\;/g`"}, {"description": "lines using 4 letter words", "ground_truth": ".*\\b[A-Za-z]{4}\\b.*", "chatgpt_output": "\\b\\w{4}\\b(?=(\\r?\\n)|$)"}, {"description": "lines that contain words starting with 'gi'.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(gi.*)).*", "chatgpt_output": "`/\\bg[iip][^.]+\\b/g`"}, {"description": "lines that utilize words starting with 'pu'.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(pu.*)).*", "chatgpt_output": "`\\bpu[\\w.]+\\b`"}, {"description": "lines that end in 'e'", "ground_truth": ".*e", "chatgpt_output": "`/$[</\\w]*e$/g`"}, {"description": "lines end in an 'a'", "ground_truth": ".*a", "chatgpt_output": "`/$[\\nd-za-\\ z]+a$/m`"}, {"description": "lines that have at least three words beginning with a vowel.", "ground_truth": "(.*\\b[AEIOUaeiou][A-Za-z]*\\b.*){3}", "chatgpt_output": "`\\b[\\w][\\w]* [a-ez]\\.+\\s+[a-ez][\\w]*\\s+[a-ez][\\w]*\\.`"}, {"description": "lines which contain a 3 letter string", "ground_truth": ".*([A-Za-z]{3}).*", "chatgpt_output": "`\\b\\w{3}\\b`"}, {"description": "lines with 'car' between 'try' and 'say'.", "ground_truth": ".*try.*car.*say.*|.*say.*car.*try.*", "chatgpt_output": "`try.*?car.*?say(?=\\\\.(?:[^.\\n\\]*(?!(try|say))[.\\n]|$))`"}, {"description": "lines that contain the word 'the'", "ground_truth": ".*\\bthe\\b.*", "chatgpt_output": "`/\\bthe\\b/g`"}, {"description": "lines that contain the number '10'.", "ground_truth": ".*10.*", "chatgpt_output": "`\\d+\\:(10)`"}, {"description": "lines that contain 6 letter words beginning with the letter 'y'.", "ground_truth": ".*\\by[A-Za-z]{5}\\b.*", "chatgpt_output": "\\b[zy]\\w{4}\\b"}, {"description": "lines that contain a word starting with a vowel.", "ground_truth": ".*\\b[AEIOUaeiou][A-Za-z]*\\b.*", "chatgpt_output": "`/\\bw[aeiou]\\w+\\b/g`"}, {"description": "lines with 'helper' where the word 'little' comes before 'helper'.", "ground_truth": "(.*helper.*)&(.*\\blittle\\b.*helper.*)", "chatgpt_output": "`/\\blittles\\s+helper\\b/g`"}, {"description": "lines containing an instance of the name 'Beaker'.", "ground_truth": ".*Beaker.*", "chatgpt_output": "`/Beaker\\b/gm`"}, {"description": "lines which contain 'qu' at the start", "ground_truth": "qu.*", "chatgpt_output": "^qu\\.+$"}, {"description": "lines that show 'Mr' and 'Mrs' but not 'Ms' or 'Miss'.", "ground_truth": "((.*Mr.*)&(.*Mrs.*)&(~(.*(Ms|Miss).*)))", "chatgpt_output": "`^(Mr|Mrs)(?![a-z]s[.\\s](Ms|Miss))(?:\\r?\\n)+?$`"}, {"description": "lines that include 'Canada' and 'Mexico' but not 'Cuba'.", "ground_truth": "(.*Canada.*)&(.*Mexico.*)&(~(.*Cuba.*))", "chatgpt_output": "`/\\bCanada\\b\\s*(?!Cuba)\\s*Mexico\\b/g`"}, {"description": "lines which contain a word ending in 'ing'.", "ground_truth": ".*\\b[A-Za-z]*ing\\b.*", "chatgpt_output": "`/(\\w+ing)$/` # Matches words ending with 'ing' at the end of a line."}, {"description": "lines that contain 'tumeric' and 'saffron'", "ground_truth": "(.*tumeric.*)&(.*saffron.*)", "chatgpt_output": "`/line\\:'(.*tumeric.*)(.*saffron.*)/g`"}, {"description": "lines that start with 'apartheid'.", "ground_truth": "apartheid.*", "chatgpt_output": "^apartheid.*$"}, {"description": "lines containing words that start with 'h' and end with 'e'.", "ground_truth": ".*\\bh[A-Za-z]*e\\b.*", "chatgpt_output": "`/\\bh[ae]:?[\u00aa-\u00ff]\\he/g`"}, {"description": "lines containing both 'ac' and 'dc'", "ground_truth": "(.*ac.*)&(.*dc.*)", "chatgpt_output": "`/(\\ Ach|\\ Ac\\s+DC|\\ A[cid]\\s+D[cid]\\s+c)/g`"}, {"description": "lines composed with a word", "ground_truth": ".*\\b[A-Za-z]+\\b.*", "chatgpt_output": "\\w+\\s*(?:\\r?\\n)+(?=\\w+|\\z)"}, {"description": "lines which do not contain a vowel.", "ground_truth": "~(.*[AEIOUaeiou].*)", "chatgpt_output": "^[bstplfgcgqhjkwxynz]*.$ [This regex matches lines that do not contain any vowels. The caret ^ denotes the start of the line, the character class [bstplfgcgqhjkwxynz] matches any character that is not a vowel, the asterisk * allows for any number of these characters to appear in a row, and the dollar sign $ denotes the end of the line.]"}, {"description": "lines using words beginning with the letter 'x'.", "ground_truth": ".*\\bx[A-Za-z]*\\b.*", "chatgpt_output": "\\b[ wx]+\\b(?=[\\n\\r]|$) # This regex will match any word beginning with 'w' or 'x' followed by one or more letters 'x', and is followed by a newline or the end of the string."}, {"description": "lines containing words that end with 'L'", "ground_truth": ".*\\b[A-Za-z]*L\\b.*", "chatgpt_output": "`\\b\\w*(L)\\b`"}, {"description": "lines that contain words beginning in 'p'", "ground_truth": ".*\\bp[A-Za-z]*\\b.*", "chatgpt_output": "`\\bp\\w+\\w*\\b`"}, {"description": "lines that contain the word 'sea' followed by at least one number.", "ground_truth": ".*\\bsea\\b.*[0-9].*", "chatgpt_output": "`/\\bsea\\s+\\d+\\)/`"}, {"description": "lines that contain a word containing 5 or more letters.", "ground_truth": ".*\\b[A-Za-z]{5,}\\b.*", "chatgpt_output": "`\\w{5,}\\s.*` This regex pattern will match any line containing a word with five or more letters. The `\\w{5,}` part matches any word with five or more letters, and the `\\s.*` part matches any whitespace and the rest of the line."}, {"description": "lines that contain at least three five letter words", "ground_truth": "(.*\\b[A-Za-z]{5}\\b.*){3}", "chatgpt_output": "`\\w{5}\\W*\\w{5}[\\s\\S]*\\1{1,2}\\W*\\w{5}\\W*`"}, {"description": "lines that contain 'ugly' before 'betty' or 'thomas'.", "ground_truth": ".*ugly.*(betty|thomas).*", "chatgpt_output": "`/ugly.*(betty|thomas)/`"}, {"description": "lines that contain words starting with 'fa'.", "ground_truth": ".*\\bfa[A-Za-z]*\\b.*", "chatgpt_output": "`\\bfa\\w+`"}, {"description": "lines that contain 'fu' before 'ba' or 'bar'.", "ground_truth": ".*fu.*(ba|bar).*", "chatgpt_output": "`/\\bfu.*?(ba|bar)\\b/g`"}, {"description": "lines using more than 4 characters", "ground_truth": ".*.{5,}.*", "chatgpt_output": "`.{5,}`"}, {"description": "lines that contain any three vowels", "ground_truth": "(.*[AEIOUaeiou].*){3}", "chatgpt_output": "`\\w+( [aeiou]{3} [aeiou]|\\b[aeiou]{4,}\\b)`"}, {"description": "lines having words ending with 'ta'.", "ground_truth": ".*((\\b.*ta\\b)&([A-Za-z]+)).*", "chatgpt_output": "`\\bm\\w*\\b(?=\\s+\u027e\u0179\u0165a)$`"}, {"description": "lines which contain 'I am mad'.", "ground_truth": ".*I am mad.*", "chatgpt_output": "`/I am mad\\/` or `/\\bis mad\\./` for case insensitive match."}, {"description": "lines that use words that are only four letters long.", "ground_truth": ".*\\b[A-Za-z]{4}\\b.*", "chatgpt_output": "`\\b\\w{4}\\b(?=[\\s.\\n])+`"}, {"description": "lines that have five words that all end with the letter 'G'.", "ground_truth": "(.*((\\b.*G\\b)&([A-Za-z]+)).*){5}", "chatgpt_output": "`\\b\\w{4}[AG]{5}\\b`"}, {"description": "lines containing words that start with 'i'.", "ground_truth": ".*\\bi[A-Za-z]*\\b.*", "chatgpt_output": "`/\\bi\\w+\\s+/gm` # This regex will match words starting with 'i' in any position on a line, ignoring case (gmodifier) and splitting by whitespace (mModifier)."}, {"description": "lines containing 'mean' or 'nic' before 'est' or 'test'", "ground_truth": ".*(mean|nic).*(est|test).*", "chatgpt_output": "`/\\bnican|mean\\s+(est|test)\\b/g`"}, {"description": "lines that use words with 'ca'.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(.*ca.*)).*", "chatgpt_output": "\\b(look|feel|have|see|make|take)\\b [\\s-]+\\w{1,2}:\\s+(?:[c][a][:])[\\s]+\\S+"}, {"description": "lines that have ten words.", "ground_truth": "(.*\\b[A-Za-z]+\\b.*){10}", "chatgpt_output": "\\.{0,9}\\s\\w+\\{10\\}"}, {"description": "lines containing 'tain' after 're' or 'per'.", "ground_truth": ".*(re|per).*tain.*", "chatgpt_output": "`\\bre[rp]ain\\btain`"}, {"description": "lines that end in 'o'", "ground_truth": ".*o", "chatgpt_output": "`/$[\\!\\!\\]o$/gm`"}, {"description": "lines that contain 'x' and 'y' but not 'z'.", "ground_truth": "(.*x.*)&(.*y.*)&(~(.*z.*))", "chatgpt_output": "`/(\\nx\\ny\\\u00e1nd!(z)/g`"}, {"description": "lines that end in 'e'", "ground_truth": ".*e", "chatgpt_output": "`/\\.e$/g`"}, {"description": "lines having the letters 'ea'.", "ground_truth": ".*((ea)&([A-Za-z]*)).*", "chatgpt_output": "{\\.{1}[ea]{2}\\.}  // This regex searches for any sequence of one character followed by the letters 'ea' and then any single character. This should match the given description."}, {"description": "lines that begin with 'The' or 'For'.", "ground_truth": "(The|For).*", "chatgpt_output": "^(The|For)\\s"}, {"description": "lines that contain the letter 'V' and the number '33'.", "ground_truth": "(.*V.*)&(.*33.*)", "chatgpt_output": "`/V\\d{2}=33/g`"}, {"description": "lines starting with 'X' followed by a word with 'oa'.", "ground_truth": "X.*((\\b[A-Za-z]+\\b)&(.*oa.*)).*", "chatgpt_output": "`^X\\s+\\w+oa`"}, {"description": "lines that end with the letter 'o'", "ground_truth": ".*o", "chatgpt_output": "`/\\n.$/\\ni` or `/.\\n$/{m,}\\nob$/gm`"}, {"description": "lines using any instance of 'd' or 'e' followed by 's' or 'r'", "ground_truth": ".*(d|e).*(s|r).*", "chatgpt_output": "`[ded]\\w*[sr]`"}, {"description": "lines that contain a word and five numbers.", "ground_truth": "(.*\\b[A-Za-z][A-Za-z]*\\b.*)&(.*[0-9].*){5}", "chatgpt_output": "\\b[a-zA-Z]+[\\s]_[0-9]{5}[\\s]+[0-9]{5}[\\s]+[0-9]{5}[\\s]+[0-9]{5}\\b"}, {"description": "lines where 'TRY' is separated from 'LOL' with a comma", "ground_truth": ".*TRY.*\\,.*LOL.*|.*LOL.*\\,.*TRY.*", "chatgpt_output": "`\\bTRY\\s*,\\sLOL\\b`"}, {"description": "lines that contin words ending in 'e'.", "ground_truth": ".*\\b[A-Za-z]*e\\b.*", "chatgpt_output": "\\b[^\\.!?]*\\be$"}, {"description": "lines containing the word 'blog'", "ground_truth": ".*\\bblog\\b.*", "chatgpt_output": "`/\\bblog\\b/gm`"}, {"description": "lines using a word", "ground_truth": ".*\\b[A-Za-z]+\\b.*", "chatgpt_output": "\\b\\w+\\s+\\1\\s+\\1\\s+(\\w+)\\s+(?=(\\.\\s*)(?![^\\w\\s])\\1|\\z)\\1\\b(?=(?:\\r?\\n[^\\r\\n]*)|\\z)"}, {"description": "lines which have 'oo', but no instances of 'o' between the letters 'd' and 'a'", "ground_truth": "(.*oo.*)&(~(.*d.*o.*a.*|.*a.*o.*d.*))", "chatgpt_output": "`/d.*a(?!.*[oo]|\\.oo)/g`"}, {"description": "lines having words ending with 'en'.", "ground_truth": ".*\\b[A-Za-z]*en\\b.*", "chatgpt_output": "\\b\\w*(enen)\\b"}, {"description": "lines that contain three letter words.", "ground_truth": ".*\\b[A-Za-z]{3}\\b.*", "chatgpt_output": "\\b\\w{3}\\b"}, {"description": "lines using a 3 letter sequence", "ground_truth": ".*[A-Za-z]{3}.*", "chatgpt_output": "\\b\\w{3}\\b(?=[\\n\\r])"}, {"description": "lines which contain 'upper' or 'lower'", "ground_truth": ".*(upper|lower).*", "chatgpt_output": "`/[^][au]pper|lower[^]/g`"}, {"description": "lines that have the word 'sandwich'", "ground_truth": ".*sandwich.*", "chatgpt_output": "\\bsandwich\\b"}, {"description": "lines ending in 'ia'", "ground_truth": ".*ia", "chatgpt_output": "`/$[\\w]*(ia)$/gm`"}, {"description": "lines that begin with the phrase 'once upon a time'", "ground_truth": "once upon a time.*", "chatgpt_output": "^once upon a time"}, {"description": "lines that utilize the letters 'as'.", "ground_truth": ".*as.*", "chatgpt_output": "`/as/.+/g` This regex will match any line containing the substring 'as'."}, {"description": "lines that contain the word 'unifax' but not the word 'colorado'.", "ground_truth": "(.*\\bunifax\\b.*)&(~(.*\\bcolorado\\b.*))", "chatgpt_output": "\\bunifax(?!\\s+colorado)\\b"}, {"description": "lines using the word 'Westbury' next to a number.", "ground_truth": "(.*\\bWestbury\\b.*)&(.*[0-9].*)", "chatgpt_output": "`\\bWestbury\\s+\\d+\\b`"}, {"description": "lines with 'helper' and 'little'", "ground_truth": "(.*little.*)&(.*helper.*)", "chatgpt_output": "`/\\\u0431helper\\s+little\\b/g`"}, {"description": "lines that contain digits.", "ground_truth": ".*[0-9].*", "chatgpt_output": "`/\\d+/g`"}, {"description": "lines that contain three 'she'.", "ground_truth": "(.*she.*){3}", "chatgpt_output": "`/she{3}/g`"}, {"description": "lines that contain exactly two words.", "ground_truth": "(([^A-Za-z])*\\b[A-Za-z]+\\b([^A-Za-z])*){2}", "chatgpt_output": "`\\S+\\s+\\S+`"}, {"description": "lines using words that begin with 'q' but do not have a 'u'.", "ground_truth": ".*\\b(([A-Za-z]+)&(q.*)&(~(.*u.*)))\\b.*", "chatgpt_output": "`^(?!\\w*u).*\\bw(?:qq|q[\u0431-\u0446-zs-zxA-Z]\\w*)`"}, {"description": "lines that contain words starting with 'du'.", "ground_truth": ".*((\\b[A-Za-z][A-Za-z]*\\b)&(du.*)).*", "chatgpt_output": "`\\bdu\\w+`"}, {"description": "lines beginning with words that have a vowel as the first letter.", "ground_truth": "\\b[AEIOUaeiou][A-Za-z]*\\b.*", "chatgpt_output": "`^[aeiou][\\w.\\s]*`"}, {"description": "lines that begin with a numeral", "ground_truth": "[0-9].*", "chatgpt_output": "`^[0-9]\\d*\\R`"}, {"description": "lines which contain the word 'mobile' but do not contain the word 'phone'", "ground_truth": "(.*\\bmobile\\b.*)&~(.*\\bphone\\b.*)", "chatgpt_output": "\\bmobile\\W(!)\\B(?!phone)"}, {"description": "lines containing words that begin with 'G' and end with 'y'", "ground_truth": ".*\\bG[A-Za-z]*y\\b.*", "chatgpt_output": "`/\\bg[amy\u00e9]+$/g`"}, {"description": "lines containing at least 3 words", "ground_truth": "(.*\\b[A-Za-z]+\\b.*){3,}", "chatgpt_output": "`\\.{3,\\s+[\\w\\s]+\\K\\s+[\\w]+\\K\\s+[\\w]+(?=\\.|\\Z)`"}, {"description": "lines that have 'JFK' but not 'WAS'", "ground_truth": "(.*JFK.*)&(~(.*WAS.*))", "chatgpt_output": "`(/JFK.\\\u00fctWAS/g)`"}, {"description": "lines that contain the phrase 'Booyah'.", "ground_truth": ".*Booyah.*", "chatgpt_output": "`/Booyah\\/`"}, {"description": "lines that contain both the word 'bar' and the word 'stress'", "ground_truth": ".*(.*\\bbar\\b.*)&(.*\\bstress\\b.*).*", "chatgpt_output": "`/(\\w+)\\s*(bar)\\s+(\\w+)\\s*(\\w+)\\s*(stress)\\s+(\\w+)/`"}, {"description": "lines that contain words that have the letter 'e' occuring after the letter 'c'.", "ground_truth": ".*\\b[A-Za-z]*c[A-Za-z]*e[A-Za-z]*\\b.*", "chatgpt_output": "\\b[cg]\\w*e\\w*\\b (Looks for words that have 'c' or 'g' followed by 'e')"}, {"description": "lines that contain 3 numbers and one number contains 1.", "ground_truth": "(.*[0-9].*)&(.*1.*)", "chatgpt_output": "`\\d+\\s+\\d+\\s+\\d+\\s+\\d+`"}, {"description": "lines which begin with 'omega'", "ground_truth": "omega.*", "chatgpt_output": "^omega.\\*$ # Matches lines that begin with the string 'omega' followed by any character zero or more times."}, {"description": "lines using words ending with 'mo'.", "ground_truth": ".*((\\b.*mo\\b)&([A-Za-z]+)).*", "chatgpt_output": "`\\b\\w*\\bmo\\b`"}, {"description": "lines that contain the word 'Boby'.", "ground_truth": ".*\\bBoby\\b.*", "chatgpt_output": "`/Boby\\/` or `/\\bBoby\\b/g` for case insensitive and word boundary match. However, I'd suggest the latter as it provides more context sensitivity. For instance, it ensures that matches only occur when 'Boby' is a whole word and not a part of another word like 'robotBoby'."}, {"description": "lines containing usage of the word 'fried'.", "ground_truth": ".*\\bfried\\b.*", "chatgpt_output": "/\\bfried\\b(?:\\s.*[\\r\\n])+/g"}, {"description": "lines with words that contain 3 letters", "ground_truth": ".*\\b[A-Za-z]{3}\\b.*", "chatgpt_output": "`\\b\\w{3,}\\b(?=(\\.|\\n)+(?=|\\z)|(?<=\\s)[\\n.])`"}, {"description": "lines that use words ending with 'ot'.", "ground_truth": ".*\\b[A-Za-z]*ot\\b.*", "chatgpt_output": "`\\b\\w*(ot)\\b`"}, {"description": "lines using more than 3 characters", "ground_truth": ".*.{4,}.*", "chatgpt_output": "`.{3,}$`"}, {"description": "lines that contain the word 'null'", "ground_truth": ".*\\bnull\\b.*", "chatgpt_output": "`/\\bnull\\b/g`"}, {"description": "lines using a word which contains at least 5 letters.", "ground_truth": ".*\\b[A-Za-z]{5,}\\b.*", "chatgpt_output": "`\\w{5,}\\s+`"}, {"description": "lines that use words of at least 9 letters.", "ground_truth": ".*\\b[A-Za-z]{9,}\\b.*", "chatgpt_output": "\\w{9,}\\s+(\\w{9,}\\s+)*$"}, {"description": "lines that match the words 'and in this life'.", "ground_truth": ".*\\band in this life\\b.*", "chatgpt_output": "\\b(?=.*and)(?=.*in)(?=.*this)(?=.*life).\\b"}, {"description": "lines that contain at least 4 words.", "ground_truth": "(.*\\b[A-Za-z]+\\b.*){4,}", "chatgpt_output": "\\.{3,}\\s+\\S+[\\s\\S]+{3,}\\s+(\\w+|\\S+){4,}"}, {"description": "lines using at least 3 'b'", "ground_truth": "(.*b.*){3,}", "chatgpt_output": "`.{0,2}b{3,}.{0,2}`"}, {"description": "lines that contain an 'x'", "ground_truth": ".*x.*", "chatgpt_output": "`/x/g`"}, {"description": "lines that contain the symbol '-'.", "ground_truth": ".*-.*", "chatgpt_output": "`-`"}, {"description": "3 letter lines starting with 'x'", "ground_truth": "x[A-Za-z]{2}", "chatgpt_output": "`^[xxa-z]{3}$`"}, {"description": "lines containing 'pol' or 'mi' before 'ist' or 'lk'", "ground_truth": ".*(pol|mi).*(ist|lk).*", "chatgpt_output": "`/\\b(pol|mi)[^istlk]*(ist|lk)\\b/g`"}, {"description": "lines that have at least 2 words of 3 or more letters", "ground_truth": "(.*\\b[A-Za-z]{3,}\\b.*){2,}", "chatgpt_output": "\\.\\.\\W{3,}\\s+\\W{3,}\\.\\.|(?<=\\.)\\W{3,}+(?=\\.)|(?<=\\s)\\S{3,}\\s+\\S{3,}"}, {"description": "lines that contain '-' between words 'a' and 'lot'.", "ground_truth": ".*(\\ba\\b.*\\-.*\\blot\\b|\\blot\\b.*\\-.*\\ba\\b).*", "chatgpt_output": "\\ba\\s+-\\s+lot\\b"}, {"description": "lines with words that end in 'n'.", "ground_truth": ".*\\b[A-Za-z]*n\\b.*", "chatgpt_output": "`\\bn(?:[[:alpha:]]+n)?\\b`"}, {"description": "lines using 'lay' or 'lie'", "ground_truth": ".*l(ay|ie).*", "chatgpt_output": "`/lay|lie/g`"}, {"description": "lines that show 's' in the beginning of the word  and 't' at the end of the word.", "ground_truth": ".*((\\bs[A-Za-z]*\\b)&(\\b[A-Za-z]*t\\b)).*", "chatgpt_output": "\\bst\\w*s\\w*t\\b"}, {"description": "lines that have 'de' before 'st' and 're' after 'col'.", "ground_truth": "(.*de.*st.*)&(.*col.*re.*)", "chatgpt_output": "\\bde\\.*\\bst\\.*(?:[[:alpha:]]|[[:blank:]])+re\\b"}, {"description": "lines which contain 5 words starting with 'f'", "ground_truth": "(.*\\bf[A-Za-z]*\\b.*){5,}", "chatgpt_output": "`/\\bf\\w+\\s+\\w+(?:\\s+\\w+(?:\\s+\\w+){2}){3}/g`"}, {"description": "lines which mention 'puppy'.", "ground_truth": ".*puppy.*", "chatgpt_output": "`/puppy/g` (This will match the word \"puppy\" in every line of the given text.)"}, {"description": "lines that contain DEF' with a period immediately after it.'", "ground_truth": ".*DEF\\..*", "chatgpt_output": "\\bDEF\\.(?:[.\\n])"}, {"description": "lines using the word 'intellectual'", "ground_truth": ".*\\bintellectual\\b.*", "chatgpt_output": "`/\\bintellectual\\b/gm` # Matches the word 'intellectual' anywhere in a line, case insensitive (gmodifier). /b is a word boundary anchor to ensure we match the whole word and not a part of another word."}, {"description": "lines containing 'ant'", "ground_truth": ".*ant.*", "chatgpt_output": "`/ant\\/g`"}, {"description": "lines which have the word 'number' and a number", "ground_truth": "(.*\\bnumber\\b.*)&(.*[0-9].*)", "chatgpt_output": "`/\\bwnumber\\d+\\b/g`"}, {"description": "lines using words ending with 'on'.", "ground_truth": ".*\\b[A-Za-z]*on\\b.*", "chatgpt_output": "\\b[^-][^\\.']+on\\b(?=[\\.\\?]|$)"}, {"description": "lines that end with 'bar' and include the phrase 'San Jose'.", "ground_truth": "(.*bar)&(.*San Jose.*)", "chatgpt_output": "^.*San Jose.*$ERCHANT_MATCH if /(.*San Jose.*)\\s+(?=$|.\\s+bar)/s"}, {"description": "lines that use words starting with 'fu'.", "ground_truth": ".*\\bfu[A-Za-z]*\\b.*", "chatgpt_output": "`\\bfu.[a-z]*`"}, {"description": "lines beginning with 'begin'", "ground_truth": "begin.*", "chatgpt_output": "^begin\\R"}, {"description": "lines that contain words ending in 'e'.", "ground_truth": ".*(.*\\b[A-Za-z]*e\\b.*).*", "chatgpt_output": "`\\b[^-][^\\.]]+e\\b`"}, {"description": "lines that start with a vowel and ends in an 'e'.", "ground_truth": "[AEIOUaeiou].*e", "chatgpt_output": "^[aeiou].*e$"}, {"description": "lines starting with the word 'the'.", "ground_truth": "\\bthe\\b.*", "chatgpt_output": "`^the\\s`"}, {"description": "lines that contain 1 to 5 numbers and 1 letter.", "ground_truth": "([^0-9]*[0-9][^0-9]*){1,5}&(.*[A-Za-z].*)", "chatgpt_output": "^[a-z]\\d{1,5}(?:\\s+\\d{1,5}[a-z]){0,4}$"}, {"description": "lines that end with 'and'", "ground_truth": ".*and", "chatgpt_output": "`/\\nand$/` or `/\\r?$and/` for Windows systems. This regex will match lines that end with the string \"and\"."}, {"description": "lines that utilize 'pan' following words starting with 'pe'.", "ground_truth": ".*\\bpe[A-Za-z]*\\b.*pan.*", "chatgpt_output": "\\bpe\\W+pan\\b"}, {"description": "lines that have the word 'Facebook'", "ground_truth": ".*\\bFacebook\\b.*", "chatgpt_output": "/\\bFacebook\\b/g"}, {"description": "lines that have words with 're'.", "ground_truth": ".*\\b[A-Za-z]*re[A-Za-z]*\\b.*", "chatgpt_output": "`\\b(?=.*\\\u0431\u0440\u0435|\\\u0431\u0440\u0435\\.|\\\u0431\u0440\u0435\\s)[\u0430-\u0437\u0410-\u0417]+`"}, {"description": "lines that have 3 or more words containing the letters 'ly'.", "ground_truth": "(.*((\\b[A-Za-z]+\\b)&(.*ly.*)).*){3,}", "chatgpt_output": "`\\b\\w+\\s+(ly\\w+)\\s+\\1(?:\\s+\\w+\\s+|$)(?=(?:\\s+\\w+\\s+|\\Z)(?:\\2|(?:\\s+|\\Z))(?:\\s+\\w+\\s+|$)){2,}`"}, {"description": "lines with instances of 'ABC' between 'XYX' and a comma", "ground_truth": ".*XYX.*ABC.*\\,.*|.*\\,.*ABC.*XYX.*", "chatgpt_output": "`(?<=XYX)(.*?)ABC(?=,)`"}, {"description": "lines that have a word containing 'a' or 'b'", "ground_truth": ".*\\b([A-Za-z]+&.*(a|b).*)\\b.*", "chatgpt_output": "`/\\bw\\(a|b\\)\\w+\\/g`"}, {"description": "lines using the word 'of' or the word 'in'", "ground_truth": "(.*\\bof\\b.*)|(.*\\bin\\b.*)", "chatgpt_output": "`/\\b(in|of)\\b\\s.*(?:\\n|\\z)/g`"}, {"description": "lines containing two or more words containing 'y'.", "ground_truth": "(.*\\b[A-Za-z]*y[A-Za-z]*\\b.*){2,}", "chatgpt_output": "\\b\\w+(\\s+[wy]\\w+)*\\b(?=(\\.|\\n)(?!\\w))"}, {"description": "lines that contain at least one 'z'", "ground_truth": ".*z.*", "chatgpt_output": "`/z/.+/gm`"}, {"description": "lines that contain a word using the letters 'ire'", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(.*ire.*)).*", "chatgpt_output": "\\b\\w+ire\\w+\\b"}, {"description": "lines that have 'ser' after 'lin' or 'ku'.", "ground_truth": ".*(lin|ku).*ser.*", "chatgpt_output": "`(lin[aku])(?:[.\\n](?![ku])[^ser]*)*(ser)`"}, {"description": "lines that have three words comprised of 4 characters each.", "ground_truth": ".*(.*\\b[A-Za-z]{4}\\b.*){3}.*", "chatgpt_output": "`\\b\\w{4}\\s+\\w{4}\\s+\\w{4}\\s+\\w{4}\\b`"}, {"description": "lines ending in 'az'", "ground_truth": ".*az", "chatgpt_output": "`/\\A[^]\\Z|.[az]$/gm`"}, {"description": "lines which begin with the letter 'z'.", "ground_truth": "z.*", "chatgpt_output": "`^z`"}, {"description": "lines containing 'ku' after 'mar' or 'is'.", "ground_truth": ".*(mar|is).*ku.*", "chatgpt_output": "`(\\bmar|is\\s+)\\K.+ku`"}, {"description": "lines that contain 2 numbers and 3 words and contain the letter 't'.", "ground_truth": ".*(.*[0-9].*){2}&(.*\\b[A-Za-z]+\\b.*){3}&(.*t.*).*", "chatgpt_output": "\\b\\w+ \\w+ \\d+\\s+\\d+\\s+[a-z][^\\s]+\\s+[a-z][^\\s]+\\s+[a-z][^\\s]+\\s+\\d{2,}\\b(?=\\.|\\s+(?:(?:1[^\\.]\\d{3})|[1-9]\\d{3,}|[1-9][^\\.]\\d{2}[^\\.]\\d{2}|[1-9]\\d{4}|[1-9] [1-9][^\\.]\\d{3,}|[1-9]\\d{2}[^\\.]\\d{4}|[1-9]\\d{4}[^\\.]\\d{3,}|[1-9]\\d{3}[^\\.]\\d{4}|[1-9]\\d{4}[^\\.]\\d{4}|[1-9]\\d{5})\\)"}, {"description": "lines that include one word using at least 2 letters", "ground_truth": ".*\\b[A-Za-z]{2,}\\b.*", "chatgpt_output": "`\\w\\s+(?:\\w{2,}[^\\s]|[^\\s]\\w{1,}[^\\s]|\\b\\w{2,}\\b)\\s*`"}, {"description": "lines that have a capital 'A', but not a lowercase 'a'.", "ground_truth": "(.*A.*)&(~(.*a.*))", "chatgpt_output": "\\b[A-Z](\\w*)(?<![a-z])(?:\\r?\\n)"}, {"description": "lines that start with the letter 'e' followed by the word 'jr'.", "ground_truth": "e.*\\bjr\\b.*", "chatgpt_output": "^e\\w+jr"}, {"description": "lines containing 'b', or 'c'", "ground_truth": ".*(b|c).*", "chatgpt_output": "`/[bc]/g`"}, {"description": "lines that contain 'Beaker' but do not contain 'Bunsen'.", "ground_truth": "(.*Beaker.*)&(~(.*Bunsen.*))", "chatgpt_output": "`/\\bBeaker\\W!(?!Bunsen)./gm`"}, {"description": "lines where '4' is between '3' and '5'", "ground_truth": ".*3.*4.*5.*|.*5.*4.*3.*", "chatgpt_output": "`\\bis(3|[1-4]\\d)(?:\\.|$)[^\\n]+\\n\\bis(5)[^\\n\\n]\\n\\bis(4)[\\n.]`"}, {"description": "lines that contain a word in all uppercase.", "ground_truth": ".*\\b[A-Z]+\\b.*", "chatgpt_output": "\\b[A-Z]+\\b   # Matches words that consist only of uppercase letters."}, {"description": "lines which start with the word 'The'", "ground_truth": "\\bThe\\b.*", "chatgpt_output": "`^The\\s` (Thisregex matches lines starting with the word \"The\" followed by a whitespace character.)"}, {"description": "lines containing 3 or more vowels and 5 or more words", "ground_truth": "(.*[AEIOUaeiou].*){3,}&(.*\\b[A-Za-z]+\\b.*){5,}", "chatgpt_output": "`\\b([aeiou]{3,}[ \\w]*[aeiou]{3,}[ \\w]+( [aeiou]{3,}[ \\w]*){4,}\\b)`"}, {"description": "lines that contain words starting with 'bo'.", "ground_truth": ".*\\bbo[A-Za-z]*\\b.*", "chatgpt_output": "`\\bbo\\w*`"}, {"description": "6 letter lines", "ground_truth": "[A-Za-z]{6}", "chatgpt_output": "^.\\h{5}$ # This regex matches lines containing exactly six characters. \\h represents a horizontal whitespace character. The caret ^ at the beginning anchors the match to the start of the line, and the dollar sign $ at the end anchors the match to the end of the line. Thus, the regex matches exactly six-character-long lines."}, {"description": "lines with 'ock'", "ground_truth": ".*ock.*", "chatgpt_output": "`/ock/g`"}, {"description": "lines using a capital letter followed by a number", "ground_truth": ".*[A-Z].*[0-9].*", "chatgpt_output": "`[A-Z]\\d+`"}, {"description": "lines that start with 'ABC' and end with 'TRY'", "ground_truth": "ABC.*TRY", "chatgpt_output": "`^ABC.*TRY$`"}, {"description": "lines ending with 'cem'", "ground_truth": ".*cem", "chatgpt_output": "`/\\ban(?:.\\n*){0,}$cem/gm`"}, {"description": "lines that contain a number.", "ground_truth": ".*[0-9].*", "chatgpt_output": "`\\d+` # Matches one or more digits, making it a simple way to represent lines containing a number. This assumes a line is being matched in a multiline context, as the ^ and $ anchors are not used. If the regex is intended for a single line context, use ^(\\d+)$ instead."}, {"description": "lines that have words ending with a 'g'", "ground_truth": ".*((\\b.*g\\b)&([A-Za-z]+)).*", "chatgpt_output": "\\b\\w*(g)\\b"}, {"description": "lines that contain 2 repetitions of the word 'a'", "ground_truth": "(.*\\ba\\b.*){2}", "chatgpt_output": "`/\\ba(?=\\w*)a\\1\\b/g`"}, {"description": "lines that utilize words starting with 'ko'.", "ground_truth": ".*\\bko[A-Za-z]*\\b.*", "chatgpt_output": "`\\bko\\w*`"}, {"description": "lines that show the text '1:15' and the word 'midnight'.", "ground_truth": "(.*1:15.*)&(.*\\bmidnight\\b.*)", "chatgpt_output": "`/\\b1:15\\s+midnight\\b/g`"}, {"description": "lines that contain three or more digits", "ground_truth": "(.*[0-9].*){3}", "chatgpt_output": "`\\d{3,}`"}, {"description": "lines using 'ness' or 'ed'", "ground_truth": ".*(ness|ed).*", "chatgpt_output": "`/\\b(ness|ed)\\b/g`"}, {"description": "lines that are only comprised of uppercase letters.", "ground_truth": "[A-Z]*", "chatgpt_output": "^[A-Z]+$"}, {"description": "lines using 'lugg' before 'age'", "ground_truth": ".*lugg.*age.*", "chatgpt_output": "`/\\b(?=.*lugg).*(age)/g`"}, {"description": "lines with the word 'and' between 'zyx' and 'cba'", "ground_truth": ".*zyx.*\\band\\b.*cba.*|.*cba.*\\band\\b.*zyx.*", "chatgpt_output": "`/\\bzyx\\s+and\\s+cba\\b/g`"}, {"description": "lines containing the number 11 and the word 'eleven'.", "ground_truth": "(.*11.*)&(.*eleven.*)", "chatgpt_output": "`/11|\\bbeneleven\\b/g`"}, {"description": "lines that are composed of the letters 'a', 'b', and 'd'.", "ground_truth": "(a|b|d)*", "chatgpt_output": "`^[ead]+\\$`"}, {"description": "lines that mention 'Randy' and also contain 'fox'", "ground_truth": "(.*Randy.*)&(.*fox.*)", "chatgpt_output": "`/\\bRandy\\b.*fox\\./g`"}, {"description": "lines utilizing '!'", "ground_truth": ".*\\!.*", "chatgpt_output": "`/\\!/g` # Matches the '!' character literally in all occurrences per line."}, {"description": "lines that end with vowels.", "ground_truth": ".*[AEIOUaeiou]", "chatgpt_output": "`/[^.\\n]*[aeiou]$/g`"}, {"description": "lines that have 'ace' after 'pl' or 'tr'.", "ground_truth": ".*(pl|tr).*ace.*", "chatgpt_output": "`(/pl.[a-z]+ace|tr.[a-z]+ace)/g`"}, {"description": "lines starting with 'tra'", "ground_truth": "tra.*", "chatgpt_output": "`^tra.+$`"}, {"description": "lines containing one instance of 'ca' followed by an 'r' or a 't'", "ground_truth": ".*(.*ca.*(r|t).*).*", "chatgpt_output": "`/\\bc[aap]r?t\\b/g`"}, {"description": "lines where there are exactly two words and 7 characters.", "ground_truth": "((([^A-Za-z])*\\b[A-Za-z]+\\b([^A-Za-z])*){2}&.{7})", "chatgpt_output": "\\'\\w{2}\\s+\\w{7}\\'"}, {"description": "lines that have 3 words and two numbers.", "ground_truth": "(.*\\b[A-Za-z]+\\b.*){3}&(.*[0-9].*){2}", "chatgpt_output": "\\bus\\s+\\d+\\s+\\w+\\s+\\d+\\s+\\w+\\s+\\d+\\s+\\w+\\ze"}, {"description": "lines using words starting with 'fi'.", "ground_truth": ".*\\bfi[A-Za-z]*\\b.*", "chatgpt_output": "`\\bis api:\\s+(fi\\w+)\\s+`"}, {"description": "lines with 'buck'", "ground_truth": ".*buck.*", "chatgpt_output": "`/\\bbuck\\b/gm`"}, {"description": "lines containing words which begin with 'c' and end with 'd'", "ground_truth": ".*\\bc[A-Za-z]*d\\b.*", "chatgpt_output": "`\\bc[\uc544\uc774\uac00\ubcf8\ub2e4\uace0\ub2f9\uadfc\uc774]\\bd` (This assumes the words 'c' and 'd' are 'c' and 'd' in English alphabet)"}, {"description": "lines containg the number '9'.", "ground_truth": ".*9.*", "chatgpt_output": "\\d+9"}, {"description": "lines that utilize words starting with 'ni' followed by the word 'knight'", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(ni.*)).*\\bknight\\b.*", "chatgpt_output": "\\bni\\W+knight\\b"}, {"description": "lines which begin with 'y', has a 'z' in the middle and end in a number.", "ground_truth": "y.*z.*[0-9]", "chatgpt_output": "^y.+z.\\K\\d+$"}, {"description": "lines containing 'tal' and containing 'tel' too", "ground_truth": "(.*tal.*)&(.*tel.*)", "chatgpt_output": "/\\btal.*tel\\b/g"}, {"description": "lines that contain the 'staphyloccus aureus.'", "ground_truth": ".*staphyloccus aureus.*", "chatgpt_output": "`/staphyloccus\\s+aureus./g`"}, {"description": "lines that use 'Jane' but not 'Janet' or '2'.", "ground_truth": "(.*Jane.*)&(~(.*(Janet|2).*))", "chatgpt_output": "`\\bJane(?!=Janet|[2])\\[^\\n]*\\z`"}, {"description": "lines that contain words starting with 'go'.", "ground_truth": ".*\\bgo[A-Za-z]*\\b.*", "chatgpt_output": "\\bgo\\w*\\b(?=[\\s.]|$)"}, {"description": "lines that contain only 2 words, and, begin with the letter 'f'.", "ground_truth": "f.*&(([^A-Za-z])*\\b[A-Za-z]+\\b([^A-Za-z])*){2}", "chatgpt_output": "`^[\u0444\u0444][\\w ]+\\s+[\\w ]+$`"}, {"description": "lines containing only four words.", "ground_truth": "(([^A-Za-z])*\\b[A-Za-z]+\\b([^A-Za-z])*){4}", "chatgpt_output": "`\\s+\\w+\\s+\\w+\\s+\\w+\\s+` or `\\s+(\\w+\\s){3}\\w+\\s+`"}, {"description": "lines which do not contain 'excellent'", "ground_truth": "~(.*excellent.*)", "chatgpt_output": "`^(?!.*excellent).+\\r?$`"}, {"description": "lines that end with 'hey'", "ground_truth": ".*hey", "chatgpt_output": "`/$hey/$`"}, {"description": "lines that have no instances of 'old' but at least one instance of 'ion'.", "ground_truth": "(~(.*old.*))&((.*ion.*){1,})", "chatgpt_output": "`^(?!.*old).*ion.$`"}, {"description": "lines that utilize words starting with 'r'.", "ground_truth": ".*\\br[A-Za-z]*\\b.*", "chatgpt_output": "`\\br[ew]ard\\w*\\b` (This regex will match words starting with 'r' such as \"reward\" and \"rewarded\")"}, {"description": "lines using words that end with the letter 'n'", "ground_truth": ".*\\b[A-Za-z]*n\\b.*", "chatgpt_output": "\\b[a-z]*n\\b(?=(\\r\\n)|$)"}, {"description": "lines that use numbers.", "ground_truth": ".*[0-9].*", "chatgpt_output": "`\\d+`"}, {"description": "lines having words starting with 'fo'.", "ground_truth": ".*((\\b[A-Za-z][A-Za-z]*\\b)&(fo.*)).*", "chatgpt_output": "`\\bfo\\w+`"}, {"description": "lines using words that have 'ire'", "ground_truth": ".*\\b[A-Za-z]*ire[A-Za-z]*\\b.*", "chatgpt_output": "`\\bmere|fire|desire|adire|require|entire|ire|stire|quire|tire|spire|ireland\\b`"}, {"description": "lines that only have 3 words", "ground_truth": "(([^A-Za-z])*\\b[A-Za-z]+\\b([^A-Za-z])*){3}", "chatgpt_output": "`^[\\w\\s]+ [\\w\\s]+ [\\w\\s]+$`"}, {"description": "lines that contain words starting in 's'", "ground_truth": ".*((\\b[A-Za-z][A-Za-z]*\\b)&(s.*)).*", "chatgpt_output": "`/\\bs.[^\\s]+\\w/g`"}, {"description": "lines that contain text made up of more than 6 letters total.", "ground_truth": "(.*[A-Za-z].*){7,}", "chatgpt_output": "`.\\{-,6}[a-zA-Z]{7,}`"}, {"description": "lines that contain the letter 'a' in the middle of a word.", "ground_truth": ".*(\\b[A-Za-z]+a[A-Za-z]+\\b).*", "chatgpt_output": "\\b[^a]?a[^a]\\b"}, {"description": "lines where the letter 'b' appears exactly 4 times", "ground_truth": "([^b]*b[^b]*){4}", "chatgpt_output": "`/\\Bb{4}\\B/g` - This regular expression will match any occurrence of the letter \"b\" appearing exactly 4 times without being bounded by a word character (\\b) on either side. The \"g\" flag ensures that all matches are found across all lines in the input text."}, {"description": "lines that contain a word  starting with 'l'.", "ground_truth": ".*\\bl[A-Za-z]*\\b.*", "chatgpt_output": "`/(\\w+l\\w*).*/`"}, {"description": "lines that contain a word with five or more vowels.", "ground_truth": ".*((\\b[A-Za-z][A-Za-z]*\\b)&(.*[AEIOUaeiou].*){5}).*", "chatgpt_output": "`/.+[aeiou]{5,}.+/g`"}, {"description": "lines which do not begin with an uppercase letter.", "ground_truth": "~([A-Z].*)", "chatgpt_output": "`^[^A-Z].` or `^[a-z].` to match lines that do not begin with an uppercase letter. These regexes match any character that is not an uppercase letter at the beginning of a line."}, {"description": "lines which start with 'n' and end with 'y'", "ground_truth": "(n.*)&(.*y)", "chatgpt_output": "`^n.*y$`"}, {"description": "lines that contain at least two words beginging with 'y'.", "ground_truth": "(.*\\by[A-Za-z]*\\b.*){2}", "chatgpt_output": "\\b([\\w][wy]+\\s+[wy][\\w]+)\\b"}, {"description": "lines that have a word containing the string 'ude'", "ground_truth": ".*\\b[A-Za-z]*ude[A-Za-z]*\\b.*", "chatgpt_output": "\\b(?:[A-Za-z]+\\w*){1,}ude\\b"}, {"description": "lines having words with 'ro'.", "ground_truth": ".*\\b[A-Za-z]*ro[A-Za-z]*\\b.*", "chatgpt_output": "\\b(\\w+ro\\w+)\\b(?=[\\s.\\n]|$)"}, {"description": "lines using 4 or more words", "ground_truth": "(.*\\b[A-Za-z]+\\b.*){4,}", "chatgpt_output": "\\.\\h*((\\w+\\s)*\\1{3,})+"}, {"description": "lines using at least 4 'c'", "ground_truth": "(.*c.*){4,}", "chatgpt_output": "`^(.*{4}c{4,}).*\\n?$`"}, {"description": "lines starting with 'cl'", "ground_truth": "cl.*", "chatgpt_output": "`^cl.+$`"}, {"description": "lines that contain 'number' written in words.", "ground_truth": ".*number.*", "chatgpt_output": "\\b[A-Z]+her[e|eas|y] \\d+\\b"}, {"description": "lines that have at least 3 words.", "ground_truth": "(.*\\b[A-Za-z]+\\b.*){3}", "chatgpt_output": "\\.{3,\\s+[\\w\\s]+\\.{3,}\\s+[\\w\\s]+\\.{3,}/g"}, {"description": "lines which have 3 words.", "ground_truth": ".*(.*\\b[A-Za-z]+\\b.*){3}.*", "chatgpt_output": "\\.\\h+\\S+\\s+\\S+\\s+\\S+"}, {"description": "lines utilizing the phrase 'this is it'.", "ground_truth": ".*this is it.*", "chatgpt_output": "`/.*\rsthis is it.\\*/`"}, {"description": "lines that contain words starting with 'ba'.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(ba.*)).*", "chatgpt_output": "`\\\u0431\u0430\\w+\\s*(.|\\n)+`"}, {"description": "lines using the vowel combination 'ou' and 'th'.", "ground_truth": "(.*ou.*)&(.*th.*)", "chatgpt_output": "`/\\b(th|[ht]hou[bcdfghjklmnpqrstvwxyz])+\\b/g`"}, {"description": "lines which contain 'rh' but do not contain the letter 'y'.", "ground_truth": "(.*rh.*)&~(.*y.*)", "chatgpt_output": "`/rh,.!*[^y]/g`"}, {"description": "lines that have any instance of 'ight'.", "ground_truth": ".*ight.*", "chatgpt_output": "`/ight./` This regex will match any line that contains the substring 'ight'."}, {"description": "lines using the letter sequence 'ably' followed by a word ending in 'ed'.", "ground_truth": ".*ably.*\\b[A-Za-z]*ed\\b.*", "chatgpt_output": "`/.+ably\\s+\\w+ed/.g`"}, {"description": "lines having words ending with 'lo'.", "ground_truth": ".*\\b[A-Za-z]*lo\\b.*", "chatgpt_output": "\\b\\w*\\b(?![aeiou])\\h*lo$"}, {"description": "lines that feature 'c' or 'd' before words that start with capital letters.", "ground_truth": ".*(c|d).*\\b[A-Z][A-Za-z]*\\b.*", "chatgpt_output": "`\\bc[zd]\\w+`"}, {"description": "lines using 'foo' between 'car' and 'cop'", "ground_truth": ".*(car.*foo.*cop|cop.*foo.*car).*", "chatgpt_output": "`/\\bcar\\s+(foo)\\s+(\\w+) cop\\b/g`"}, {"description": "lines that list the word 'Bean'.", "ground_truth": ".*\\bBean\\b.*", "chatgpt_output": "`/\\bhay(?:\\s+bean\\b)|bean\\b/\\gm`"}, {"description": "lines which have at least one word which has six or more letters.", "ground_truth": ".*\\b[A-Za-z]{6,}\\b.*", "chatgpt_output": "`\\w{6,}+`"}, {"description": "lines containing vowels", "ground_truth": ".*[AEIOUaeiou].*", "chatgpt_output": "`/[aeiouAEIOU].+/g`"}, {"description": "lines starting with 'sign'", "ground_truth": "sign.*", "chatgpt_output": "`^sign[^\\n]$`"}, {"description": "lines that utilize words starting with 'ab'.", "ground_truth": ".*\\bab[A-Za-z]*\\b.*", "chatgpt_output": "`^(?=.\\Ab.\\w+).*$`"}, {"description": "lines that contain numbers.", "ground_truth": ".*[0-9].*", "chatgpt_output": "`\\d+` # Matches one or more digits, representing lines that contain numbers."}, {"description": "lines containing 4 words.", "ground_truth": "(.*\\b[A-Za-z]+\\b.*){4,}", "chatgpt_output": "`\\s+(\\w+\\s+\\w+\\s+\\w+\\s+\\w+)\\s+`"}, {"description": "lines that have three numbers between 'abc' and 'def'.", "ground_truth": ".*(abc.*(.*[0-9].*){3}.*def|.*def.*(.*[0-9].*){3}.*abc).*", "chatgpt_output": "`/\\balp[hj]abc\\s+(-\\d+)\\s+(-\\d+)\\s+(-\\d+)\\s+def\\./g`"}, {"description": "lines that use 'native' and 'tribes'.", "ground_truth": "(.*native.*)&(.*tribes.*)", "chatgpt_output": "`/\\bnnative\\s+tribes\\b/g`"}, {"description": "lines that does not contain any vowels.", "ground_truth": "~(.*[AEIOUaeiou].*)", "chatgpt_output": "\\B[^aeiouAEIOU]\\B"}, {"description": "lines that have 5 or more words of 3 or fewer letters.", "ground_truth": "(.*\\b[A-Za-z]{1,3}\\b.*){5,}", "chatgpt_output": "`\\b\\w{3,}\\s{1,}\\1{4,}\\b`"}, {"description": "lines that contain a '?' or an '!'.", "ground_truth": "(.*\\?.*)|(.*!.*)", "chatgpt_output": "`/.\\?(|\\!)/`"}, {"description": "lines that begin with a number", "ground_truth": "[0-9].*", "chatgpt_output": "`^[0-9]\\d*(?:\\.[0-9]*)?(?:[^\\n]*)?$`"}, {"description": "lines that contain at least 2 digits.", "ground_truth": "(.*[0-9].*){2,}", "chatgpt_output": "`^.\\S{2,}$`"}, {"description": "lines that use a numerical number.", "ground_truth": ".*[0-9].*", "chatgpt_output": "`\\d+`"}, {"description": "lines that contain words using 'ie'", "ground_truth": ".*\\b[A-Za-z]*ie[A-Za-z]*\\b.*", "chatgpt_output": "`/\\bie\\w*\\bw\\w*/g`"}, {"description": "lines that contain 'fast' and contain '2'", "ground_truth": "(.*fast.*)&(.*2.*)", "chatgpt_output": "`/line:\\s*(?:.*fast.*\\.(?!line\\s*(?!:)|$)(?=.*\\d{1}2)/gm/`"}, {"description": "lines where there is only one word.", "ground_truth": "[^A-Za-z]*\\b[A-Za-z]+\\b[^A-Za-z]*", "chatgpt_output": "`\\s+(\\w+)` or `\\s+\\S+`"}, {"description": "lines containing only a letter", "ground_truth": "[A-Za-z]", "chatgpt_output": "`^[a-z]\\n$` or `^[[:alpha:]]\\n$`"}, {"description": "lines containing the word 'country'", "ground_truth": ".*\\bcountry\\b.*", "chatgpt_output": "`/\\bcountry\\b/gm`"}, {"description": "lines that have words containing 'ei'", "ground_truth": ".*\\b[A-Za-z]*ei[A-Za-z]*\\b.*", "chatgpt_output": "`\\b(?![aeioudi])[a-e]ie[a-e]{0,3}\\b`"}, {"description": "lines that contain words ending in 'os'", "ground_truth": ".*\\b[A-Za-z]*os\\b.*", "chatgpt_output": "`\\b\\w*(?:os)\\b`"}, {"description": "lines that have words ending in 'ing'.", "ground_truth": ".*\\b[A-Za-z]*ing\\b.*", "chatgpt_output": "`\\bn[^ \\n]+ing\\b`"}, {"description": "lines that include both 'cake' and 'candles'.", "ground_truth": "(.*cake.*)&(.*candles.*)", "chatgpt_output": "`\\bcake\\s+ candidates?\\. candles\\b`"}, {"description": "lines using 1 number and 2 letters", "ground_truth": ".*(.*[0-9].*)&(.*[A-Za-z].*){2}.*", "chatgpt_output": "\\d{1}[a-zA-Z]{2}"}, {"description": "lines using five letter words.", "ground_truth": ".*\\b[A-Za-z]{5}\\b.*", "chatgpt_output": "\\b\\w{5}\\b(?=\\s+|\\Z)"}, {"description": "lines containing 'sing' or 'sung'", "ground_truth": ".*(sing|sung).*", "chatgpt_output": "`/sing|sung/\\n/g`"}, {"description": "lines using 6 instances of 'fu'", "ground_truth": ".*(.*fu.*){6}.*", "chatgpt_output": "`.\\*.{6}fu.{6}fu.{6}fu.{6}fu.{6}fu.{6}`"}, {"description": "lines that have at least 6 characters", "ground_truth": ".{6,}", "chatgpt_output": "^.(.{6,}).*$"}, {"description": "lines that have six letter words ending in 'th'.", "ground_truth": ".*\\b[A-Za-z]{4}th\\b.*", "chatgpt_output": "`\\bt\\.{5}th\\b`"}, {"description": "lines containing the word 'pray' at the end.", "ground_truth": ".*\\bpray", "chatgpt_output": "\\b(?=.*pray)$"}, {"description": "lines that contain 5 numbers and 2 words that contain 'ly'.", "ground_truth": ".*(.*[0-9].*){5}&(.*\\b[A-Za-z]*ly[A-Za-z]*\\b.*){2}.*", "chatgpt_output": "\\b\\w+\\d+\\s+\\d+\\s+\\d+\\s+\\d+\\s+\\w+(?:[[:\u00e1l:]]ly|[[:\u00e1l:]]ly)[^.\\n]*\\b(?:\\s+\\w+(?:[[:\u00e1l:]]ly|[[:\u00e1l:]]ly)[^.\\n]*\\b){1,2}[.\\n]"}, {"description": "lines that utilize only three words", "ground_truth": "(([^A-Za-z])*\\b[A-Za-z]+\\b([^A-Za-z])*){3}", "chatgpt_output": "\\bis\\s([A-Za-z]+)\\s([A-Za-z]+)\\s([A-Za-z]+)\\b(?=\\.|\\n)"}, {"description": "lines using 'Bill' or 'bill'", "ground_truth": ".*(B|b)ill.*", "chatgpt_output": "`/Bill|bill/gi`"}, {"description": "lines that have no vowels.", "ground_truth": "~(.*[AEIOUaeiou].*)", "chatgpt_output": "\\A[_Isycuf.\\]\\-]+(?:[^aeiouAEIOU]{0,}$)[EOL]"}, {"description": "lines that have a number in them", "ground_truth": ".*[0-9].*", "chatgpt_output": "`/\\d+/g` # Match one or more digits (g flag enables global search, matching all occurrences in each line)"}, {"description": "lines that contain 7 or more words", "ground_truth": "(.*\\b[A-Za-z]+\\b.*){7}", "chatgpt_output": "\\.{1,}[\\s\\S]\\h+\\S+\\h+\\S+\\h+\\S+\\h+\\S+\\h+\\S+\\h+\\S+"}, {"description": "lines using words starting with 'be'.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(be.*)).*", "chatgpt_output": "`\\b(be\\.)?\\w+\\b`"}, {"description": "lines that use words ending with 'at'.", "ground_truth": ".*\\b[A-Za-z]*at\\b.*", "chatgpt_output": "\\b[^.]+\\b(?![aeiou])\\bis[^ ]+at\\b"}, {"description": "lines which mention 'Pat' with the word 'turkey'.", "ground_truth": ".*(.*Pat.*)&(.*\\bturkey\\b.*).*", "chatgpt_output": "`/\\bPat\\s+Turkey\\b/g`"}, {"description": "lines that have a number, but only if it is followed by 'ABC'", "ground_truth": ".*[0-9].*ABC.*", "chatgpt_output": "`\\d+\\s+ABC`"}, {"description": "lines that contain two words that have two letters.", "ground_truth": "(.*\\b[A-Za-z]{2}\\b.*){2}", "chatgpt_output": "\\b\\w{2}\\s+\\w{2}\\b"}, {"description": "lines that end in 'y' and begins in 'a'.", "ground_truth": "a.*y", "chatgpt_output": "`^a[^\\n]+\\ny$`"}, {"description": "lines that match to the text 'I went into'.", "ground_truth": ".*I went into.*", "chatgpt_output": "`^I\\s+went\\s+into\\.$`"}, {"description": "lines which end with 'hula'", "ground_truth": ".*hula", "chatgpt_output": "`/hula$/`"}, {"description": "lines that begins with the word 'total'.", "ground_truth": "total\\b.*", "chatgpt_output": "`^total\\s`"}, {"description": "lines using the word 'God'.", "ground_truth": ".*(.*\\bGod\\b.*).*", "chatgpt_output": "`/\\bGod\\b/g` (This regular expression matches the word 'God' anywhere in a line, case insensitive, including at the beginning or end of a line, using word boundaries `\\b` to ensure the match is a whole word.)"}, {"description": "lines that utilize words starting with 'bu'.", "ground_truth": ".*(([A-Za-z]+)&(\\bbu.*\\b)).*", "chatgpt_output": "`\\bbu\\w*`"}, {"description": "lines that contain 'Freddie Mercury' and contain 'AIDS'.", "ground_truth": "(.*Freddie Mercury.*)&(.*AIDS.*)", "chatgpt_output": "`/Freddie Mercury.\\sAIDS/g`"}, {"description": "lines that are composed of 5 words or less where at least one word begins with the letter 'k'.", "ground_truth": "(([^A-Za-z]*\\b[A-Za-z]+\\b[^A-Za-z]*){0,5})&(.*\\bk[A-Za-z]*\\b.*)", "chatgpt_output": "^(\\w+\\s+\\w+)\\s+(\\w+[kw]\\w+)[^\\s]+\\s+(\\w+\\s*\\w+)(?:\\s+\\w+|\\s*$){0,3}$ # This regex should match lines with five or fewer words, where at least one word starts with the letter 'k'."}, {"description": "lines that contain three words that start with the letter 'Y'.", "ground_truth": "(.*\\bY[A-Za-z]*\\b.*){3}", "chatgpt_output": "\\b\\w(?![aeiou])[wy]\\.\\w+(?:[[:blank:]]+\\w+(?![aeiou])[wy].)\\{2\\}"}, {"description": "lines that contain a 3 letter word and a 2 letter word.", "ground_truth": ".*(.*\\b[A-Za-z]{3}\\b.*)&(.*\\b[A-Za-z]{2}\\b.*).*", "chatgpt_output": "\\b\\w{3}\\s+\\w{2}\\b"}, {"description": "lines that contain a word starting with 'a' and ending with 'a'", "ground_truth": ".*\\ba([A-Za-z]*a)?\\b.*", "chatgpt_output": "`\\ba[a]\\w*a\\b`"}, {"description": "lines that start with words containing 'w'.", "ground_truth": "\\b[A-Za-z]*w[A-Za-z]*\\b.*", "chatgpt_output": "^[wm]\\.+\\s*([^\\s]|[^\\S])*(w\\w+)[^\\S]*(?:\\r?\\n|$)"}, {"description": "lines that use the number '33'.", "ground_truth": ".*33.*", "chatgpt_output": "`\\d+(?:\\.\\d+)?\\s*(33)\\s*(?:\\d+\\.?|$)*`"}, {"description": "lines which start with 'alpha'", "ground_truth": "alpha.*", "chatgpt_output": "^alpha.\\*$ // Matches lines that start with 'alpha' followed by any number of characters."}, {"description": "lines that have only two words in them.", "ground_truth": "(([^A-Za-z])*\\b[A-Za-z]+\\b([^A-Za-z])*){2}", "chatgpt_output": "`^[\\\\s]*[a-zA-Z0-9]+[\\\\s]*[a-zA-Z0-9]+$`"}, {"description": "lines that contain 4 or more 'b'", "ground_truth": "(.*b.*){4}", "chatgpt_output": "`/\u0431{4,}/` (for this description, assume the input is in a Unicode context)"}, {"description": "lines containing words using the letters 'ers'.", "ground_truth": ".*\\b[A-Za-z]*ers[A-Za-z]*\\b.*", "chatgpt_output": "`\\b[wrs][ers]\\w+\\b`"}, {"description": "lines which have instances of 'tch'.", "ground_truth": ".*tch.*", "chatgpt_output": "`/tch/g`"}, {"description": "lines using the string 'gue'", "ground_truth": ".*gue.*", "chatgpt_output": "`/\\bgue\\b/g`"}, {"description": "lines that have 'aba' between 'bcb' and 'cbc'", "ground_truth": ".*bcb.*aba.*cbc.*|.*cbc.*aba.*bcb.*", "chatgpt_output": "`(?:bcb)(\\s.*?(aba)\\s.*?)(?:cbc)`"}, {"description": "lines containing the country name 'New Zealand'.", "ground_truth": ".*New Zealand.*", "chatgpt_output": "`/\\bNew Zealand\\b/gm`"}, {"description": "lines which contain both 'i' and 'e' but no instances of 'u'.", "ground_truth": "(.*i.*)&(.*e.*)&(~(.*u.*))", "chatgpt_output": "`/[\\bcaptuei\\](?![\\bcagu]|[bxuv]\\))[\\be]/g`"}, {"description": "lines that contain a number and contain a 3 letter word.", "ground_truth": "(.*\\b[A-Za-z]{3}\\b.*)&(.*[0-9].*)", "chatgpt_output": "\\bil[A-Z][A-Z2]\\d+\\b # This regular expression matches lines that contain a word consisting of two uppercase letters followed by a digit or a number containing at least one digit."}, {"description": "lines which start with 'start'", "ground_truth": "start.*", "chatgpt_output": "^start"}, {"description": "lines using 'ox' before 'en'", "ground_truth": ".*ox.*en.*", "chatgpt_output": "`/\\\u0431\u043ex.* enf/\\g`"}, {"description": "lines containing 'l' before 'y'", "ground_truth": ".*l.*y.*", "chatgpt_output": "`/\\by[^]\\nl\\ny/g`"}, {"description": "lines that begin with 'a' and end with 'z'", "ground_truth": "a.*z", "chatgpt_output": "^a.*z$"}, {"description": "lines containing 'lake' and containing the word 'house'", "ground_truth": ".*lake.*&(.*\\bhouse\\b.*)", "chatgpt_output": "/(?=.*lake).*(?=.*house)/g"}, {"description": "lines using 5 or more words.", "ground_truth": "(.*\\b[A-Za-z]+\\b.*){5}", "chatgpt_output": "`\\.{4,\\+\\d}[-\\s]+\\S+[-\\s]\\S+[-\\s]\\S+[-\\s]\\S+[-\\s]\\S+`"}, {"description": "lines that contain words with at least 3 vowels", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(.*[AEIOUaeiou].*){3}).*", "chatgpt_output": "`\\b(?=.*[aeiou]{3,}\\w*)\\b`"}, {"description": "lines that have 'eak' after 'red'", "ground_truth": ".*red.*eak.*", "chatgpt_output": "`/\\bresd.*eak\\./g`"}, {"description": "lines containing the word 'preordained'.", "ground_truth": ".*\\bpreordained\\b.*", "chatgpt_output": "`/\\bpreordained\\b/g`"}, {"description": "lines that feature the word 'moot', and at least 3 words of 6 letters or more.", "ground_truth": "(.*\\bmoot\\b.*)&(.*\\b[A-Za-z]{6,}\\b.*){3,}", "chatgpt_output": "\\bmoot\\W+((\\w{6}\\s){3}).+"}, {"description": "lines using 2 instances of 'irl'", "ground_truth": ".*(.*irl.*){2}.*", "chatgpt_output": "`\\bilr\\.\\w+\\kbilr\\.`"}, {"description": "lines that contain 4 or more capital letters", "ground_truth": ".*(.*[A-Z].*){4}.*", "chatgpt_output": "\\b[A-Z]{4,}\\b"}, {"description": "lines that end with 'after'", "ground_truth": ".*after", "chatgpt_output": "`/$after$/m`"}, {"description": "lines that contain four letter words.", "ground_truth": ".*\\b[A-Za-z]{4}\\b.*", "chatgpt_output": "\\b\\w{4}\\b"}, {"description": "lines that start with 'iffl'", "ground_truth": "iffl.*", "chatgpt_output": "`^iffl`"}, {"description": "lines that contain 'on'", "ground_truth": ".*on.*", "chatgpt_output": "/on/.+/gm"}, {"description": "lines that begin with a number and end with 'street' or 'avenue'.", "ground_truth": "[0-9].*(street|avenue)", "chatgpt_output": "`^[0-9]+(?: [a-zA-Z]+\\s*){3,}street|avenue$`"}, {"description": "lines with vowels", "ground_truth": ".*[AEIOUaeioui].*", "chatgpt_output": "`.\\w*\\.([aeiouAEIOU]{1,}[.\\w]*)`"}, {"description": "lines using 'lives', 'lifes', or 'life'", "ground_truth": ".*li(ves|fes|fe).*", "chatgpt_output": "`/\\bis(t|tests?|lives|lifes|life)\\b/gi`"}, {"description": "lines that contain the text 'then I said'.", "ground_truth": ".*then I said.*", "chatgpt_output": "/then I said./"}, {"description": "lines that contain the word 'movie' in them.", "ground_truth": ".*\\bmovie\\b.*", "chatgpt_output": "/\\bmovie\\b/g"}, {"description": "lines that have less than 6 words but more than 3 words.", "ground_truth": "([^A-Za-z]*\\b[A-Za-z]+\\b[^A-Za-z]*){0,5}&(.*\\b[A-Za-z]+\\b.*){4,}", "chatgpt_output": "\\.{3,}[^ \\.]* \\S+ {1,4} \\S+"}, {"description": "lines using at least 2 instances of 'ly'", "ground_truth": "(.*ly.*){2,}", "chatgpt_output": "`\\b(\\w+[\\w\\s]+\\b[aly]\\1[aly]\\b)[.\\?]\\s+`"}, {"description": "lines containing words that start with 'fa'", "ground_truth": ".*\\bfa[A-Za-z]*\\b.*", "chatgpt_output": "`/\\bfa[a-z]*\\w+\\b/g`"}, {"description": "lines containing 'GHF', but not 'JFK'", "ground_truth": "(.*GHF.*)&(~(.*JFK.*))", "chatgpt_output": "`/GHF(?!JFK)/g`"}, {"description": "lines which have words beginning with 'H'.", "ground_truth": ".*\\bH[A-Za-z]*\\b.*", "chatgpt_output": "`^H\\w+`"}, {"description": "lines where there is at least one word in which 'e' follows 'i'", "ground_truth": ".*((\\b[A-Za-z][A-Za-z]*\\b)&(.*i.*e.*)).*", "chatgpt_output": "`\\b(?=[\\w']+i[\\w']{1,}e[\\w']*|\\bor ie\\b)[^.\\n]*[\\w']+[.\\n]`"}, {"description": "lines having words ending with 'te'.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(.*te)).*", "chatgpt_output": "\\b[^\\w]+\\w{0,augh-before-te}\\b(?![^\\w]|\\z)\u0442\u0435\\b"}, {"description": "lines that contain words that end in 'y' that do not begin with 'w'", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(.*y)&(~(w.*))).*", "chatgpt_output": "`\\bm[^w]*y\\b(?![^ \\n]*(?:\\w[FW]))`"}, {"description": "lines that contain 5 or more words.", "ground_truth": ".*(.*\\b[A-Za-z][A-Za-z]*\\b.*){5}.*", "chatgpt_output": "\\.{1,}(\\s+\\w+){5,}\\.?"}, {"description": "lines that contain words ending in 'az'", "ground_truth": ".*\\b[A-Za-z]*az\\b.*", "chatgpt_output": "`\\b\\w*(?:[az]\\z|\\w*[az]$)\\b`"}, {"description": "lines that contain any numbers.", "ground_truth": ".*[0-9].*", "chatgpt_output": "`/\\d+/g`"}, {"description": "lines utilizing the number '1'.", "ground_truth": ".*1.*", "chatgpt_output": "\\d+\\.1\\d*>|1\\.0\\d*\\b"}, {"description": "lines that use the word 'white'", "ground_truth": ".*\\bwhite\\b.*", "chatgpt_output": "\\bwhite\\b(?=[\\s.\\n])+"}, {"description": "lines which do not have numbers.", "ground_truth": "~(.*[0-9].*)", "chatgpt_output": "`^[^0-9]\\$.*` or `^[^0-9]*$` should match lines that do not have numbers in them. The first pattern requires a non-number character at the beginning of the line, while the second pattern allows for any number of non-number characters at the end of the line."}, {"description": "lines that end with numbers.", "ground_truth": ".*[0-9]", "chatgpt_output": "`/\\A[^\"\\r\\n]*[0-9]$/gm`"}, {"description": "lines containing words that  have 5 letters in them.", "ground_truth": ".*\\b[A-Za-z]{5}\\b.*", "chatgpt_output": "\\b\\w{5}\\b(?=[\\s.\\n]).+"}, {"description": "lines with instances of 'at'.", "ground_truth": ".*at.*", "chatgpt_output": "`./\\bat\\./g` This regex pattern will match the literal substring \"at\" in each line. The \"\\b\" makes sure that the match occurs at a word boundary, ensuring that \"at\" is not matched as part of another word. The \"/g\" flag is used to perform a global search, so all instances on a line are matched."}, {"description": "lines which contain 'x' and 'y'.", "ground_truth": "(.*x.*)&(.*y.*)", "chatgpt_output": "/\\MX(?:[^xy]\\*xy|xy[^mx]\\*mx)[^mx]\\*/gm"}, {"description": "lines that do not use the word 'the'", "ground_truth": "~(.*\\bthe\\b.*)", "chatgpt_output": "`^(?!.*\\sthe\\s)[^\\n]+`"}, {"description": "lines that contain either of 'y' or 'z'", "ground_truth": ".*(y|z).*", "chatgpt_output": "`/[ Wyz]/`"}, {"description": "lines using three letter words.", "ground_truth": ".*\\b[A-Za-z]{3}\\b.*", "chatgpt_output": "\\b\\w{3}\\b(?=[\\n\\r])"}, {"description": "lines containing the word 'laughing'.", "ground_truth": ".*\\blaughing\\b.*", "chatgpt_output": "`/laughing/\\n/g`"}, {"description": "lines containing the word 'trade'.", "ground_truth": ".*\\btrade\\b.*", "chatgpt_output": "`/\\btrade\\b/\\gm`"}, {"description": "lines where the word 'and' appears between the words 'sand' and 'tide'", "ground_truth": ".*\\bsand\\b.*\\band\\b.*\\btide\\b.*|.*\\btide\\b.*\\band\\b.*\\bsand\\b.*", "chatgpt_output": "\\bsand\\s+and\\s+tide\\b"}, {"description": "lines with numbers", "ground_truth": ".*[0-9].*", "chatgpt_output": "`\\d+\\R`"}, {"description": "lines that contain a period after a number, but only if before 'ABC'.", "ground_truth": ".*[0-9].*\\..*ABC.*", "chatgpt_output": "`\\d+\\.\\s+ABC`"}, {"description": "lines that contain at least 2 vowels in a word.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(.*[AEIOUaeiou].*){2}).*", "chatgpt_output": "`\\b[\\waeiou]{2,}[\\w]*\\b`"}, {"description": "lines that have two words containing 5 or more letters.", "ground_truth": "(.*\\b[A-Za-z]{5,}\\b.*){2}", "chatgpt_output": "`\\b\\w{5,\\}\\s+\\w{5,}\\b`"}, {"description": "lines using 'life' or 'lives'", "ground_truth": ".*(life|lives).*", "chatgpt_output": "`/.\\*life(?:es)?.*/\\ ` or `/life|lives/.*/` (The first one is case-insensitive and matches whole lines, the second one matches any substring containing 'life' or 'lives' with or without case sensitivity.)"}, {"description": "lines that have 4 characters", "ground_truth": ".{4}", "chatgpt_output": "`^.{4}$`"}, {"description": "lines that end in '!' but do not contain 'surprise'.", "ground_truth": "(.*\\!)&(~(.*surprise.*))", "chatgpt_output": "`^(?!.*surprise).*!$`"}, {"description": "lines with three numbers and the word 'kitten'.", "ground_truth": "(.*[0-9].*){3}&(.*\\bkitten\\b.*).*", "chatgpt_output": "`^(\\d+\\s){3}kitten`"}, {"description": "lines that have no letters.", "ground_truth": "~(.*[A-Za-z].*)", "chatgpt_output": "^[\\ ARISING*\\W]+$ # Matches lines that consist only of non-letter characters."}, {"description": "lines using 'art' or 'led'", "ground_truth": ".*(art|led).*", "chatgpt_output": "`/(art|led)/g`"}, {"description": "lines containing the word 'house'.", "ground_truth": ".*\\bhouse\\b.*", "chatgpt_output": "\\bhouse\\b"}, {"description": "lines that utilize the number '7'.", "ground_truth": ".*7.*", "chatgpt_output": "`.\\d+7.\\d+`"}, {"description": "lines using 3 instances of 'b'", "ground_truth": ".*(.*b.*){3}.*", "chatgpt_output": "`.{0,}bbb.{0,}`"}, {"description": "lines that include words with 'ra'.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(.*ra.*)).*", "chatgpt_output": "\\b\\w*ra\\w*\\b(?=\\s+|$)"}, {"description": "lines having words ending with 'oo'.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(.*oo)).*", "chatgpt_output": "`\\b\\w*oo\\b`"}, {"description": "lines that contain 3 words.", "ground_truth": "(.*\\b[A-Za-z]+\\b.*){3}", "chatgpt_output": "\\.\\.\\.\\s+\\w+\\s+\\w+\\s+\\w+"}, {"description": "lines using 7 'f'", "ground_truth": "(.*f.*){7}", "chatgpt_output": "`.\\{7\\}f{7}` or `(.{7}){7}f{7}` will match any string that contains exactly 7 occurrences of the letter 'f' with any character before each occurrence. The first regular expression is more concise and uses a single lookup for the character class, while the second regular expression uses a capture group for each sequence of 7 characters in front of the 'f' to ensure they can be any character, not limited to only one specific character."}, {"description": "lines that contain the word 'bar'", "ground_truth": ".*\\bbar\\b.*", "chatgpt_output": "`/\\bbar\\b/g`"}, {"description": "lines that contain 'wig' after 'er' or 'let'.", "ground_truth": ".*(er|let).*wig.*", "chatgpt_output": "`(?=[eler])\\s+wig`"}, {"description": "lines that contain words using the letters 'ant'", "ground_truth": ".*\\b[A-Za-z]*ant[A-Za-z]*\\b.*", "chatgpt_output": "\\b\\w*ant\\w*\\b (This regex pattern matches words that contain the letters \"ant\" in them, while \\b ensures that only complete words are matched.)"}, {"description": "lines that ends with 'ABC' and contain two numbers.", "ground_truth": "(.*[0-9].*){2}ABC", "chatgpt_output": "`^([0-9]+)[^\\n]+\\s+[0-9]+$`"}, {"description": "lines containing only one word", "ground_truth": "([^A-Za-z])*\\b[A-Za-z]+\\b([^A-Za-z])*", "chatgpt_output": "`^[a-zA-Z]+$( [\\r\\n]*(?![^\\n])\\1)*$`"}, {"description": "lines that contain the text, 'New York'.", "ground_truth": ".*New York.*", "chatgpt_output": "`/\\bNew York\\b/gm`"}, {"description": "lines using the word 'hurry' followed by the word 'up'.", "ground_truth": "(.*\\bhurry\\b.*)(.*\\bup\\b.*)", "chatgpt_output": "`/\\bhurry\\s+(up|UP)\\b/g`"}, {"description": "lines which do have numbers.", "ground_truth": ".*[0-9].*", "chatgpt_output": "`/\\d/g` - This regular expression searches for any digit character (`\\d`) on every line (`g`). So, it matches any line that contains at least one digit."}, {"description": "lines that utilize the '$' symbol.", "ground_truth": ".*(.*\\$.*)", "chatgpt_output": "\\$\\$|.\\$"}, {"description": "lines where there are three characters between instances of 'ABC' and 'WEX'", "ground_truth": ".*ABC.*.{3}.*WEX.*|.*WEX.*.{3}.*ABC.*", "chatgpt_output": "\\bABC.\\{3\\}WEX\\b"}, {"description": "lines containing 'oo' and 'at'.", "ground_truth": "(.*oo.*)&(.*at.*)", "chatgpt_output": "`/oo.\\\ufffdt/g`"}, {"description": "lines that have more than 5 words ending with a 'c.'", "ground_truth": "(.*\\b[A-Za-z]*c\\b.*){6,}", "chatgpt_output": "\\b\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+(\\.\\w+){1,}$ # Matches lines with exactly six words, where the last word ends with 'c.' followed by any character."}, {"description": "lines containing 'left' and also containing 'right'", "ground_truth": "(.*left.*)&(.*right.*)", "chatgpt_output": "`/left.+\\right/g`"}, {"description": "lines that contain 'dre' or 'ber'", "ground_truth": ".*(dre|ber).*", "chatgpt_output": "`/dre|ber/g`"}, {"description": "lines using a 3 letter sequence starting with 'n'", "ground_truth": ".*n[A-Za-z]{2}.*", "chatgpt_output": "`\\bn[a\u00f1]\rs+`"}, {"description": "lines that start with the letter 'c'", "ground_truth": "c.*", "chatgpt_output": "`^C`"}, {"description": "lines with 'un'", "ground_truth": ".*un.*", "chatgpt_output": "`/un/.+/gm`"}, {"description": "lines that have 'oe'.", "ground_truth": ".*oe.*", "chatgpt_output": "`/oe/g`"}, {"description": "lines that do not contain a number.", "ground_truth": "~(.*[0-9].*)", "chatgpt_output": "^[^0-9.$]\\*$"}, {"description": "lines containing 'ch' or 'dh'", "ground_truth": ".*(ch|dh).*", "chatgpt_output": "`/ch|dh/g`"}, {"description": "lines that contain 'tran' and the word 'nguyen'.", "ground_truth": "(.*tran.*)&(.*\\bnguyen\\b.*)", "chatgpt_output": "`/\\btran\\s+\\w+nguyen\\b/g`"}, {"description": "lines containing '8' and containing a '3' as well.", "ground_truth": ".*(.*8.*)&(.*3.*).*", "chatgpt_output": "`/\\d+(\\s+8\\s+3\\s+|8\\s+3\\s+)\\d+/g`"}, {"description": "lines that have the letter 'X' at the end of a word.", "ground_truth": ".*\\b[A-Za-z]*X\\b.*", "chatgpt_output": "\\b[a-zA-Z]*X"}, {"description": "lines using at least 4 characters", "ground_truth": ".*.{4}.*", "chatgpt_output": "`.\\{4,}\\n`"}, {"description": "lines that have the word 'laugh', and at least 1 number.", "ground_truth": "(.*\\blaugh\\b.*)&(.*[0-9].*)", "chatgpt_output": "\\blaugh\\w+(?:\\s+\\d+)+"}, {"description": "lines that contain the words 'the' and  'cold'.", "ground_truth": "(.*\\bthe\\b.*)&(.*\\bcold\\b.*)", "chatgpt_output": "`/\\bthe\\s+cold\\b/g`"}, {"description": "lines using 'pid' immediately after 'stu'", "ground_truth": ".*stupid.*", "chatgpt_output": "`/\\bstu[\\s\\S]+pid\\b/gm`"}, {"description": "lines that start with 'news'", "ground_truth": "news.*", "chatgpt_output": "`^news`"}, {"description": "lines in which there are words that begin with 'th'.", "ground_truth": ".*\\bth[A-Za-z]*\\b.*", "chatgpt_output": "\\bth\\w+\\b(?=\\\\s+|\\Z)"}, {"description": "lines that begin with the word 'Topo'.", "ground_truth": "\\bTopo\\b.*", "chatgpt_output": "`^Topo\\.`"}, {"description": "lines that contain words using aught in them.", "ground_truth": ".*(.*\\b[A-Za-z]*aught[A-Za-z]*\\b.*).*", "chatgpt_output": "`\\btaught\\w+\\b`"}, {"description": "lines that use 'mo' followed by words starting with 'fo'", "ground_truth": ".*mo.*((\\b[A-Za-z]+\\b)&(fo.*)).*", "chatgpt_output": "`/\\bc mo \\w+ fo\\b/g`"}, {"description": "lines utilizing the number '2'.", "ground_truth": ".*2.*", "chatgpt_output": "`\\d+\\n(2\\d*|\\d*\\n(?:2\\d*)+)\\d*`"}, {"description": "lines that contain at least one vowel in each word.", "ground_truth": "~(.*((\\b[A-Za-z]+\\b)&([^AEIOUaeiou]*)).*)", "chatgpt_output": "`^(?!.*[^aeiou][^aeiou]$)[^.\\n]*[aeiou][^aeiou][^aeiou][^aeiou]\\K[aeiou][bwqgjklmnpqrstvwxyz]*$`"}, {"description": "lines ending with 'fer'", "ground_truth": ".*fer", "chatgpt_output": "`/$ [\\w\\s]+fer$/gm`"}, {"description": "lines composed of at least 3 words of 4 or more letters", "ground_truth": "(.*\\b[A-Za-z]{4,}\\b.*){3,}", "chatgpt_output": "\\\u0431\\w{4,}\\s+\\w{4,}\\s+\\w{4,}\\b(?=(\\.|\\n))+"}, {"description": "lines that have at least five words that start with a vowel.", "ground_truth": "(.*\\b[AEIOUaeiou][A-Za-z]*\\b.*){5}", "chatgpt_output": "`^((\\w+ [aeiou]\\w+)( [\\w][aeiou]\\w+){4,}\\b)[.!?]$`"}, {"description": "lines that use the '@' symbol", "ground_truth": ".*\\@.*", "chatgpt_output": "`/\\@\\w+/g`"}, {"description": "lines that have three words of five letters each.", "ground_truth": "(.*\\b[A-Za-z]{5}\\b.*){3}", "chatgpt_output": "\\bis\\.{4} [\\w\\s]{5}\\1 [\\w\\s]{5}\\1 [\\w\\s]{5}\\1"}, {"description": "lines that begin with the word 'the'.", "ground_truth": "the\\b.*", "chatgpt_output": "`^the\\s`"}, {"description": "lines of 6 characters that end with the letter 's'.", "ground_truth": ".{5}s", "chatgpt_output": "`^.\\{5\\}s$`"}, {"description": "lines that contain the word 'tron' but not 'bot'.", "ground_truth": "(.*tron.*)&(~(.*bot.*))", "chatgpt_output": "`/\\btron(\\W)*(?!\\b bot)\\b/g`"}, {"description": "lines that have 'efg' followed by the word 'car'", "ground_truth": ".*efg.*\\bcar\\b.*", "chatgpt_output": "`/\\befg\\s+car/g`"}, {"description": "lines that contain words starting with the letter 'g'", "ground_truth": ".*\\bg[A-Za-z]*\\b.*", "chatgpt_output": "`\\bg[a-z]+`"}, {"description": "lines that contain 5 or less words that have 4 or more letters where one of those letters is an 'a'.", "ground_truth": "([^A-Za-z]*((\\b[A-Za-z]+\\b)&([A-Za-z]{4,})&(.*a.*))[^A-Za-z]*){0,5}", "chatgpt_output": "`\\b\\w{4,}[a-z]\\w{0,3}\\s+\\w{4,}[a-z]\\w{0,3}\\s+(?:\\w{4,}[a-z]\\w{0,3}\\s+){0,3}\\r?`"}, {"description": "lines that contain words starting with 'da'.", "ground_truth": ".*\\bda[A-Za-z]*\\b.*", "chatgpt_output": "`^.*\\bda\\w*\\b`"}, {"description": "lines that have the numbers '12345' and '54321'.", "ground_truth": "(.*12345.*)&(.*54321.*)", "chatgpt_output": "^(?=.*12345).*(?=.*54321)$"}, {"description": "lines that have words that start with 'b'.", "ground_truth": ".*\\bb[A-Za-z]*\\b.*", "chatgpt_output": "`\\b[b]\\w*\\b`"}, {"description": "lines that contain at least one word without any vowels.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(~(.*[AEIOUaeiou].*))).*", "chatgpt_output": "`\\w+( [^aeiouAEIOU]:.*\\1)+`"}, {"description": "2 letter lines", "ground_truth": "[A-Za-z]{2}", "chatgpt_output": "`^.[._-]??[.]?[a-z]{1}[.]?[a-z][.$](?-ms)`"}, {"description": "lines using words that end with a vowel.", "ground_truth": ".*\\b[A-Za-z]*[aeiouAEIOU]\\b.*", "chatgpt_output": "`\\b[aeiou]+$`"}, {"description": "lines that have words ending with 'as'.", "ground_truth": ".*((\\b.*as\\b)&([A-Za-z]+)).*", "chatgpt_output": "\\b[^-][^\\.']+as\\b"}, {"description": "lines using at least 5 characters", "ground_truth": ".*.{5}.*", "chatgpt_output": "`.\\{5,}\\n`"}, {"description": "lines where numbers exist only after a sequence of 'ABC' and 'XYZ'", "ground_truth": "([^0-9]*)|((([^0-9]*)&(.*ABC.*)&(.*XYZ.*)).*)", "chatgpt_output": "`(?<=(ABC)(?'num'[ \\t]+\\K\\d+))|(?<=(XYZ)(?'num'[ \\t]+\\K\\d+))\\1*$`"}, {"description": "lines with 'bit' and not 'ch'.", "ground_truth": "(.*bit.*)&(~(.*ch.*))", "chatgpt_output": "`/.+bit.(?!ch)./g`"}, {"description": "lines which have 'ing' and 'out' but not 'sh' or 'cl'.", "ground_truth": "((.*ing.*)&(.*out.*)&(~(.*(sh|cl).*)))", "chatgpt_output": "`\\b(?![shcl])\\w+ing\\W+out\\b`"}, {"description": "lines that start with 'A' or An", "ground_truth": "A.*|An.*", "chatgpt_output": "`^A|An`"}, {"description": "lines using more than 5 characters", "ground_truth": ".*.{6,}.*", "chatgpt_output": "`.\\{6,}` or `.\\{5,}\\.$` for matching lines that contain 6 or more characters. The first one matches any 6 or more characters in a line, while the second one matches any 5 or more characters followed by the end of the line, which effectively matches lines with more than 5 characters."}, {"description": "lines which contain multiple quoted words.", "ground_truth": "(.*\\'[A-Za-z]+\\'.*){2,}", "chatgpt_output": "`/\\bis(?:[^\\\"]+|[\\\"][^\\\"]*\\1)[^\\s\"]+[\\s\"]*\\1[^\\s\"]+(?![^\"]*(([^\\\"]|$)))/g`"}, {"description": "lines that contain the word 'Kelly' but do not contain the word 'Chris'.", "ground_truth": "(.*\\bKelly\\b.*)&(~(.*\\bChris\\b.*))", "chatgpt_output": "`/Kelly(?! \\.? Chris)/g`"}, {"description": "lines that only contain vowels.", "ground_truth": "[AEIOUaeiou]*", "chatgpt_output": "^[aeiouAEIOU]*$"}, {"description": "lines that have words ending in 'ing' or 'est'.", "ground_truth": ".*\\b[A-Za-z]*(ing|est)\\b.*", "chatgpt_output": "`/\\b\\w*(ing|est)\\b/g`"}, {"description": "lines with 'Quasi' as a stand alone word.", "ground_truth": ".*\\bQuasi\\b.*", "chatgpt_output": "`\\bQuasi\\b`"}, {"description": "lines containing the word 'tag'.", "ground_truth": ".*\\btag\\b.*", "chatgpt_output": "\\btag\\b(?://.|\\n)+"}, {"description": "lines containing both letters and numbers, but no capitals.", "ground_truth": "(.*[A-Za-z].*)&(.*[0-9].*)&(~(.*[A-Z].*))", "chatgpt_output": "`^[a-z]\\w*\\d\\w*$`"}, {"description": "lines using at least two numbers, 'aby', and 'oz'.", "ground_truth": "(.*[0-9].*){2}&(.*aby.*)&(.*oz.*)", "chatgpt_output": "`/\\bal \u0412\u043b\u0430\u0434\u0430(?: \\d+)?:? \\d+ (aby)|(aby) \\1 oz(?: \\d+)?\\b/g`"}, {"description": "lines that utilize the number '1'", "ground_truth": ".*1.*", "chatgpt_output": "`\\d equals 1` or `\\d = 1` or `\\d(?: = |\\,|$){0,1}1`"}, {"description": "lines containing the letter 'z' but not the letter 'q'.", "ground_truth": "(.*z.*)&(~(.*q.*))", "chatgpt_output": "`/[z](?:(?:[^q])|$)/g`"}, {"description": "lines containing 3 letter words starting with 'z'", "ground_truth": ".*\\bz[A-Za-z]{2}\\b.*", "chatgpt_output": "`\\bw Zw\\w{1,2}\\b`"}, {"description": "lines using a word starting with a vowel and ending with 'y'", "ground_truth": ".*\\b[AEIOUaeiou][A-Za-z]*y\\b.*", "chatgpt_output": "`\\b[aeiou]\\w*y\\b`"}, {"description": "lines that use words ending in 'g'", "ground_truth": ".*((.*g)&(\\b[A-Za-z][A-Za-z]*\\b)).*", "chatgpt_output": "`\\b[^-][-\\w']+g\\b`"}, {"description": "lines with words matching the word 'fur'.", "ground_truth": ".*\\bfur\\b.*", "chatgpt_output": "`\\w+ fur \\w+`"}, {"description": "lines that start with 'an'", "ground_truth": "an.*", "chatgpt_output": "`^an`"}, {"description": "lines utilizing words with 'be'.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(.*be.*)).*", "chatgpt_output": "`/\\bbe\\s+(am|is|are|was|were|been|being)\\b/g`"}, {"description": "lines in which all words start with the letter 'a'.", "ground_truth": "~(.*((\\b[A-Za-z]+\\b)&([^a].*)).*)", "chatgpt_output": "^(<[^>]*>*\\s)*\\p{L}as{1,}w{1,}[^.]*\\h+\\p{L}as{1,}w{1,}[^.]*\\h+(?:\\p{L}as{1,}w{1,}[^.]*\\h+)*$(?=^(?!\\S).)*(?=.*\\.\\1{3,}$)"}, {"description": "lines that begin with a vowel and end with a vowel", "ground_truth": "[aeiouAEIOU](.*[aeiouAEIOU])?", "chatgpt_output": "`^[aeiouAEIOU].*[aeiouAEIOU]$`"}, {"description": "lines that contain words starting with 'na'.", "ground_truth": ".*\\bna[A-Za-z]*\\b.*", "chatgpt_output": "`\\bnas[a-z]*\\w+`"}, {"description": "lines that mention 'fireflies' but not 'butterflies'.", "ground_truth": "(.*fireflies.*)&(~(.*butterflies.*))", "chatgpt_output": "\\b(?!.*butterflies).*fireflies\\b"}, {"description": "lines having the letter 'x'.", "ground_truth": ".*x.*", "chatgpt_output": "`.+x`"}, {"description": "lines which contain 'q' and 'u'", "ground_truth": ".*q.*u.*|.*u.*q.*", "chatgpt_output": "`/q.*u./g` # This will match any line that contains the substring 'qu' in it. The dot (.) represents any character, the asterisk (*) means zero or more of the preceding character, and the g at the end signifies a global search (matching all occurrences in the input instead of stopping after the first match)."}, {"description": "lines using 'ly' or 'ny'", "ground_truth": ".*(ly|ny).*", "chatgpt_output": "`\\b(?=[\\w']+[ly]|[ny][\\w']+)\\b`"}, {"description": "lines that start with 'Transport One' and end in a number.", "ground_truth": "Transport One.*[0-9]", "chatgpt_output": "^Transport One\\d$"}, {"description": "lines that end with '...'", "ground_truth": ".*\\.\\.\\.", "chatgpt_output": "`/\\.{'3}$/g`"}, {"description": "lines containing 3 or more ';'", "ground_truth": "(.*;.*){3,}", "chatgpt_output": "`^.+?;{3,}$`"}, {"description": "lines that contain 'I' in each word.", "ground_truth": "~(.*((\\b[A-Za-z]+\\b)&([^I]*)).*)", "chatgpt_output": "\\bi[W+]{1,}I\\b"}, {"description": "lines that contain the phrase 'bedrock' or 'yabadabadoo'.", "ground_truth": ".*(bedrock|yabadabadoo).*", "chatgpt_output": "/(bedrock|yabadabadoo)/g"}, {"description": "lines that contain words starting with 'ge'.", "ground_truth": ".*\\bge[A-Za-z]*\\b.*", "chatgpt_output": "`/\\bg\u0435[a-z]*\\w./g`"}, {"description": "lines containing words that end with s.", "ground_truth": ".*\\b[A-Za-z]*s\\b.*", "chatgpt_output": "\\b\\w+\\bs"}, {"description": "lines using words which have a vowel.", "ground_truth": ".*\\b[A-Za-z]*[aeiouAEIOU][A-Za-z]*\\b.*", "chatgpt_output": "`\\w+( [aeiou][\\w']+ )+`"}, {"description": "lines using 'an' before 'imal'", "ground_truth": ".*an.*imal.*", "chatgpt_output": "`\\bmamal\\b(?= [^:\\.]* [a-z] an [i-m]imal)`"}, {"description": "lines that contain 'if' before 'then' or 'else'.", "ground_truth": ".*if.*(then|else).*", "chatgpt_output": "`/\\bis if.*(then|else)\\}/gm`"}, {"description": "lines using words that begin with the letter 'G'.", "ground_truth": ".*\\bG[A-Za-z]*\\b.*", "chatgpt_output": "`\\bg[a-z]+\\b(?=(\\n|$))`"}, {"description": "lines containing words ending with 'mie'.", "ground_truth": ".*\\b[A-Za-z]*mie\\b.*", "chatgpt_output": "`\\b[^.]+\\bmkie\\b`"}, {"description": "lines that start with 'gates'", "ground_truth": "gates.*", "chatgpt_output": "`^gates`"}, {"description": "lines composed of 3 or more characters", "ground_truth": ".*.{3,}.*", "chatgpt_output": "`.{3,}$`"}, {"description": "lines that start with 'Al' but do not contain any numbers.", "ground_truth": "(Al.*)&(~(.*[0-9].*))", "chatgpt_output": "^Al[^0-9]*$"}, {"description": "lines using words ending in 'ness'", "ground_truth": ".*\\b[A-Za-z]*ness\\b.*", "chatgpt_output": "`\\b\\w*\\b(?=\\s+[\\w']+ness)\\b`"}, {"description": "lines with words that end with 'ca' before words that end with 'att'", "ground_truth": ".*\\b[A-Za-z]*ca\\b.*\\b[A-Za-z]*att\\b.*", "chatgpt_output": "\\b(\\w+ca)\\s+\\1\\K\\h*(?:(?!\\1)\\w+att)\\b"}, {"description": "lines that contain words with 'ci'.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(.*ci.*)).*", "chatgpt_output": "`/\\bc\u0438\\w*/g`"}, {"description": "lines containing words ending in 're'", "ground_truth": ".*\\b[A-Za-z]*re\\b.*", "chatgpt_output": "`\\bmere\\w*`"}, {"description": "lines that use only four words", "ground_truth": "(([^A-Za-z])*\\b[A-Za-z]+\\b([^A-Za-z])*){4}", "chatgpt_output": "`^.\\s+[a-zA-Z]+[\\s.]+\\1\\s+[a-zA-Z]+$`"}, {"description": "lines ending with the letter 'f'", "ground_truth": ".*f", "chatgpt_output": "`/$[\\NF]$/m`"}, {"description": "lines that end in 't'", "ground_truth": ".*t", "chatgpt_output": "`/$[\\nice DCHECK]t$/gm`"}, {"description": "lines that start with the letter 't'.", "ground_truth": "t.*", "chatgpt_output": "^t .* $"}, {"description": "lines containing a 5 letter word beginning with 't'", "ground_truth": ".*\\bt[A-Za-z]{4}\\b.*", "chatgpt_output": "`/t\\w{4}/g`"}, {"description": "lines ending with 'uns'", "ground_truth": ".*uns", "chatgpt_output": "`/$[\\w]+uns$/g`"}, {"description": "lines ending with 'end'", "ground_truth": ".*end", "chatgpt_output": "`/\\nend$/`"}, {"description": "lines that contain 'day' or 'to'", "ground_truth": ".*(day|to).*", "chatgpt_output": "`/\\b(day|to)\\b/g`"}, {"description": "lines that contain at least one word and the number '12'", "ground_truth": ".*(.*\\b[A-Za-z]+\\b.*)&(.*12.*).*", "chatgpt_output": "`\\w+ \\d{2} [12]\\d+`"}, {"description": "lines ending with 'wrench' that use the word 'monkey'.", "ground_truth": ".*\\bmonkey\\b.*wrench", "chatgpt_output": "`/(\\w.*monkey\\s+)*$wrench/gm`"}, {"description": "lines that contain at least one digit.", "ground_truth": ".*[0-9].*", "chatgpt_output": "`.\\\u0434\u043d\u0430\u011bl\u0434+`"}, {"description": "lines starting and ending with 'a'", "ground_truth": "a(.*a)?", "chatgpt_output": "`^a.*.a$`"}, {"description": "lines that have 'car'", "ground_truth": ".*car.*", "chatgpt_output": "`/\\bcar\\b/g`"}, {"description": "lines of words whose last letters are 'ing'.", "ground_truth": ".*\\b[A-Za-z]*ing\\b.*", "chatgpt_output": "\\b\\w+(?:\\.|\\h)[^-][^-]$inging"}, {"description": "lines beginning with the letter 's' and ending with the letter 'y'", "ground_truth": "s.*y", "chatgpt_output": "^s.[^y]*\\y $ # This regex pattern matches lines that begin with 's' and end with 'y'. The first caret ^ represents the start of the line, s matches the letter 's', [^y]* Matches any character except 'y' repeated zero or more times, and \\y matches the position where the 'y' appears as a word boundary. The dollar sign $ ensures the match ends at the end of the line."}, {"description": "lines that use words ending with 'es'.", "ground_truth": ".*\\b[A-Za-z]*es\\b.*", "chatgpt_output": "\\b[^.]*\\bes\\b(?=(?:\\n|$))"}, {"description": "lines that have 3 characters after the first vowel", "ground_truth": ".*[AEIOUaeiou].*(.{3}).*", "chatgpt_output": "`[^aeiou]{1}[aeiou][^aeiou]{2}`"}, {"description": "lines ending in 'z' preceded by a word that ends in 'nt'", "ground_truth": ".*\\b[A-Za-z]*nt\\b.*z", "chatgpt_output": "\\b\\w+nt\\.$|z\\b"}, {"description": "lines using the word 'day' followed by the letters 'abc'", "ground_truth": ".*\\bday\\b.*abc.*", "chatgpt_output": "`/\\bday\\w*\\.?[.]?[ \\t]+\\w*abc\\w*\\}/gm`"}, {"description": "lines that contain words starting with 'gu'.", "ground_truth": ".*\\bgu[A-Za-z]*\\b.*", "chatgpt_output": "`\\bgu\\w*\\b`"}, {"description": "lines that have the word 'pray'.", "ground_truth": ".*\\bpray\\b.*", "chatgpt_output": "`/\\bpray\\b/g`"}, {"description": "lines that contain words between 'I' and 'you'", "ground_truth": ".*I.*\\b[A-Za-z]+\\b.*you.*|.*you.*\\b[A-Za-z]+\\b.*I.*", "chatgpt_output": "`/\\bI\\s[^Yy]\\S+you\\b/g`"}, {"description": "lines that contain 3 words with at least 1 number in between the 1st and 3rd word.", "ground_truth": "[^A-Za-z]*\\b[A-Za-z]+\\b((.*\\b[A-Za-z]+\\b.*)&(.*[0-9].*))\\b[A-Za-z]+\\b[^A-Za-z]*", "chatgpt_output": "`\\b\\w+\\d+\\w+\\s+\\w+\\d+\\w+\\b`"}, {"description": "lines containing the text 'and so it came to pass'", "ground_truth": ".*and so it came to pass.*", "chatgpt_output": "`/and so it came to pass/\\.*/mg`"}, {"description": "lines with 'helper' where the word 'little' does not appear before 'helper' in that line.", "ground_truth": "(.*helper.*)&(~(.*\\blittle\\b.*helper.*))", "chatgpt_output": "`^(?!.* little).*helper`"}, {"description": "lines that have a word ending with the letters 'ked'.", "ground_truth": ".*\\b[A-Za-z]*ked\\b.*", "chatgpt_output": "\\b[^ ]+ked\\b"}, {"description": "lines that each begin with a vowel", "ground_truth": "[AEIOUaeiou].*", "chatgpt_output": "`^[aeiouAEIOU].*`"}, {"description": "lines ending in 'fuzz'", "ground_truth": ".*fuzz", "chatgpt_output": "`/\\.fuzz$/`"}, {"description": "lines using 6 'e'", "ground_truth": "(.*e.*){6}", "chatgpt_output": "`.{5 [ae]{6}.{5}}`"}, {"description": "lines that contain words starting with a vowel and ending with a vowel.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&([AEIOUaeiou].*)&(.*[AEIOUaeiou])).*", "chatgpt_output": "`\\bw[aeiou]\\w*(?=\\s|$)[aeiou]\\w*\\b`"}, {"description": "lines that contain words using 'oo' in them.", "ground_truth": ".*\\b[A-Za-z]*oo[A-Za-z]*\\b.*", "chatgpt_output": "\\b\\w*oo\\w*\\b (This regex looks for words that contain the substring \"oo\" in them, with word boundaries to ensure matching only complete words.)"}, {"description": "lines which contain 'out'", "ground_truth": ".*out.*", "chatgpt_output": "`/out/gm`"}, {"description": "lines using words ending with 'tu'.", "ground_truth": ".*\\b[A-Za-z]*tu\\b.*", "chatgpt_output": "\\b[^.]*(tu)\\b(?=(\\.|\\Z))"}, {"description": "lines having 'sh' after 'wi' and 'st' before 'ar'.", "ground_truth": ".*((.*wi.*sh.*)&(.*st.*ar.*)).*", "chatgpt_output": "`\\bw\u00ed[sha-z]+\\bst\\w+ar`"}, {"description": "lines that start with the word 'The'", "ground_truth": "The\\b.*", "chatgpt_output": "`^The\\s`"}, {"description": "lines that contain more than five words.", "ground_truth": "(.*\\b[A-Za-z]+\\b.*){6,}", "chatgpt_output": "\\.{5,+\\s}[\\w\\s]+\\.{5,}"}, {"description": "lines that do not contain the letter 'c'.", "ground_truth": "~(.*c.*)", "chatgpt_output": "^([^c]*.)$"}, {"description": "lines starting with 'the'", "ground_truth": "the.*", "chatgpt_output": "^the.\\s*$ -- matches lines starting with the word 'the' followed by any number of whitespace characters."}, {"description": "lines that contain words ending with a vowel.", "ground_truth": ".*\\b[A-Za-z]*[AEIOUaeiou]\\b.*", "chatgpt_output": "\\b[aeiou]\\w*\\b"}, {"description": "lines that contain at least one word which is 8 characters or longer", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(.{8,})).*", "chatgpt_output": "\\.+ \\S{8,}"}, {"description": "lines that contain words ending with 'el'.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(.*el)).*", "chatgpt_output": "`\\b[^-][^\\.]*el\\b`"}, {"description": "lines containing words that end with 'P'", "ground_truth": ".*((\\b.*P\\b)&([A-Za-z]+)).*.*", "chatgpt_output": "\\b\\w*(P)\\b"}, {"description": "lines using a word which has uppercase letters and has lowercase letters", "ground_truth": ".*\\b(([A-Za-z]*[A-Z][A-Za-z]*)&([A-Za-z]*[a-z][A-Za-z]*))\\b.*", "chatgpt_output": "`\\bm[a-z]+[A-Z][a-z]*\\b`"}, {"description": "lines that contain words with 're'.", "ground_truth": ".*\\b[A-Za-z]*re[A-Za-z]*\\b.*", "chatgpt_output": "`/\\bre\\w+\\b/g`"}, {"description": "lines that start with the letter 'a' and end with the letter 'c'", "ground_truth": "a.*c", "chatgpt_output": "`^a.[^]\\n$`"}, {"description": "lines that have three characters before the sequence 'SBC'", "ground_truth": ".*.{3}SBC.*", "chatgpt_output": "^.\\{3\\}SBC"}, {"description": "lines using the letter pair 'no'", "ground_truth": ".*no.*", "chatgpt_output": "`\\bnO\\bm`"}, {"description": "lines containing 3 or more vowels.", "ground_truth": "(.*[AEIOUaeiou].*){3,}", "chatgpt_output": "`^(?=.{1,2}[aeiou]{3,}).+$`"}, {"description": "lines which contain a word using 2 or more letters", "ground_truth": ".*\\b[A-Za-z]{2,}\\b.*", "chatgpt_output": "`\\b\\w{2,}\\b`"}, {"description": "lines that contain 'er' at the end of every word.", "ground_truth": "~(.*((\\b[A-Za-z]+\\b)&(~(.*er))).*)", "chatgpt_output": "\\b[^aeiou]er\\b"}, {"description": "lines using 4 instances of 'ug'", "ground_truth": ".*(.*ug.*){4}.*", "chatgpt_output": "`/.{1}ug.{1}ug.{1}ug.{1}ug/.g`"}, {"description": "lines that do not have 'the' in them", "ground_truth": "~(.*the.*)", "chatgpt_output": "`^(?!.*the).*$`"}, {"description": "lines containing at least one uppercase letter, and at least one lowercase letter", "ground_truth": "(.*[A-Z].*)&(.*[a-z].*)", "chatgpt_output": "`^[a-z]+[A-Z]+[a-z]+` or `.+[a-z]\\1[A-Z][a-z]+`"}, {"description": "lines that contain the phrase 'Wednesday' but not 'Sunday'.", "ground_truth": "(.*Wednesday.*)&(~(.*Sunday.*))", "chatgpt_output": "\\bWednesday\\b(?!\\s+(?:Sun|Sunday))"}, {"description": "lines containing the word 'revolution'.", "ground_truth": ".*\\brevolution\\b.*", "chatgpt_output": "'\\brevolution\\b'"}, {"description": "lines ending with 'xyz'", "ground_truth": ".*xyz", "chatgpt_output": "`/$CHANTEXYZ/m`"}, {"description": "lines that contain a nine letter word.", "ground_truth": ".*\\b[A-Za-z]{9}\\b.*", "chatgpt_output": "`\\b\\w{9}\\b`"}, {"description": "lines with fox that do not contain the word chicken.", "ground_truth": "(.*fox.*)&(~(.*\\bchicken\\b.*))", "chatgpt_output": "`/line.*fox(?! \\Wchicken)/gm`"}, {"description": "lines utilizing words ending with 'fe'.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(.*fe)).*", "chatgpt_output": "`/\\.fe$/gm` to match words ending with 'fe' in lines, case insensitive (gm flag)."}, {"description": "lines that do not have any word consisting of 4 letters.", "ground_truth": "~(.*\\b[A-Za-z]{4}\\b.*)", "chatgpt_output": "`^(?!.*\\b\\w{4}\\b).+$`"}, {"description": "lines which start with 'oocl'", "ground_truth": "oocl.*", "chatgpt_output": "`^oocl`"}, {"description": "lines that do not contain numerical characters.", "ground_truth": "~(.*[0-9].*)", "chatgpt_output": "`^[^0-9]*$`"}, {"description": "lines using 'gophers' and containing the words 'grass' and 'seeds'.", "ground_truth": "(.*gophers.*)&(.*\\bgrass\\b.*)&(.*\\bseeds\\b.*)", "chatgpt_output": "`/\\bgophers\\W+grass\\W+seeds\\]/g`"}, {"description": "lines containing 'annou' and 'irth' that do not have a 'c' anywhere.", "ground_truth": "(.*annou.*)&(.*irth.*)&(~(.*c.*))", "chatgpt_output": "`/\\banou[^c]ith\\b/g`"}, {"description": "lines using 'x' before 'z'", "ground_truth": ".*x.*z.*", "chatgpt_output": "`(?s)x\\{1,\\}z`"}, {"description": "lines beginning with the letter 'f'", "ground_truth": "f.*", "chatgpt_output": "`^f`"}, {"description": "4 letter lines", "ground_truth": "[A-Za-z]{4}", "chatgpt_output": "`^.\\h{3}$`"}, {"description": "lines using numbers that show two or more '0'.", "ground_truth": ".*(.*0.*){2,}.*", "chatgpt_output": "`/\\d+\\d+(\\.\\d+)?((\\s+|\\n)[0]{2,}[0-9]*){1,}/g`"}]