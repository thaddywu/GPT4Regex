[{"description": "lines which do not contain the letter 'e'.", "ground_truth": "~(.*e.*)", "chatgpt_output": "^[^e.]*$"}, {"description": "lines that contain only the letters 'agde'.", "ground_truth": "agde", "chatgpt_output": "^.[a-g-d-e].{0,3}[a-g-d-e]$"}, {"description": "lines using words  ending in 'er'.", "ground_truth": ".*\\b[A-Za-z]*er\\b.*", "chatgpt_output": "^.[^.]*erek$"}, {"description": "lines which contain only lowercase letters.", "ground_truth": "[a-z]*", "chatgpt_output": "^[a-z]+$"}, {"description": "lines that contain the word 'dance'", "ground_truth": ".*\\bdance\\b.*", "chatgpt_output": "/\\bdance\\b/g"}, {"description": "lines with words that contain 3 vowels.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(.*[AEIOUaeiou].*){3}).*", "chatgpt_output": "/(.+)[aeiou]{3}[aeiou].+/g"}, {"description": "lines which have 'bar'", "ground_truth": ".*bar.*", "chatgpt_output": "^.(*.)*bar.*(.*){$"}, {"description": "lines using a word that ends in 'spoon'", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(.*spoon)).*", "chatgpt_output": "^.*\\bspoon\\b"}, {"description": "lines that include three capital letters", "ground_truth": "(.*[A-Z].*){3}", "chatgpt_output": "^(.*[A-Z]{3}[A-Z]{3}[A-Z]{3}.*)"}, {"description": "lines using words that begin with 'z'.", "ground_truth": ".*\\bz[A-Za-z]*\\b.*", "chatgpt_output": "^([a-z]{1}z[a-z\\s]*).*$"}, {"description": "lines that have at least 5 numbers.", "ground_truth": "(.*[0-9].*){5,}", "chatgpt_output": "^(.{0,4}\\d)[0-9]{5}(.\\w*)$"}, {"description": "lines that ends with letter 'f'", "ground_truth": ".*f", "chatgpt_output": "^.+\\ Alf$"}, {"description": "lines using a word that contains the letters 'der'", "ground_truth": ".*\\b[A-Za-z]*der[A-Za-z]*\\b.*", "chatgpt_output": "^.*)der(.*)$"}, {"description": "lines using only three words", "ground_truth": "(([^A-Za-z])*\\b[A-Za-z]+\\b([^A-Za-z])*){3}", "chatgpt_output": "^[\\s\\S]+\\s+[^\\s]+\\s+[^\\s]+\\s+[^\\s]+\\s+$ # Matches lines containing exactly three words separated by whitespace"}, {"description": "lines starting with 'uu' followed by words starting with 'z'.", "ground_truth": "uu.*\\bz[A-Za-z]*\\b.*", "chatgpt_output": "^uu[a-z][a-z]*"}, {"description": "lines that have 2 words using 4 letters", "ground_truth": "(.*\\b[A-Za-z]{4}\\b.*){2}", "chatgpt_output": "^.\\s+( [a-z]{4}[a-z]{4}[a-z]{4}[a-z]{4}\\s+ ){2}.*$"}, {"description": "lines that have words ending in 'ing'", "ground_truth": ".*\\b[A-Za-z]*ing\\b.*", "chatgpt_output": "^.[^.]*\\bing$"}, {"description": "lines which contain the word 'black' and the letter 'z'.", "ground_truth": "(.*\\bblack\\b.*)&(.*z.*)", "chatgpt_output": "^.*black[^\\.]\\.z.*$"}, {"description": "lines that contain the number '254' at least twice.", "ground_truth": "(.*254.*){2}", "chatgpt_output": "/(.+)(254)[^254]*(254)[^254]*(254)./g"}, {"description": "lines containing the word 'art'", "ground_truth": ".*\\bart\\b.*", "chatgpt_output": "^.$*\\s*(art)\\s*.*$"}, {"description": "lines with a word ending in 'aought' that contain only one word", "ground_truth": "([^A-Za-z])*\\b[A-Za-z]*aought\\b([^A-Za-z])*", "chatgpt_output": "\\b[^ ]+ght\\b"}, {"description": "lines which contain only an uppercase letter", "ground_truth": "[A-Z]", "chatgpt_output": "^[A-Z]+$"}, {"description": "lines that contain at least one numeric in it.", "ground_truth": ".*[0-9].*", "chatgpt_output": "^(.*[0-9].*).*$"}, {"description": "lines that end in an 'o'", "ground_truth": ".*o", "chatgpt_output": "/.\\atura$/gm"}, {"description": "lines that have all the letters 'a' , 'b' and 'c'", "ground_truth": "(.*a.*)&(.*b.*)&(.*c.*)", "chatgpt_output": "^.[abc].*[abc]$"}, {"description": "lines having words ending with 'ne'.", "ground_truth": ".*\\b[A-Za-z]*ne\\b.*", "chatgpt_output": "^.[^.]*(ne)$"}, {"description": "lines that contain 'World War II' and contain 'casualties'.", "ground_truth": "(.*World War II.*)&(.*casualties.*)", "chatgpt_output": "^(.*World War II.*casualties).*$"}, {"description": "lines that contain the numbers '9', and '10'", "ground_truth": ".*(9.*10|10.*9).*", "chatgpt_output": "^(.*[910].*).*$"}, {"description": "lines with the word 'Triple' followed by words that start with 'X'", "ground_truth": ".*\\bTriple\\b.*\\bX[A-Za-z]*\\b.*", "chatgpt_output": "^(.*\\ Triple\\W+[Xx]\\w+.*)$"}, {"description": "lines using 'su' after 'son' or 'soon'.", "ground_truth": ".*(son|soon).*su.*", "chatgpt_output": "~\\bson\\s*(?:[sS]oon|[a-z]*[uU][.:])?\\s+su\\b"}, {"description": "lines that utilize words starting with 'do'.", "ground_truth": ".*(([A-Za-z]+)&(\\bdo.*\\b)).*", "chatgpt_output": "^(?=.*\\bwdo\\w).*$"}, {"description": "lines using 'q' before 'r'", "ground_truth": ".*q.*r.*", "chatgpt_output": "^.(q)[^r.]*(r).$"}, {"description": "lines containing a word using the letters 'tt'.", "ground_truth": ".*\\b[A-Za-z]*tt[A-Za-z]*\\b.*", "chatgpt_output": "/\\bttt\\w*\\b/g"}, {"description": "lines using more than 1 character", "ground_truth": ".*.{2,}.*", "chatgpt_output": "^.\\>{1,}$"}, {"description": "lines that contain words with 'ru'.", "ground_truth": ".*\\b[A-Za-z]*ru[A-Za-z]*\\b.*", "chatgpt_output": "^.*\\w+ru\\w.*$"}, {"description": "lines containing a word using 'ause'", "ground_truth": ".*\\b[A-Za-z]*ause[A-Za-z]*\\b.*", "chatgpt_output": "^.[^.]*(ause)[.]?.*$"}, {"description": "lines containing instances of 'JFK' found after 'ABC'", "ground_truth": ".*ABC.*JFK.*", "chatgpt_output": "/(ABC).*\\s+(JFK)"}, {"description": "lines that contain at least three words and at least one number.", "ground_truth": "(.*\\b[A-Za-z][A-Za-z]*\\b.*){3}&(.*[0-9].*)", "chatgpt_output": "\\.{1,}(\\w[\\w\\s]+\\d\\w[\\w\\s]+\\d\\w[\\w\\s]+\\d.[^.]*)"}, {"description": "lines that contain numbers", "ground_truth": ".*[0-9].*", "chatgpt_output": "^.[0-9].*$"}, {"description": "lines using the word 'going' followed by 'd'.", "ground_truth": ".*\\bgoing\\b.*d.*", "chatgpt_output": "/\\ Going[rd]/g"}, {"description": "lines that have 'sandwich' but not the word 'ham'", "ground_truth": "(.*sandwich.*)&(~(.*\\bham\\b.*))", "chatgpt_output": "^(.*\\bsandwich(?! \\bham).*)$"}, {"description": "lines containing words starting with 't'.", "ground_truth": ".*((\\bt.*\\b)&([A-Za-z]+)).*", "chatgpt_output": "^.*\\bt\\w.*"}, {"description": "lines that contain words ending in 'g'", "ground_truth": ".*((\\b[A-Za-z][A-Za-z]*\\b)&(.*g)).*", "chatgpt_output": "^.[^g]*g$"}, {"description": "lines that contain words ending with vowels.", "ground_truth": ".*\\b[A-Za-z]*[AEIOUaeiou]\\b.*", "chatgpt_output": "\\.( [aeiou]{1,}$ )"}, {"description": "lines that use words starting with 's'.", "ground_truth": ".*\\bs[A-Za-z]*\\b.*", "chatgpt_output": "^[sWith]\\s*\\w+"}, {"description": "lines using 2 words or more", "ground_truth": "(.*\\b[A-Za-z]+\\b.*){2,}", "chatgpt_output": "\\.{2,}"}, {"description": "lines using the word 'piggy' and 'his mother'.", "ground_truth": ".*(.*\\bpiggy\\b.*)&(.*his mother.*)", "chatgpt_output": "/\\bpiggy\\s+[a-z ]+his\\s+mother\\b/gi"}, {"description": "lines that have 5 characters and no vowels.", "ground_truth": "(.{5})&(~(.*[AEIOUaeiou].*))", "chatgpt_output": "^.\\{5\\}[$[BCLM]\\{5\\}$"}, {"description": "lines that contain at least one vowel and at least two numbers.", "ground_truth": "(.*[AEIOUaeiou].*)&(.*[0-9].*){2}", "chatgpt_output": "^(.*[aeiou][0-9]{2}[aeiou].*)$"}, {"description": "lines using at least 3 characters", "ground_truth": ".*.{3}.*", "chatgpt_output": "^.[3,].*$"}, {"description": "lines that contain the phrase 'city of'.", "ground_truth": ".*(.*\\bcity of\\b.*).*", "chatgpt_output": "^.*\\s+(city\\sof).*$"}, {"description": "lines that contain between two to seven words.", "ground_truth": "([^A-Za-z]*\\b[A-Za-z][A-Za-z]*\\b[^A-Za-z]*){2,7}", "chatgpt_output": "\\bis\\s+([\\w\\s]+\\w)[ \\t]+\\1\\{2,6\\}"}, {"description": "lines that use words starting with 'ga'.", "ground_truth": ".*\\bga[A-Za-z]*\\b.*", "chatgpt_output": "^ga[a-zA-Z0-9]+"}, {"description": "lines any words beginning with the letter 'k'.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(k.*)).*", "chatgpt_output": "^[\u05da\u05da\u05e2\u05e7\u05e7\u05e9\u05e9\u05ea\u05e9\u05ea\u05e9\u05ea\u05e4\u05da\u05e4\u05da\u05d6\u05da\u05db\u05dc_]*[\u05da\u05da\u05e2\u05e7\u05e7\u05e9\u05e9\u05ea\u05e9\u05ea\u05e9\u05ea\u05e4\u05da\u05e4\u05da\u05d6\u05da\u05db]\\w*"}, {"description": "lines containing any number with an '8' in it.", "ground_truth": ".*8.*", "chatgpt_output": "^.[0-9].*[8].*$"}, {"description": "lines which contain only the number '3'.", "ground_truth": "3", "chatgpt_output": "^[0-9]+\\s*\\dequiv\\s*3\\s*$"}, {"description": "lines that contain words starting with 'pa'.", "ground_truth": ".*\\bpa[A-Za-z]*\\b.*", "chatgpt_output": "^.*\\bpa\\w*\\b.*$"}, {"description": "lines that contain only three words.", "ground_truth": "(([^A-Za-z])*\\b[A-Za-z]+\\b([^A-Za-z])*){3}", "chatgpt_output": "^\\S+\\s+\\S+\\s+\\S+$"}, {"description": "lines that mention 'Dylan' in the same line as 'Lynda'.", "ground_truth": "(.*Dylan.*Lynda.*)|(.*Lynda.*Dylan.*)", "chatgpt_output": "/(.*Dylan.*Lynda.*).*"}, {"description": "lines containing 'foo' or 'nu' before 'dist' or 'dust'", "ground_truth": ".*(foo|nu).*(dist|dust).*", "chatgpt_output": "^(.*(\\bfoo\\b|\\bnu\\b).*dist|dust)\\$"}, {"description": "lines where the number '0' appears", "ground_truth": ".*0.*", "chatgpt_output": "^.[0].*$"}, {"description": "lines that feature 'email' followed by the word 'spam'.", "ground_truth": ".*email.*\\bspam\\b.*", "chatgpt_output": "/\\bis email\\s+\\w+spam\\b/g"}, {"description": "lines that have within them words ending in 'ch'.", "ground_truth": ".*\\b[A-Za-z]*ch\\b.*", "chatgpt_output": "^(.*\\W+(?:[a-z]*ch)[a-z]*\\b.*)$"}, {"description": "lines using the word 'clue'", "ground_truth": ".*\\bclue\\b.*", "chatgpt_output": "^.*clue.*$"}, {"description": "lines that contain 'news' before 'paper' or 'show'.", "ground_truth": ".*news.*(paper|show).*", "chatgpt_output": "^(.*news.*paper|.*news.*show).*$"}, {"description": "lines that do not contain the word 'foo'", "ground_truth": "~(.*\\bfoo\\b.*)", "chatgpt_output": "^(?!.*foo).*$"}, {"description": "lines using 'min' before 'imal'", "ground_truth": ".*min.*imal.*", "chatgpt_output": "^.(.*min.\\*imal).*$"}, {"description": "lines that include the string 'rst'", "ground_truth": ".*rst.*", "chatgpt_output": "^.[rst].*$"}, {"description": "lines that contain at least two words starting with 'h' in them.", "ground_truth": "(.*\\bh[A-Za-z]*\\b.*){2}", "chatgpt_output": "^(.*\\bh\\w+\\s+\\bh\\w+.*)$"}, {"description": "lines using the word 'An' at least once.", "ground_truth": ".*\\bAn\\b.*", "chatgpt_output": "^(.*An.*)$"}, {"description": "lines that begin with a number", "ground_truth": "[0-9].*", "chatgpt_output": "^[0-9.\\']+.*"}, {"description": "lines that have words ending with 'ti'.", "ground_truth": ".*\\b[A-Za-z]*ti\\b.*", "chatgpt_output": "^.[^.]*.ti$"}, {"description": "lines that do not contain the character 'x'", "ground_truth": "~(.*x.*)", "chatgpt_output": "^.[^x]*$"}, {"description": "lines using words containing 'ope'.", "ground_truth": ".*\\b[A-Za-z]*ope[A-Za-z]*\\b.*", "chatgpt_output": "/\\bope\\w*\\b/g"}, {"description": "lines that use words starting with 'bi'.", "ground_truth": ".*\\bbi[A-Za-z]*\\b.*", "chatgpt_output": "^(?:[^:]|:`)[ spaces]*bi[wcs]:[ spaces]*[^.$]"}, {"description": "lines using 'oon'", "ground_truth": ".*oon.*", "chatgpt_output": "^.*oon.*$"}, {"description": "lines using words beginning with the letter 'g'", "ground_truth": ".*\\bg[A-Za-z]*\\b.*", "chatgpt_output": "^[\u0261].*$"}, {"description": "lines containing any mention of the word 'code'.", "ground_truth": ".*\\bcode\\b.*", "chatgpt_output": "/\\bcode\\b/.+/gm"}, {"description": "lines that contain 5 words", "ground_truth": "(.*\\b[A-Za-z]+\\b.*){5}", "chatgpt_output": "`^(\\S+\\s+){5}[^\\s]$`"}, {"description": "lines that have a word beginning with th and a number that begins in '7'", "ground_truth": "(.*\\bth[A-Za-z]*\\b.*)&(.*7[0-9]*.*)", "chatgpt_output": "^(?:th\\s+\\S+)[0-9][0-9]+\\R*$"}, {"description": "lines that have all of its letters capitalized.", "ground_truth": "~(.*[a-z].*)", "chatgpt_output": "^[A-Z]+$"}, {"description": "lines using 'mno' after 'pqr'", "ground_truth": ".*pqr.*mno.*", "chatgpt_output": "`^.*pqr.*mno.*`"}, {"description": "lines where there are two consecutive capital letters", "ground_truth": ".*[A-Z][A-Z].*", "chatgpt_output": "^(.*[A-Z][A-Z][A-Z.]*).*$"}, {"description": "lines containing a letter", "ground_truth": ".*[A-Za-z].*", "chatgpt_output": "^.[a-zA-Z].*$"}, {"description": "lines that contain the word 'orange'.", "ground_truth": ".*\\borange\\b.*", "chatgpt_output": "/\\\u0431\u043e\u0440\u0430\u0434\u0435/g (This regex uses the specific character encoding for 'orange' in the given context. Replace '\u043e\u0440' with 'o' and '\u0430' with 'a' and '\u0435' with 'e' to obtain the regex for the English word 'orange'.)"}, {"description": "lines using a word of 5 letters or less.", "ground_truth": ".*\\b[A-Za-z]{1,5}\\b.*", "chatgpt_output": "^.\\{5\\}($|[\\n\\r])"}, {"description": "lines that have words with 'la'.", "ground_truth": ".*\\b[A-Za-z]*la[A-Za-z]*\\b.*", "chatgpt_output": "/\\.+\\s+la\\w+/g"}, {"description": "lines that using the symbol '+' or '-'.", "ground_truth": ".*(\\+|-).*", "chatgpt_output": "^[^+\\-]*(\\+|-)[^+\\-]*$"}, {"description": "lines that contain the word 'Hindi'.", "ground_truth": ".*\\bHindi\\b.*", "chatgpt_output": "/\\bHindi\\b/g"}, {"description": "lines using words containing 'e' before 'i'.", "ground_truth": ".*((\\b[A-Za-z][A-Za-z]*\\b)&(.*e.*i.*)).*", "chatgpt_output": "^.[e].*\\.i.[^.\\n]*$"}, {"description": "lines that have at least one capital letter.", "ground_truth": ".*[A-Z].*", "chatgpt_output": "^.[\u0410-\u0417].*"}, {"description": "lines that have at least 3, but not more that 6 words.", "ground_truth": "([^A-Za-z]*\\b[A-Za-z]+\\b[^A-Za-z]*){3,6}", "chatgpt_output": "^\\s+(\\S+\\s+){3,6}\\S+$"}, {"description": "lines that contain 'mix' or 'shake'.", "ground_truth": ".*mix.*|.*shake.*", "chatgpt_output": "^.*(mix|shake).*$"}, {"description": "lines that have 1 word in them", "ground_truth": ".*\\b[A-Za-z][A-Za-z]*\\b.*", "chatgpt_output": "^[A-Za-z]+ \\1*$"}, {"description": "lines where 'PQR' is between a number and 'LMNO'", "ground_truth": ".*[0-9].*PQR.*LMNO.*|.*LMNO.*PQR.*[0-9].*", "chatgpt_output": "\\b\\d+([- ]?PQR[- ]?)[- ]+LMNO\\b"}, {"description": "lines that have words with 7 letters.", "ground_truth": ".*\\b[A-Za-z]{7}\\b.*", "chatgpt_output": "\\b\\w{7}\\b"}, {"description": "lines that have one number", "ground_truth": ".*[0-9].*", "chatgpt_output": "^.(.\\d).*$"}, {"description": "lines containing 'a' before 'b'", "ground_truth": ".*a.*b.*", "chatgpt_output": "^.[ab]*b.[ab]*$"}, {"description": "lines containing 'h', or 'i'", "ground_truth": ".*(h|i).*", "chatgpt_output": "/[hhi].*/g"}, {"description": "lines that contain words starting with 'de'.", "ground_truth": ".*((\\bde.*\\b)&([A-Za-z]+)).*", "chatgpt_output": "\\bde\\w*\\b"}, {"description": "lines that include words starting with 'q'.", "ground_truth": ".*((\\b[A-Za-z][A-Za-z]*\\b)&(q.*)).*", "chatgpt_output": "^(.*\\bq\\w*).*$"}, {"description": "lines that mention both 'butterflies' and 'fireflies'.", "ground_truth": "(.*butterflies.*)&(.*fireflies.*)", "chatgpt_output": "/\\.*(butterflies.*fireflies.*).*/"}, {"description": "lines that contain 'ject' or 'pel'", "ground_truth": ".*(ject|pel).*", "chatgpt_output": "^.*(project|pel).*$"}, {"description": "lines that carry the word 'Jim' located in between 'Stacks' and 'Slim'.", "ground_truth": ".*Stacks.*\\bJim\\b.*Slim.*|.*Slim.*\\bJim\\b.*Stacks.*", "chatgpt_output": "^(.*Stacks.*Jim.*Slim.*)$"}, {"description": "lines using at least 5 'd'", "ground_truth": "(.*d.*){5,}", "chatgpt_output": "^.{5,d}.{5,}$"}, {"description": "lines that contain at least 2 digits.", "ground_truth": "(.*[0-9].*){2,}", "chatgpt_output": "^(.*[0-9]{2,}.*).$"}, {"description": "lines using words with 'ca'.", "ground_truth": ".*\\b[A-Za-z]*ca[A-Za-z]*\\b.*", "chatgpt_output": "/[^\"\\n]*(ca[mp]?[.\\s]?(words|thing|item|part)|ca[nn]?[.\\s](the|an|some)?[.\\s]?(apple|car|cat))[^\"\\n]*/gm"}, {"description": "lines that have only 3 words", "ground_truth": "(([^A-Za-z])*\\b[A-Za-z]+\\b([^A-Za-z])*){3}", "chatgpt_output": "/^[\\w\\s]{1,}[\\w]{1}[\\w\\s]{1,}[\\w]{1}[\\w\\s]{1,}$/"}, {"description": "lines that have 2 or more numbers.", "ground_truth": "(.*[0-9].*){2,}", "chatgpt_output": "^(.*[\\d]+[\\s\\S]*[\\d]+.*)$"}, {"description": "lines that have a 2 letter sequence", "ground_truth": ".*[A-Za-z]{2}.*", "chatgpt_output": "~(.{2}).*"}, {"description": "lines that include words starting with 'fe'.", "ground_truth": "(.*((\\b[A-Za-z]+\\b)&(fe.*)).*).*", "chatgpt_output": "^.*\\s*(fe\\w.*).*$"}, {"description": "lines not containing 4 or more characters", "ground_truth": "~(.*.{4,}.*)", "chatgpt_output": "^.[^.]{0,3}$"}, {"description": "lines that end containing the letter 'z'.", "ground_truth": ".*z", "chatgpt_output": "^(.+\\oz)$"}, {"description": "lines which have three words.", "ground_truth": "(.*\\b[A-Za-z]+\\b.*){3,}", "chatgpt_output": "/\\.{$\\}:3[\\s\\S.]+\\s+[^\\s]+\\s+[^\\s]+[\\s\\S.]*/m"}, {"description": "lines with 'sec' before 'mun'.", "ground_truth": ".*sec.*mun.*", "chatgpt_output": "^.(.*\\bsec\\b.*\\bmun\\b).*$"}, {"description": "lines that have two or more words ending in 'a'.", "ground_truth": ".*(.*\\b[A-Za-z]*a\\b.*){2}.*", "chatgpt_output": "^(.*\\s+\\w+[a]$)[^\\n]+\\1[^\\n]$"}, {"description": "lines that have 6 words.", "ground_truth": "(.*\\b[A-Za-z]+\\b.*){6}", "chatgpt_output": "\\<\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\>\\s*$"}, {"description": "lines that do not contain any number", "ground_truth": "~(.*[0-9].*)", "chatgpt_output": "^[^0-9]*$"}, {"description": "lines containing 'k', or 'l'", "ground_truth": ".*(k|l).*", "chatgpt_output": "/[kl].*/g"}, {"description": "lines that contain words ending with 'mae'.", "ground_truth": ".*\\b[A-Za-z]*mae\\b.*", "chatgpt_output": "^.[^.]*\\.mae$"}, {"description": "lines that contain words starting with 'h'.", "ground_truth": ".*\\bh[A-Za-z]*\\b.*", "chatgpt_output": "^[h]\\w+\\b[(]\\s*(.*[^\\s]*)[)][\\n]"}, {"description": "lines where the  word 'Homer' precedes the word 'Odyssey'", "ground_truth": ".*\\bHomer\\b.*\\bOdyssey\\b.*", "chatgpt_output": "^(.*\\sHomer\\s+(.*\\s)[Oo]\\.?\\s[Ss]ec(\\.|:\\)| *)Odyssey"}, {"description": "lines that do not contain the letter 'a'", "ground_truth": "~(.*a.*)", "chatgpt_output": "^[^a]$"}, {"description": "lines using the word 'hero'.", "ground_truth": ".*\\bhero\\b.*", "chatgpt_output": "/\\bhero\\b/.+/mg"}, {"description": "lines that have words starting with 'pi'.", "ground_truth": ".*((\\b[A-Za-z][A-Za-z]*\\b)&(pi.*)).*", "chatgpt_output": "^(?=.\\sap[iie][^\\s]*).*$"}, {"description": "lines that have words starting with 'kai'.", "ground_truth": ".*\\bkai[A-Za-z]*\\b.*", "chatgpt_output": "^(.*)\\s*(kai\\w.*)"}, {"description": "Find lines that mention dogs or cats but not any with mice", "ground_truth": "(.*(dogs|cats).*)&(~(.*mice.*))", "chatgpt_output": "^(?!.*\\bmouse\\b).*(dog|cat)\\b[^]$*"}, {"description": "lines that use 'a' or 'b' before words ending with 'er'.", "ground_truth": ".*(a|b).*\\b[A-Za-z]*er\\b.*", "chatgpt_output": "/[a-b]\\s+(?:[a-z]+er)$/g"}, {"description": "lines starting with 'abc'", "ground_truth": "abc.*", "chatgpt_output": "^abc.+$"}, {"description": "lines using three character words begining with the letters 'CE'.", "ground_truth": ".*\\bCE[A-Za-z]\\b.*", "chatgpt_output": "^(CE[A-Za-z]{2}\\s)*$"}, {"description": "lines that contain 3 words and have at least 2 numbers.", "ground_truth": ".*(.*\\b[A-Za-z]+\\b.*){3}&(.*[0-9].*){2}.*", "chatgpt_output": "^(\\w+\\s+\\d+\\s+\\w+\\s+\\d+)(?:\\s+\\w+\\s+\\d+)*$"}, {"description": "lines using 'abc' after 'def'", "ground_truth": ".*def.*abc.*", "chatgpt_output": "^def.*abc"}, {"description": "lines which feature the word 'hairy'.", "ground_truth": ".*\\bhairy\\b.*", "chatgpt_output": "/\\bhairy\\w*/g"}, {"description": "lines containing the word 'crack'.", "ground_truth": ".*\\bcrack\\b.*", "chatgpt_output": "/\\bcrack\\w*/g"}, {"description": "lines that have at least three 'j'.", "ground_truth": "(.*j.*){3}", "chatgpt_output": "^(.{1,}j.{1,}j.{1,}j.{0,}[^j]*j.{1,}j.{1,}j.{1,})\\1$"}, {"description": "lines that have 'turn'", "ground_truth": ".*turn.*", "chatgpt_output": "/turn/.+/gm"}, {"description": "lines using 'ghi' after 'jkl'", "ground_truth": ".*jkl.*ghi.*", "chatgpt_output": "^(.*)jkl(.*ghi).*$"}, {"description": "lines which contain a mix of uppercase letters and lowercase letters", "ground_truth": "(.*[A-Z].*)&(.*[a-z].*)", "chatgpt_output": "^[a-zA-Z]+$ # Matches lines that contain only alphabets (both upper and lower case)"}, {"description": "lines where no word is more than 5 characters", "ground_truth": "~(.*\\b[A-Z-a-z]{6,}\\b.*)", "chatgpt_output": "^(\\s*(?:[w][is]:\\s+[^]\\s{1,5})*{6}|[^]\\s{1,5}$)^"}, {"description": "lines using 'd' in the middle of a word.", "ground_truth": ".*\\b[A-Za-z]+d[A-Za-z]+\\b.*", "chatgpt_output": "/\\b[^d]\\wd[wd]\\w/g"}, {"description": "lines using 5 'd'", "ground_truth": "(.*d.*){5}", "chatgpt_output": "^.{5}d{5}.$"}, {"description": "lines with capital letters", "ground_truth": ".*[A-Z].*", "chatgpt_output": "^[A-Z]+.*"}, {"description": "lines containing 'e', or 'f'", "ground_truth": ".*(e|f).*", "chatgpt_output": "^.[eF].*$"}, {"description": "lines using a 5 letter sequence", "ground_truth": ".*[A-Za-z]{5}.*", "chatgpt_output": "`.\\{5\\}`"}, {"description": "lines which contain a word starting with 'ch'", "ground_truth": ".*\\bch[A-Za-z]*\\b.*", "chatgpt_output": "^.[ch].+(?=(\\s|$))"}, {"description": "lines that contain words starting with 'po'.", "ground_truth": ".*((\\b[A-Za-z][A-Za-z]*\\b)&(po.*)).*", "chatgpt_output": "^[^\\r\\n]*po\\w.*"}, {"description": "lines utilizing the word 'law'.", "ground_truth": ".*.*\\blaw\\b.*", "chatgpt_output": "/\\\ube14aws/.+/g"}, {"description": "lines that have only one b.", "ground_truth": "([^b])*b([^b])*", "chatgpt_output": "^.\\zb(?!.\\zb).*$"}, {"description": "lines that have the number '44'.", "ground_truth": ".*44.*", "chatgpt_output": "^.[0-9]+\\.?[0-9]+\\.?[0-9]+\\.?[0-9]+\\.?[0-9]+\\.?[0-9]+\\.?[0-9]{2}(?=.\\s+44|$)[^\\S\\r\\n]"}, {"description": "lines that contain the letter 'A' followed by a vowel.", "ground_truth": ".*A.*[AEIOUaeiou].*", "chatgpt_output": "^.[Aa].[EeIiOoUu].*$"}, {"description": "lines that contain words with 'oo'.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(.*oo.*)).*", "chatgpt_output": "\\/.[o]{2}[o]{0,}[\\w.]+\\/g"}, {"description": "lines which have at least 7 numbers.", "ground_truth": ".*(.*[0-9].*){7}.*", "chatgpt_output": "^(.{0,6}\\d{7}[.\\n]*)+$"}, {"description": "lines which end with 'you'", "ground_truth": ".*you", "chatgpt_output": "/.\\*.you/"}, {"description": "lines that contain words ending with 'ol'.", "ground_truth": ".*((\\b[A-Za-z][A-Za-z]*\\b)&(.*ol)).*", "chatgpt_output": "^.[^.]*\\.(?:[^.]+ol)$"}, {"description": "lines that contain a digit.", "ground_truth": ".*[0-9].*", "chatgpt_output": "^.[0-9].*$"}, {"description": "lines using a word having the string 'der'", "ground_truth": ".*\\b[A-Za-z]*der[A-Za-z]*\\b.*", "chatgpt_output": "^.*{3}[d]{3}er.*$"}, {"description": "lines that are 20 characters or less", "ground_truth": ".{0,20}", "chatgpt_output": "^.[^\\n]{0,20}$"}, {"description": "lines containing a word", "ground_truth": ".*\\b[A-Za-z]+\\b.*", "chatgpt_output": "/\\b[YourWord]\\b/g"}, {"description": "lines that begin with the word 'once'.", "ground_truth": "once\\b.*", "chatgpt_output": "^once[\\s.\\S]*"}, {"description": "lines that contain words starting with 'ac'.", "ground_truth": ".*((\\b[A-Za-z][A-Za-z]*\\b)&(ac.*)).*", "chatgpt_output": "^.[a-c].*\\s(?=.\\w{1,}[a-c].*)[^\\s]$"}, {"description": "lines that have 4 words or less where at least 1 of those words contains the letter sequence 'uin'.", "ground_truth": "([^A-Za-z]*\\b[A-Za-z]+\\b[^A-Za-z]*){0,4}&(.*((\\b[A-Za-z]+\\b)&(.*uin.*)).*){1,}", "chatgpt_output": "^(.\\s+[a-z]+[in][an]\\s+[a-z]+(?:\\s+\\w+){0,2}).*$"}, {"description": "lines that contain words ending in 'n'", "ground_truth": ".*\\b[A-Za-z]*n\\b.*", "chatgpt_output": "^.(.*[wn]$)[]\\s*$"}, {"description": "lines that have 'eye'", "ground_truth": ".*eye.*", "chatgpt_output": "/eye/g"}, {"description": "lines that contain three letter words in them.", "ground_truth": ".*\\b[A-Za-z]{3}\\b.*", "chatgpt_output": "\\b[a-z]{3}\\b(?=[\\s.\\n]*[^a-z]{1})"}, {"description": "lines that contain five letter words.", "ground_truth": ".*\\b[A-Za-z]{5}\\b.*", "chatgpt_output": "\\b\\w{5}\\b"}, {"description": "lines which do not have 'life'.", "ground_truth": "~(.*life.*)", "chatgpt_output": "^(.*)(?!=life).*$"}, {"description": "lines which start with a number.", "ground_truth": "[0-9].*", "chatgpt_output": "^[0-9]\\d+"}, {"description": "lines that start with a 'z' and end with an 'a'.", "ground_truth": "z.*a", "chatgpt_output": "^z.*a$"}, {"description": "lines that have instances of a number and a vowel", "ground_truth": "(.*[0-9].*)&(.*[AEIOUaeiou].*)", "chatgpt_output": "\\.( [aeiouAEIOU]\\d.).*"}, {"description": "lines which have both uppercase letters and lowercase letters.", "ground_truth": "(.*[A-Z].*)&(.*[a-z].*)", "chatgpt_output": "^(.*[a-z][A-Z].*).*$"}, {"description": "lines containing 5 letter words.", "ground_truth": ".*\\b[A-Za-z]{5}\\b.*", "chatgpt_output": "\\b[a-z]{5}\\b"}, {"description": "lines that match 'billy' or 'bob'.", "ground_truth": ".*(billy|bob).*", "chatgpt_output": "/(billy|bob)/g"}, {"description": "lines which contain five or more 'y'", "ground_truth": "(.*y.*){5,}", "chatgpt_output": "^.(y{5,}y*).$"}, {"description": "lines that include words starting with 'ne'.", "ground_truth": ".*\\bne[A-Za-z]*\\b.*", "chatgpt_output": "^(?=.\\W*ne\\w.*\\s)[^\\S\\r\\n]*(\\S.\\S)|^\\S*ne\\S+"}, {"description": "lines containing words that start with 'x'", "ground_truth": ".*\\bx[A-Za-z]*\\b.*", "chatgpt_output": "^(x\\w*.*)"}, {"description": "lines containing 'ge' or 'an' before 'ger' or 'tra'", "ground_truth": ".*(ge|an).*(ger|tra).*", "chatgpt_output": "^(.*(ge|an) .* (ger|tra)).*$"}, {"description": "lines that end with 'gh'", "ground_truth": ".*gh", "chatgpt_output": "/^.*.gh$/"}, {"description": "lines which contain 'sorry'", "ground_truth": ".*sorry.*", "chatgpt_output": "^.*sorry.*$"}, {"description": "lines with 'tch' but not 'wi'.", "ground_truth": "(.*tch.*)&(~(.*wi.*))", "chatgpt_output": "^.*tch[^wi].*$"}, {"description": "lines that start with 'far'", "ground_truth": "far.*", "chatgpt_output": "^far.+"}, {"description": "lines using words that end in 'y' or 'i'.", "ground_truth": ".*\\b[A-Za-z]*(y|i)\\b.*", "chatgpt_output": "^.[^.]*[iy]$ # Or: ^.+(?i)([iy]$)|(\\s+[iy]$) for case-insensitive matching."}, {"description": "lines that contain the number '2005' and 'May' and begin with 'Mary'.", "ground_truth": "(.*2005.*)&(.*May.*)&(Mary.*)", "chatgpt_output": "^Mary.*(May.\\s*[0-9]{4})[(|.)][0-9]{2}$ \\- This regex will match lines that start with 'Mary', contain 'May' and '2005' (which can appear in either format: 'May 2005' or 'May-2005')."}, {"description": "lines with an '8' that comes after a '5'.", "ground_truth": ".*5.*8.*", "chatgpt_output": "^.*\\ Five.\\ K[eight]"}, {"description": "lines utilizing words starting with 'w'.", "ground_truth": ".*((w.*)&(\\b[A-Za-z][A-Za-z]*\\b)).*", "chatgpt_output": "^[ww].*$"}, {"description": "lines containing words that start with 'th'", "ground_truth": ".*\\bth[A-Za-z]*\\b.*", "chatgpt_output": "^[[:blank:]]*th\\w+"}, {"description": "lines that contain 'ig' or 'physics' before 'nobel'.", "ground_truth": ".*(ig|physics).*nobel.*", "chatgpt_output": "^(.*(?:ig|physics)\\s+nobel)"}, {"description": "lines containing 'st' and containing 'gy' too", "ground_truth": "(.*st.*)&(.*gy.*)", "chatgpt_output": "^.*(st).*.(gy).*$"}, {"description": "lines that contain the text 'NOW'", "ground_truth": ".*NOW.*", "chatgpt_output": "^.*NOW.*$"}, {"description": "lines that contain the text 'hello'", "ground_truth": ".*hello.*", "chatgpt_output": "/^.*hello.*$/"}, {"description": "lines that contain five words that begin with 'P'.", "ground_truth": ".*(.*\\bP[A-Za-z]*\\b.*){5}.*", "chatgpt_output": "^(.\\Sprintf{%.{4}s\\%w{1}[P][\\s]*.%}{5}).*$"}, {"description": "lines that have words ending with 'ge'.", "ground_truth": ".*\\b[A-Za-z]*ge\\b.*", "chatgpt_output": "^.[^.]*(ge)$"}, {"description": "Look for any line with the '@' symbol.", "ground_truth": ".*\\@.*", "chatgpt_output": "/@./"}, {"description": "lines using an instance of 'itch'", "ground_truth": ".*itch.*", "chatgpt_output": "/itch/.*/g"}, {"description": "lines containing three vowels", "ground_truth": "(.*[AEIOUaeiou].*){3}", "chatgpt_output": "^.[aeiou].[aeiou].[aeiou].*$"}, {"description": "lines containing 'ers' and containing 'oxy' too", "ground_truth": "(.*ers.*)&(.*oxy.*)", "chatgpt_output": "^.*ers.*oxy.*$"}, {"description": "lines that have more than 6 numbers.", "ground_truth": "(.*[0-9].*){7,}", "chatgpt_output": "^(.{0,6}\\d{7,}).*$"}, {"description": "lines with the word 'Goal' in them.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(Goal)).*", "chatgpt_output": "/.*Goal.*/"}, {"description": "lines beginning with 'Therefore'", "ground_truth": "Therefore.*", "chatgpt_output": "^Therefore.*$"}, {"description": "lines using 2 or more words containing the letters 'ing'.", "ground_truth": "(.*(\\b[A-Za-z]+\\b&(.*ing.*)).*){2,}", "chatgpt_output": "\\b\\w+ing\\s+\\w+ing\\b"}, {"description": "lines that have the word 'love' preceeding the word 'you'.", "ground_truth": ".*\\blove\\b.*\\byou\\b.*", "chatgpt_output": "^(.*love\\s+you).*$"}, {"description": "lines which contain a 3 letter string starting with a", "ground_truth": ".*(a[A-Za-z]{2}).*", "chatgpt_output": "^.[a-z]{3}"}, {"description": "lines starting with a 'T'.", "ground_truth": "T.*", "chatgpt_output": "^T.+"}, {"description": "lines that contain the letters 'ba'.", "ground_truth": ".*ba.*", "chatgpt_output": "^.*ba.*$"}, {"description": "lines that are composed of 4 or more words.", "ground_truth": "(.*\\b[A-Za-z]+\\b.*){4,}", "chatgpt_output": "\\.{3,}[^\\s]+[^\\s]+"}, {"description": "lines using the word 'George' and the number '62'.", "ground_truth": ".*(.*\\bGeorge\\b.*)&(.*62.*).*", "chatgpt_output": "/\\bgame[:\\s]?George[:\\s]?[0-9]{2}=[[:space:]]?62/g"}, {"description": "lines utilizing words starting with 'b'.", "ground_truth": ".*\\bb[A-Za-z]*\\b.*", "chatgpt_output": "^[bst].*$ # Matches lines starting with 'b', 's' or 't' followed by any character for the rest of the line."}, {"description": "lines that use the word 'boom' followed by words starting with 'ka'", "ground_truth": ".*\\bboom\\b.*\\bka[A-Za-z]*\\b.*", "chatgpt_output": "^(.*\\sboom\\s.*\\s[kw][ae]k.\\s).*$"}, {"description": "lines that end in a number", "ground_truth": ".*[0-9]", "chatgpt_output": "^(.*.)[0-9]$"}, {"description": "lines that use words with 'ce'.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(.*ce.*)).*", "chatgpt_output": "^.[^ ]+ ce [.\\r\\n]* [^ ]+( ce|the ce|a ce|an ce|ce's|ce's)|[.\\r\\n])"}, {"description": "lines which have at least 1 numeric character.", "ground_truth": ".*[0-9].*", "chatgpt_output": "^(.*[\\d]).*$"}, {"description": "lines that contain at least one word starting with 'q'.", "ground_truth": ".*\\bq[A-Za-z]*\\b.*", "chatgpt_output": "^(.*\\sq[\u02b7-\u017e]_[a-zA-Z0-9]*|[^ ]+q[wd])\\s+(.*)$"}, {"description": "lines that have 'twist'", "ground_truth": ".*twist.*", "chatgpt_output": "^.+twist.+$"}, {"description": "lines containing words that start with and end with 'xyz'", "ground_truth": "xyz(.*xyz)?", "chatgpt_output": "^(?=.*xyz).*axyz$"}, {"description": "lines containing 'x' and containing 'y' too", "ground_truth": "(.*x.*)&(.*y.*)", "chatgpt_output": "^.*x.*y.*$"}, {"description": "lines that contain words ending with 'la'.", "ground_truth": ".*\\b[A-Za-z]*la\\b.*", "chatgpt_output": "^.(.*[^\\. ]+la)$"}, {"description": "lines that have 3 numbers and contain the word 'Columbia'.", "ground_truth": "(.*[0-9].*){3}&(.*\\bColumbia\\b.*)", "chatgpt_output": "/(.*)Columbia (\\d{3}\\.\\d{3}[-.\\])\\1 (\\d{3}\\.\\d{3}[-.\\])\\1 (\\d{3}\\.\\d{3}).*/g"}, {"description": "lines that contain at least one number.", "ground_truth": ".*[0-9].*", "chatgpt_output": "^.(.*\\d.).*$"}, {"description": "lines that contain words starting with 'ke'.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(ke.*)).*", "chatgpt_output": "^.*\\bek.[^\\s.]+"}, {"description": "lines that contain a word using at most 6 letters", "ground_truth": ".*\\b[A-Za-z]{1,6}\\b.*", "chatgpt_output": "^.[\\-w]{1,6}.[$"}, {"description": "lines using 'ent' or 'ong'", "ground_truth": ".*(ent|ong).*", "chatgpt_output": "^.[mO]nt.*|.\\ He[nt].*$"}, {"description": "lines containing words using a vowel.", "ground_truth": ".*\\b[A-Za-z]*[aeiouAEIOU][A-Za-z]*\\b.*", "chatgpt_output": "^.[aeiou].*[aeiou].*$"}, {"description": "lines with words ending in 'y'.", "ground_truth": ".*\\b[A-Za-z]*y\\b.*", "chatgpt_output": "^.[^.]*/[^.]*y$"}, {"description": "lines that contain 2 numbers that contain '19'.", "ground_truth": "(.*19.*){2}", "chatgpt_output": "^(.*[0-9]_[19][0-9]_[19][0-9].*|.*[0-9][19][0-9][19][0-9].*).*$"}, {"description": "lines that contain at least 2 capital letters.", "ground_truth": "(.*[A-Z].*){2,}", "chatgpt_output": "^(.[A-Z]{2,}.)*$"}, {"description": "lines containing a 6 letter sequence", "ground_truth": ".*[A-Za-z]{6}.*", "chatgpt_output": "^.{5}[a-zA-Z0-9]{6}.*$"}, {"description": "lines where the letter c appears more than one time", "ground_truth": "(.*c.*){2,}", "chatgpt_output": "/\\.*\\xC.[^c]*\\1[^]\\n/g"}, {"description": "lines which contain only vowels.", "ground_truth": "[AEIOUaeiou]*", "chatgpt_output": "^[aeiou]{3,}[aeiou]$ #Matches lines containing only vowels with a minimum length of 3."}, {"description": "lines that contain words ending in 'i'.", "ground_truth": ".*\\b[A-Za-z]*i\\b.*", "chatgpt_output": "^.(*.)*i$"}, {"description": "lines containing 'ast'", "ground_truth": "(.*ast.*).*", "chatgpt_output": "/^.\\*ast\\.*$/"}, {"description": "lines using 'the'", "ground_truth": ".*the.*", "chatgpt_output": "/the.*/g"}, {"description": "lines containing 'on' and also containing 'off'", "ground_truth": "(.*on.*)&(.*off.*)", "chatgpt_output": "/\\.(*on.\\*.*off.\\*)/gm"}, {"description": "lines that mention 'trolls'.", "ground_truth": ".*trolls.*", "chatgpt_output": "/trolls/.*/g"}, {"description": "lines that contain at least one vowel and at least two numbers", "ground_truth": "((.*[AEIOUaeiou].*)&(.*[0-9].*){2})", "chatgpt_output": "^(.*[aeiou].*[0-9]{2,}.*[0-9].*)$"}, {"description": "lines that begin with the word 'the'", "ground_truth": "\\bthe\\b.*", "chatgpt_output": "^the\\s.*"}, {"description": "lines that contain words with 'ri'.", "ground_truth": ".*\\b[A-Za-z]*ri[A-Za-z]*\\b.*", "chatgpt_output": "/\\.*\\bri\\w*\\.*/g"}, {"description": "lines which contain 3 or more vowels.", "ground_truth": "(.*[AEIOUaeiou].*){3,}", "chatgpt_output": "/(.+)[aeiou]{3,}[aeiou].+/g"}, {"description": "lines using 3 instances of 'sw'", "ground_truth": ".*(.*sw.*){3}.*", "chatgpt_output": "^(.+sw.+sw.+sw.+)[^\\s]*$"}, {"description": "lines that contain instances of 'ape', but only if its one of the first three words.", "ground_truth": "([^A-Za-z]*\\b[A-Za-z]+\\b[^A-Za-z]*){0,2}[^A-Za-z]*\\bape\\b.*", "chatgpt_output": "^([a-p\\.]+\\s+ape\\s+.[^aeiou\\.]*[^\\s]|ape\\s+[a-z]+(?:\\s+[a-p\\.]+\\s+ape)?)"}, {"description": "lines which contain a word starting with the letter 'a' and a word starting with the letter 'z'.", "ground_truth": "(.*\\ba[A-Za-z]*\\b.*)&(.*\\bz[A-Za-z]*\\b.*)", "chatgpt_output": "^(.*.\\Sa.\\W+z\\W+\\S.)*$"}, {"description": "lines that show 'May' and 'June'.", "ground_truth": ".*(.*May.*)&(.*June.*).*", "chatgpt_output": "^(?!.*(Jan|Feb|Mar|Apr|Jul|Aug|Sep|Oct|Nov|Dec)).*(May|June).*$"}, {"description": "lines that use words starting with 'no'.", "ground_truth": ".*\\bno[A-Za-z]*\\b.*", "chatgpt_output": "^(no\\.\\s+[a-z\\s]*.)*$"}, {"description": "lines that contain the text 'this is it'.", "ground_truth": ".*this is it.*", "chatgpt_output": "^.[^.]*\\bthis\\sis\\sit.[^.]*$"}, {"description": "lines that start with 'the'.", "ground_truth": "(the.*).*", "chatgpt_output": "^the.*"}, {"description": "lines that show the letter 'a' and number '5'.", "ground_truth": "(.*a.*)&(.*5.*)", "chatgpt_output": "^.[a].*\\dfive|.\\Ad\\dfive|.\\Ad.[5]$"}, {"description": "lines using 'din' after 'e' or 'ky'.", "ground_truth": ".*(e|ky).*din.*", "chatgpt_output": "/[eky].*din./"}, {"description": "lines that contain both a 'B' and a 'b'.", "ground_truth": "(.*B.*)&(.*b.*)", "chatgpt_output": "^.[Bb].*[Bb].*$"}, {"description": "lines that have a '7' in them", "ground_truth": ".*7.*", "chatgpt_output": "^.*7.*$"}, {"description": "lines using at least 6 characters", "ground_truth": ".*.{6}.*", "chatgpt_output": "^.\\{6,}$"}, {"description": "lines that contain the word 'zoo'.", "ground_truth": ".*\\bzoo\\b.*", "chatgpt_output": "/\\bwoo\\b/gi"}, {"description": "lines using the vowel combination 'ei'.", "ground_truth": ".*ei.*", "chatgpt_output": "^.[ei].*"}, {"description": "lines containing at least 2 words", "ground_truth": "(.*\\b[A-Za-z]+\\b.*){2,}", "chatgpt_output": "^.[ \\t]+\\S+\\.$ (This assumes words are separated by whitespace, tabs or periodic dots)"}, {"description": "lines containing the word 'run' or the word 'hat'", "ground_truth": ".*\\b(run|hat)\\b.*", "chatgpt_output": "/\\bil(?: run| hat)\\b/g"}, {"description": "lines containing at least 2 characters but not 4 characters or more", "ground_truth": ".{2,3}", "chatgpt_output": "^.\\{2,3\\}$"}, {"description": "lines with no vowels", "ground_truth": "~(.*[AEIOUaeiou].*)", "chatgpt_output": "^[bcdfghjklpqwxz]*$"}, {"description": "lines using words that contain the letter 'q'.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(.*q.*)).*", "chatgpt_output": "/\\.*\\ Quinn\\.?|\\.*\\ Q\\.?|\\.*\\ Wqqq\\.?|\\.*\\ wqqq\\.?/g"}, {"description": "lines containing the word 'shoe' and containing the word 'lace'", "ground_truth": "(.*\\bshoe\\b.*)&(.*\\blace\\b.*)", "chatgpt_output": "^.(.*\\bshoe\\b.*\\.\\s.*\\blace\\b.*).$"}, {"description": "lines using 2 or more words comprised of 5 letters", "ground_truth": "(.*\\b[A-Za-z]{5}\\b.*){2,}", "chatgpt_output": "^.[ \\w]{2,}\\.\\.[ \\w]{2,}$"}, {"description": "lines starting with 're'", "ground_truth": "re.*", "chatgpt_output": "^re.*/m"}, {"description": "lines that contain 'in'", "ground_truth": ".*in.*", "chatgpt_output": "^.*in.*$"}, {"description": "lines using 'ick'", "ground_truth": ".*ick.*", "chatgpt_output": "/.*ick./"}, {"description": "lines that contain words starting with 'ki'.", "ground_truth": ".*\\bki[A-Za-z]*\\b.*", "chatgpt_output": "^(.*\\bki\\w*).*$"}, {"description": "lines that end in a digit", "ground_truth": ".*[0-9]", "chatgpt_output": "^.+\\d$"}, {"description": "lines that have two vowels", "ground_truth": "(.*[AEIOUaeiou].*){2}", "chatgpt_output": "^[aeiou]{2,}[aeiou].*$"}, {"description": "lines having words starting with 'di'.", "ground_truth": ".*\\bdi[A-Za-z]*\\b.*", "chatgpt_output": "^di\\.\\w+"}, {"description": "lines that contain five vowels", "ground_truth": "(.*[AEIOUaeiou].*){5}", "chatgpt_output": "/(.*)[aeiou]{5}[aeiou]*(.*)/"}, {"description": "lines containing 'tt' and containing 'bb' too", "ground_truth": "(.*tt.*)&(.*bb.*)", "chatgpt_output": "^(.*tt.*bb.*)# This will match lines containing the substring 'tt' and 'bb'."}, {"description": "lines that contain the word 'hello' within 5 characters of the word 'world'.", "ground_truth": ".*(\\bhello\\b.{1,5}\\bworld\\b|\\bworld\\b.{1,5}\\bhello\\b).*", "chatgpt_output": "/\\bhello\\s+(?:[[:blank:]]|.[)*5[[:blank:]]*world\\b/g"}, {"description": "lines that end with the number '100'.", "ground_truth": ".*100", "chatgpt_output": "^(.*.)100$"}, {"description": "lines which begin with the word 'how'", "ground_truth": "((\\b[A-Za-z]+\\b)&(how)).*", "chatgpt_output": "^how\\.?"}, {"description": "lines using at least three numerical characters", "ground_truth": "(.*[0-9].*){3,}", "chatgpt_output": "^.[0-9].{2,}[0-9].$"}, {"description": "lines that do not have the letter 'a'", "ground_truth": "~(.*a.*)", "chatgpt_output": "^[^a]$"}, {"description": "lines that contain words ending in 'ch'", "ground_truth": ".*\\b[A-Za-z]*ch\\b.*", "chatgpt_output": "/(.+\\b(ch)\\b)/g"}, {"description": "lines that contain the word 'trust'.", "ground_truth": ".*\\btrust\\b.*", "chatgpt_output": "^.(.*\\btrust\\b).* $"}, {"description": "lines which contain the letter 'x' and the letter 'y'", "ground_truth": "(.*x.*)&(.*y.*)", "chatgpt_output": "/[xy].*/ - This regex pattern will match any line that contains the letters 'x' and 'y' in any order."}, {"description": "lines that have a word of 3 letters", "ground_truth": ".*\\b[A-Za-z]{3}\\b.*", "chatgpt_output": "\\b[a-zA-Z]{3}\\b"}, {"description": "lines that end with 'boby'", "ground_truth": ".*boby", "chatgpt_output": "^.[^]*(boby)$"}, {"description": "lines that have the word 'couch' included", "ground_truth": ".*\\bcouch\\b.*", "chatgpt_output": "^(.*\\wcouch\\w.*)$"}, {"description": "lines that contain at least five words.", "ground_truth": "(.*\\b[A-Za-z][A-Za-z]*\\b.*){5,}", "chatgpt_output": "\\.{3,}[\\s\\w]+\\.{3,}[\\s\\w]+\\.{3,}[\\s\\w]+\\.{3,}[\\s\\w]+"}, {"description": "lines which have a th after a 'ch'.", "ground_truth": ".*ch.*th.*", "chatgpt_output": "^.*ch\\s+th.*$"}, {"description": "lines which contain the letter 'z' twice.", "ground_truth": "(.*z.*){2,}", "chatgpt_output": "^(.+\\ Zw+ Zw.+).*$"}, {"description": "lines that end with '2' and contain words that begin with 'Sel'", "ground_truth": ".*\\bSel[A-Za-z]*\\b.*2", "chatgpt_output": "^(.*Sel.[^]\u4e8c]{0,}2$"}, {"description": "lines containing either a 'w' or 's' character.", "ground_truth": ".*(w|s).*", "chatgpt_output": "^.[ws].*$"}, {"description": "lines which contain 2 or more 'q'.", "ground_truth": "(.*q.*){2,}", "chatgpt_output": "^(.+q.[^q]*.{1}[q.]+)[^\\n]*(\\1|$)\\1[^\\n]*$"}, {"description": "lines that contain words starting with 'an'.", "ground_truth": ".*\\ban[A-Za-z]*\\b.*", "chatgpt_output": "^(anz:\\s+an\\w+)"}, {"description": "lines having words ending with 'fa'.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(.*fa)).*", "chatgpt_output": "^.\\* \\w{0,}fa$"}, {"description": "lines ending with 'vem'", "ground_truth": ".*vem", "chatgpt_output": "^.*(vem)$"}, {"description": "lines containing words starting with the letter 'x'.", "ground_truth": ".*\\bx[A-Za-z]*\\b.*", "chatgpt_output": "^.[x].*"}, {"description": "lines with 7 or more words", "ground_truth": "(.*\\b[A-Za-z]+\\b.*){7,}", "chatgpt_output": "\\.{1,6}\\s+\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+\\S+"}, {"description": "lines that contain 'jellyfish' and mention 'breeding'.", "ground_truth": "(.*jellyfish.*)&(.*breeding.*)", "chatgpt_output": "/^.*jellyfish.*breeding.*$/"}, {"description": "lines that contain 5 or more letters", "ground_truth": ".*(.*[A-Za-z].*){5,}.*", "chatgpt_output": "^.[a-z]{5,}.*$"}, {"description": "lines that contain words ending with 'le'.", "ground_truth": ".*((\\b.*le\\b)&([A-Za-z]+)).*", "chatgpt_output": "^.[^.]*(le)$"}, {"description": "lines that contain words and 4 numbers.", "ground_truth": "(.*\\b[A-Za-z]+\\b.*)&(.*[0-9].*){4}", "chatgpt_output": "`^(.\\w+)[0-9]{4}([\\w.\\s]*.)+$`"}, {"description": "lines that contain words ending with 'd'.", "ground_truth": ".*((\\b[A-Za-z][A-Za-z]*\\b)&(.*d)).*", "chatgpt_output": "^.[^.]*\\.d$"}, {"description": "lines using a word containing the letter 'l'.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(.*l.*)).*", "chatgpt_output": "^.[wl].*$"}, {"description": "lines containing the word 'inoperative'.", "ground_truth": ".*\\binoperative\\b.*", "chatgpt_output": "^.+(inoperative).+$"}, {"description": "lines with all words beginning with 'a'.", "ground_truth": "~(.*((\\b[A-Za-z]+\\b)&(~(a.*))).*)", "chatgpt_output": "^(.*\\b[awn]\\w*\\s{0,}[awn]\\w*\\s{0,}[awn]\\w*\\s{0,}[awn]\\w*\\s{0,}[awn]\\w*\\s{0,}.*)$"}, {"description": "lines that end with 'you'.", "ground_truth": ".*you", "chatgpt_output": "/.*,you$/"}, {"description": "lines that contain 4 letter words ending in 's'", "ground_truth": ".*\\b[A-Za-z]{3}s\\b.*", "chatgpt_output": "`\\w{4}$`"}, {"description": "lines which contain the letter 'h' preceded by a letter.", "ground_truth": ".*[A-Za-z].*h.*", "chatgpt_output": "^.[h].\\w*$"}, {"description": "lines which have the word 'egg'", "ground_truth": ".*\\begg\\b.*", "chatgpt_output": "/\\begg\\b/g"}, {"description": "lines that contain 'is' or 'it'", "ground_truth": ".*(is|it).*", "chatgpt_output": "^(.*[is it].*).*$"}, {"description": "lines using 'ss' between 'a' and 'le'", "ground_truth": ".*a.*ss.*le.*", "chatgpt_output": "~(/[aa]\\.?[.\\s]?ss[.\\s]?[le])[^\\S\\r\\n]*$~"}, {"description": "lines that have at least two words that start with 's'.", "ground_truth": "(.*\\bs[A-Za-z]*\\b.*){2}", "chatgpt_output": "^(.*\\bss\\w+\\s+\\bss\\w+.*)$"}, {"description": "lines comprised of 5 or more words containing 5 or fewer letters", "ground_truth": "(.*((\\b[A-Za-z]+\\b)&([A-Za-z]{0,5})).*){5,}", "chatgpt_output": "\\b\\w{3,}\\s+\\w{3,}\\s+\\w{3,}\\s+\\w{3,}\\s+\\w{3,}\\b(?=\\.|$)"}, {"description": "lines that contain a number ending with '0'", "ground_truth": ".*[0-9]*0.*", "chatgpt_output": "^.+[0-9]{1,\\}0$"}, {"description": "lines that end with the word 'free'.", "ground_truth": ".*\\bfree", "chatgpt_output": "^.[^.]*\\ fair$"}, {"description": "lines which contain 'ead' or 'pro'", "ground_truth": ".*(ead|pro).*", "chatgpt_output": "^.*(ead|pro).*$"}, {"description": "lines that contain the word 'and'", "ground_truth": ".*\\band\\b.*", "chatgpt_output": "/\\.(*and)./gm"}, {"description": "lines using 4 letter words", "ground_truth": ".*\\b[A-Za-z]{4}\\b.*", "chatgpt_output": "/\\.{4}/g"}, {"description": "lines that contain words starting with 'gi'.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(gi.*)).*", "chatgpt_output": "^gi\\w+"}, {"description": "lines that utilize words starting with 'pu'.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(pu.*)).*", "chatgpt_output": "^(?:[^:\\r\\n]*)(pu\\w.*[^\\r\\n]*)"}, {"description": "lines that end in 'e'", "ground_truth": ".*e", "chatgpt_output": "/\\.e$/"}, {"description": "lines end in an 'a'", "ground_truth": ".*a", "chatgpt_output": "^.(.*)$aja"}, {"description": "lines that have at least three words beginning with a vowel.", "ground_truth": "(.*\\b[AEIOUaeiou][A-Za-z]*\\b.*){3}", "chatgpt_output": "^([aeiou]{1}[\\w]+ [aeiou]{1}[\\w]+ [aeiou]{1}[\\w]+.\\s*){3,}[^.\\n]$"}, {"description": "lines which contain a 3 letter string", "ground_truth": ".*([A-Za-z]{3}).*", "chatgpt_output": "^.\\{3\\}"}, {"description": "lines with 'car' between 'try' and 'say'.", "ground_truth": ".*try.*car.*say.*|.*say.*car.*try.*", "chatgpt_output": "`^try\\s*(.*\\scar\\.*)\\s*say`"}, {"description": "lines that contain the word 'the'", "ground_truth": ".*\\bthe\\b.*", "chatgpt_output": "/\\bthe\\b/g"}, {"description": "lines that contain the number '10'.", "ground_truth": ".*10.*", "chatgpt_output": "^.[0-9]+\\.10[0-9]*$"}, {"description": "lines that contain 6 letter words beginning with the letter 'y'.", "ground_truth": ".*\\by[A-Za-z]{5}\\b.*", "chatgpt_output": "`^.[asyw]{5}$`"}, {"description": "lines that contain a word starting with a vowel.", "ground_truth": ".*\\b[AEIOUaeiou][A-Za-z]*\\b.*", "chatgpt_output": "^[aeiou][a-zA-Z\\s]*"}, {"description": "lines with 'helper' where the word 'little' comes before 'helper'.", "ground_truth": "(.*helper.*)&(.*\\blittle\\b.*helper.*)", "chatgpt_output": "^(.*little.helper).*$"}, {"description": "lines containing an instance of the name 'Beaker'.", "ground_truth": ".*Beaker.*", "chatgpt_output": "/Beaker/.+/"}, {"description": "lines which contain 'qu' at the start", "ground_truth": "qu.*", "chatgpt_output": "^qu.*"}, {"description": "lines that show 'Mr' and 'Mrs' but not 'Ms' or 'Miss'.", "ground_truth": "((.*Mr.*)&(.*Mrs.*)&(~(.*(Ms|Miss).*)))", "chatgpt_output": "^[Mm][rR]\\s+(?:[Mm][rR]|[sS][rR]es|[Mm]iss)\\s[A-Z][.\\s]*([^0-9]|$)"}, {"description": "lines that include 'Canada' and 'Mexico' but not 'Cuba'.", "ground_truth": "(.*Canada.*)&(.*Mexico.*)&(~(.*Cuba.*))", "chatgpt_output": "^(.*[CaNadA].*[MexIcO].*[^Cu]).*$"}, {"description": "lines which contain a word ending in 'ing'.", "ground_truth": ".*\\b[A-Za-z]*ing\\b.*", "chatgpt_output": "/\\.\\s*[^\\s]+ING\\b/g"}, {"description": "lines that contain 'tumeric' and 'saffron'", "ground_truth": "(.*tumeric.*)&(.*saffron.*)", "chatgpt_output": "/\\btumeric\\s+\\bsaffron\\b/g"}, {"description": "lines that start with 'apartheid'.", "ground_truth": "apartheid.*", "chatgpt_output": "^apartheid.\\*"}, {"description": "lines containing words that start with 'h' and end with 'e'.", "ground_truth": ".*\\bh[A-Za-z]*e\\b.*", "chatgpt_output": "^.[h].*[e]$"}, {"description": "lines containing both 'ac' and 'dc'", "ground_truth": "(.*ac.*)&(.*dc.*)", "chatgpt_output": "^(.*ac.*dc.*).*$"}, {"description": "lines composed with a word", "ground_truth": ".*\\b[A-Za-z]+\\b.*", "chatgpt_output": "\\b\\w+\\b"}, {"description": "lines which do not contain a vowel.", "ground_truth": "~(.*[AEIOUaeiou].*)", "chatgpt_output": "^[^aeiouAEIOU].*$"}, {"description": "lines using words beginning with the letter 'x'.", "ground_truth": ".*\\bx[A-Za-z]*\\b.*", "chatgpt_output": "^[Alex|Alexa|X[a-z]*|X\\.|x\\-][^\\n]*"}, {"description": "lines containing words that end with 'L'", "ground_truth": ".*\\b[A-Za-z]*L\\b.*", "chatgpt_output": "^(.+\\bL\\b)"}, {"description": "lines that contain words beginning in 'p'", "ground_truth": ".*\\bp[A-Za-z]*\\b.*", "chatgpt_output": "^[p].*\\b"}, {"description": "lines that contain the word 'sea' followed by at least one number.", "ground_truth": ".*\\bsea\\b.*[0-9].*", "chatgpt_output": "/\\bis\\w+\\d+\\./gm"}, {"description": "lines that contain a word containing 5 or more letters.", "ground_truth": ".*\\b[A-Za-z]{5,}\\b.*", "chatgpt_output": "^.[-\\w]{5,}.*$"}, {"description": "lines that contain at least three five letter words", "ground_truth": "(.*\\b[A-Za-z]{5}\\b.*){3}", "chatgpt_output": "~\\b\\w{5}\\s+\\1{2}[^\\s]+\\b"}, {"description": "lines that contain 'ugly' before 'betty' or 'thomas'.", "ground_truth": ".*ugly.*(betty|thomas).*", "chatgpt_output": "^(.*ugly.*betty.*|.*ugly.*thomas.*)\\$"}, {"description": "lines that contain words starting with 'fa'.", "ground_truth": ".*\\bfa[A-Za-z]*\\b.*", "chatgpt_output": "^fa\\w*\\s*[^.\\n]*(?:\\s+[fa]\\w*)*\\1[^\\n.]*(?=\\.|$)"}, {"description": "lines that contain 'fu' before 'ba' or 'bar'.", "ground_truth": ".*fu.*(ba|bar).*", "chatgpt_output": "^(.*)(fu)[^ba]*(ba|bar).*$"}, {"description": "lines using more than 4 characters", "ground_truth": ".*.{5,}.*", "chatgpt_output": "^.\\{5,}$"}, {"description": "lines that contain any three vowels", "ground_truth": "(.*[AEIOUaeiou].*){3}", "chatgpt_output": "/\\.(e[aeiou]{2}|o[aeiou]{2}|i[aeiou]{2}).*/ \\"}, {"description": "lines having words ending with 'ta'.", "ground_truth": ".*((\\b.*ta\\b)&([A-Za-z]+)).*", "chatgpt_output": "^.[^](.*[t\u0430t]$)+$"}, {"description": "lines which contain 'I am mad'.", "ground_truth": ".*I am mad.*", "chatgpt_output": "^.*-I am mad-.*$"}, {"description": "lines that use words that are only four letters long.", "ground_truth": ".*\\b[A-Za-z]{4}\\b.*", "chatgpt_output": "/\\b\\w{4}\\b/g"}, {"description": "lines that have five words that all end with the letter 'G'.", "ground_truth": "(.*((\\b.*G\\b)&([A-Za-z]+)).*){5}", "chatgpt_output": "^(.[^ ]+ \\1 [^ ]+ \\1 [^ ]+ \\1 [^ ]+ [^ ]+)$"}, {"description": "lines containing words that start with 'i'.", "ground_truth": ".*\\bi[A-Za-z]*\\b.*", "chatgpt_output": "^(?=.*\\bi\\w*).*$"}, {"description": "lines containing 'mean' or 'nic' before 'est' or 'test'", "ground_truth": ".*(mean|nic).*(est|test).*", "chatgpt_output": "^(.*mean|nic).*est|.*test.*$"}, {"description": "lines that use words with 'ca'.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(.*ca.*)).*", "chatgpt_output": "/[ca].*\\W+(ca[-\\.][a-z]+\\b)/gm"}, {"description": "lines that have ten words.", "ground_truth": "(.*\\b[A-Za-z]+\\b.*){10}", "chatgpt_output": "\\.{7}[\\w\\s]{3}[\\w]"}, {"description": "lines containing 'tain' after 're' or 'per'.", "ground_truth": ".*(re|per).*tain.*", "chatgpt_output": "/(?=.\\br\u00e9).*tain|(?=.\\bper).*tain/g"}, {"description": "lines that end in 'o'", "ground_truth": ".*o", "chatgpt_output": "/\\.o$/"}, {"description": "lines that contain 'x' and 'y' but not 'z'.", "ground_truth": "(.*x.*)&(.*y.*)&(~(.*z.*))", "chatgpt_output": "^(.*)x(.*y).*(?!z)(.*)$"}, {"description": "lines that end in 'e'", "ground_truth": ".*e", "chatgpt_output": "/\\.e$/"}, {"description": "lines having the letters 'ea'.", "ground_truth": ".*((ea)&([A-Za-z]*)).*", "chatgpt_output": "/[^]ea[^]/g"}, {"description": "lines that begin with 'The' or 'For'.", "ground_truth": "(The|For).*", "chatgpt_output": "^[The|For].*"}, {"description": "lines that contain the letter 'V' and the number '33'.", "ground_truth": "(.*V.*)&(.*33.*)", "chatgpt_output": "/[V][0-9]{2}/g for finding 'V' followed by any two digits,assuming '33' is meant. If it's specifically '33' you're looking for, replace '[0-9]{2}' with '\\b33\\b'."}, {"description": "lines starting with 'X' followed by a word with 'oa'.", "ground_truth": "X.*((\\b[A-Za-z]+\\b)&(.*oa.*)).*", "chatgpt_output": "^X\\.+oa"}, {"description": "lines that end with the letter 'o'", "ground_truth": ".*o", "chatgpt_output": "/\\.o$/"}, {"description": "lines using any instance of 'd' or 'e' followed by 's' or 'r'", "ground_truth": ".*(d|e).*(s|r).*", "chatgpt_output": "\\bid|be[rs]\\b"}, {"description": "lines that contain a word and five numbers.", "ground_truth": "(.*\\b[A-Za-z][A-Za-z]*\\b.*)&(.*[0-9].*){5}", "chatgpt_output": "\\b\\w+\\h+(?:\\d+\\h+){5}\\b"}, {"description": "lines where 'TRY' is separated from 'LOL' with a comma", "ground_truth": ".*TRY.*\\,.*LOL.*|.*LOL.*\\,.*TRY.*", "chatgpt_output": "^(.*TRY.*),(.*LOL.*)^"}, {"description": "lines that contin words ending in 'e'.", "ground_truth": ".*\\b[A-Za-z]*e\\b.*", "chatgpt_output": "^.[^.]*(e)$"}, {"description": "lines containing the word 'blog'", "ground_truth": ".*\\bblog\\b.*", "chatgpt_output": "/\\.*\\s*(blog)\\s*./"}, {"description": "lines using a word", "ground_truth": ".*\\b[A-Za-z]+\\b.*", "chatgpt_output": "/\\bw\\d+\\s+\\1\\w+\\s+(.+)\\/$/\\1/gm"}, {"description": "lines which have 'oo', but no instances of 'o' between the letters 'd' and 'a'", "ground_truth": "(.*oo.*)&(~(.*d.*o.*a.*|.*a.*o.*d.*))", "chatgpt_output": "^(?!.*[d][^oo]*[a][^oo]*).{2}[oo]$"}, {"description": "lines having words ending with 'en'.", "ground_truth": ".*\\b[A-Za-z]*en\\b.*", "chatgpt_output": "^.[^.]*(?:[. ]|$)(?![^][])*(enen)$"}, {"description": "lines that contain three letter words.", "ground_truth": ".*\\b[A-Za-z]{3}\\b.*", "chatgpt_output": "\\b[a-z]{3}\\b"}, {"description": "lines using a 3 letter sequence", "ground_truth": ".*[A-Za-z]{3}.*", "chatgpt_output": "^.[A-ZA-ZZ]{3}[.\\n]*"}, {"description": "lines which contain 'upper' or 'lower'", "ground_truth": ".*(upper|lower).*", "chatgpt_output": "/[^upperlower].*{1}(upper|lower)[^upperlower].*/gm"}, {"description": "lines that have the word 'sandwich'", "ground_truth": ".*sandwich.*", "chatgpt_output": "^.[^ ]* sandwich [.\\n()]*"}, {"description": "lines ending in 'ia'", "ground_truth": ".*ia", "chatgpt_output": "^.*(ia)$"}, {"description": "lines that begin with the phrase 'once upon a time'", "ground_truth": "once upon a time.*", "chatgpt_output": "^once upon a time.(.*)"}, {"description": "lines that utilize the letters 'as'.", "ground_truth": ".*as.*", "chatgpt_output": "^.[a-s].{1,}as[.a-s].{1,}$"}, {"description": "lines that contain the word 'unifax' but not the word 'colorado'.", "ground_truth": "(.*\\bunifax\\b.*)&(~(.*\\bcolorado\\b.*))", "chatgpt_output": "^(?!.* colorado).*\\ unifax$"}, {"description": "lines using the word 'Westbury' next to a number.", "ground_truth": "(.*\\bWestbury\\b.*)&(.*[0-9].*)", "chatgpt_output": "/\\bWestbury\\s+\\d+\\b/g"}, {"description": "lines with 'helper' and 'little'", "ground_truth": "(.*little.*)&(.*helper.*)", "chatgpt_output": "/^.[hm] helper.[hm] little.[^]$/"}, {"description": "lines that contain digits.", "ground_truth": ".*[0-9].*", "chatgpt_output": "^.[0-9].*$"}, {"description": "lines that contain three 'she'.", "ground_truth": "(.*she.*){3}", "chatgpt_output": "`^(.*)she{3}she(.*)$`"}, {"description": "lines that contain exactly two words.", "ground_truth": "(([^A-Za-z])*\\b[A-Za-z]+\\b([^A-Za-z])*){2}", "chatgpt_output": "^[\\s\\w]+[\\s]+\\w+$"}, {"description": "lines using words that begin with 'q' but do not have a 'u'.", "ground_truth": ".*\\b(([A-Za-z]+)&(q.*)&(~(.*u.*)))\\b.*", "chatgpt_output": "^(q.[^u]*.$) # Matches lines starting with 'q' followed by any character that is not 'u', and finished by any character(s)."}, {"description": "lines that contain words starting with 'du'.", "ground_truth": ".*((\\b[A-Za-z][A-Za-z]*\\b)&(du.*)).*", "chatgpt_output": "^.*\\bdu\\w.*"}, {"description": "lines beginning with words that have a vowel as the first letter.", "ground_truth": "\\b[AEIOUaeiou][A-Za-z]*\\b.*", "chatgpt_output": "^[aeiouAEIOU].*"}, {"description": "lines that begin with a numeral", "ground_truth": "[0-9].*", "chatgpt_output": "^[0-9].*"}, {"description": "lines which contain the word 'mobile' but do not contain the word 'phone'", "ground_truth": "(.*\\bmobile\\b.*)&~(.*\\bphone\\b.*)", "chatgpt_output": "^(?!.*phone).*mobile"}, {"description": "lines containing words that begin with 'G' and end with 'y'", "ground_truth": ".*\\bG[A-Za-z]*y\\b.*", "chatgpt_output": "^[Gg]\\w*y$"}, {"description": "lines containing at least 3 words", "ground_truth": "(.*\\b[A-Za-z]+\\b.*){3,}", "chatgpt_output": "\\.([\\w\\s]+)[.\\s]{0,2}[\\w\\s]+\\b[\\s.]+\\1[.\\s]{0,2}[\\w\\s]+\\b"}, {"description": "lines that have 'JFK' but not 'WAS'", "ground_truth": "(.*JFK.*)&(~(.*WAS.*))", "chatgpt_output": "^(.*JFK.*.*WAS.*|.*)(?!.*WAS)(.*JFK.*)"}, {"description": "lines that contain the phrase 'Booyah'.", "ground_truth": ".*Booyah.*", "chatgpt_output": "/\\.*(Booyah).*/gm"}, {"description": "lines that contain both the word 'bar' and the word 'stress'", "ground_truth": ".*(.*\\bbar\\b.*)&(.*\\bstress\\b.*).*", "chatgpt_output": "^(.+) \\band (\\w+) stress (.+)$"}, {"description": "lines that contain words that have the letter 'e' occuring after the letter 'c'.", "ground_truth": ".*\\b[A-Za-z]*c[A-Za-z]*e[A-Za-z]*\\b.*", "chatgpt_output": "^(.*[c][ae])(.*[^ae])*[^ae]$"}, {"description": "lines that contain 3 numbers and one number contains 1.", "ground_truth": "(.*[0-9].*)&(.*1.*)", "chatgpt_output": "^(.* [\\d]{1} [\\w\\-]*\\.? [\\d]{1} [\\w\\-]*\\.? [\\d]{1} [\\w\\-]*\\.? [\\d]{1} .*)$"}, {"description": "lines which begin with 'omega'", "ground_truth": "omega.*", "chatgpt_output": "^omega.\\*"}, {"description": "lines using words ending with 'mo'.", "ground_truth": ".*((\\b.*mo\\b)&([A-Za-z]+)).*", "chatgpt_output": "^.[^.]*(mo)$"}, {"description": "lines that contain the word 'Boby'.", "ground_truth": ".*\\bBoby\\b.*", "chatgpt_output": "/\\ Bobby/g"}, {"description": "lines containing usage of the word 'fried'.", "ground_truth": ".*\\bfried\\b.*", "chatgpt_output": "/\\bfried\\b/g"}, {"description": "lines with words that contain 3 letters", "ground_truth": ".*\\b[A-Za-z]{3}\\b.*", "chatgpt_output": "\\b\\w{3}\\b(?=\\s|$)"}, {"description": "lines that use words ending with 'ot'.", "ground_truth": ".*\\b[A-Za-z]*ot\\b.*", "chatgpt_output": "^.[^.]+\\.ot$"}, {"description": "lines using more than 3 characters", "ground_truth": ".*.{4,}.*", "chatgpt_output": "^.\\{3,}$"}, {"description": "lines that contain the word 'null'", "ground_truth": ".*\\bnull\\b.*", "chatgpt_output": "^.*\\bnull\\b.*$"}, {"description": "lines using a word which contains at least 5 letters.", "ground_truth": ".*\\b[A-Za-z]{5,}\\b.*", "chatgpt_output": "^.[a-z]{5,}.*$"}, {"description": "lines that use words of at least 9 letters.", "ground_truth": ".*\\b[A-Za-z]{9,}\\b.*", "chatgpt_output": "\\b\\w{9,}\\b"}, {"description": "lines that match the words 'and in this life'.", "ground_truth": ".*\\band in this life\\b.*", "chatgpt_output": "/\\ AND\\ in\\ this\\ life/gi"}, {"description": "lines that contain at least 4 words.", "ground_truth": "(.*\\b[A-Za-z]+\\b.*){4,}", "chatgpt_output": "\\.+\\s+\\S+\\s+\\S+\\s+\\S+"}, {"description": "lines using at least 3 'b'", "ground_truth": "(.*b.*){3,}", "chatgpt_output": "^([b]{3,}.)*$"}, {"description": "lines that contain an 'x'", "ground_truth": ".*x.*", "chatgpt_output": "/[x]/g"}, {"description": "lines that contain the symbol '-'.", "ground_truth": ".*-.*", "chatgpt_output": "^.[-\\].*$"}, {"description": "3 letter lines starting with 'x'", "ground_truth": "x[A-Za-z]{2}", "chatgpt_output": "/^[x][a-zA-Z]{2}/"}, {"description": "lines containing 'pol' or 'mi' before 'ist' or 'lk'", "ground_truth": ".*(pol|mi).*(ist|lk).*", "chatgpt_output": "^(pol|mi).*ist|.*lk$"}, {"description": "lines that have at least 2 words of 3 or more letters", "ground_truth": "(.*\\b[A-Za-z]{3,}\\b.*){2,}", "chatgpt_output": "^(.*\\s+[a-zA-Z][a-zA-Z0-9\\_]*[a-zA-Z][a-zA-Z0-9\\_]*(?:\\s+[a-zA-Z][a-zA-Z0-9\\_]*){1,1}[a-zA-Z0-9]*)+$"}, {"description": "lines that contain '-' between words 'a' and 'lot'.", "ground_truth": ".*(\\ba\\b.*\\-.*\\blot\\b|\\blot\\b.*\\-.*\\ba\\b).*", "chatgpt_output": "^.*a\\s+[-]\\s+a\\s+lot\\.*$"}, {"description": "lines with words that end in 'n'.", "ground_truth": ".*\\b[A-Za-z]*n\\b.*", "chatgpt_output": "^.[^n]*\\bn$"}, {"description": "lines using 'lay' or 'lie'", "ground_truth": ".*l(ay|ie).*", "chatgpt_output": "/[^.]*(lay|lie)[^.]*([.!]|$)/gm"}, {"description": "lines that show 's' in the beginning of the word  and 't' at the end of the word.", "ground_truth": ".*((\\bs[A-Za-z]*\\b)&(\\b[A-Za-z]*t\\b)).*", "chatgpt_output": "^[hs].*[tt]$"}, {"description": "lines that have 'de' before 'st' and 're' after 'col'.", "ground_truth": "(.*de.*st.*)&(.*col.*re.*)", "chatgpt_output": "^(.*de.*st.*re.*col).*$"}, {"description": "lines which contain 5 words starting with 'f'", "ground_truth": "(.*\\bf[A-Za-z]*\\b.*){5,}", "chatgpt_output": "^(.\\S{1,5} [fa-zA-Z]\\1 [fa-zA-Z]\\2 [fa-zA-Z]\\3 [fa-zA-Z]\\4 [fa-zA-Z]\\5 \\S.*)$"}, {"description": "lines which mention 'puppy'.", "ground_truth": ".*puppy.*", "chatgpt_output": "/.*puppy.*/g"}, {"description": "lines that contain DEF' with a period immediately after it.'", "ground_truth": ".*DEF\\..*", "chatgpt_output": "^(.*)DEF\\.\\.(.*)$"}, {"description": "lines using the word 'intellectual'", "ground_truth": ".*\\bintellectual\\b.*", "chatgpt_output": "^.[^']*intellectual[^'].*$"}, {"description": "lines containing 'ant'", "ground_truth": ".*ant.*", "chatgpt_output": "/ant/.*/gm"}, {"description": "lines which have the word 'number' and a number", "ground_truth": "(.*\\bnumber\\b.*)&(.*[0-9].*)", "chatgpt_output": "/\\bnumber\\s+\\d+\\.?\\d*\\b/g"}, {"description": "lines using words ending with 'on'.", "ground_truth": ".*\\b[A-Za-z]*on\\b.*", "chatgpt_output": "^.*(on)$"}, {"description": "lines that end with 'bar' and include the phrase 'San Jose'.", "ground_truth": "(.*bar)&(.*San Jose.*)", "chatgpt_output": "^.*San Jose(.*$)(.+bar)$"}, {"description": "lines that use words starting with 'fu'.", "ground_truth": ".*\\bfu[A-Za-z]*\\b.*", "chatgpt_output": "^.(fu[wb].*).*$"}, {"description": "lines beginning with 'begin'", "ground_truth": "begin.*", "chatgpt_output": "^begin .* $"}, {"description": "lines that contain words ending in 'e'.", "ground_truth": ".*(.*\\b[A-Za-z]*e\\b.*).*", "chatgpt_output": "^.[^.]+\\be$"}, {"description": "lines that start with a vowel and ends in an 'e'.", "ground_truth": "[AEIOUaeiou].*e", "chatgpt_output": "^[aeiouAEIOU].*e$"}, {"description": "lines starting with the word 'the'.", "ground_truth": "\\bthe\\b.*", "chatgpt_output": "^the\\.*\\s"}, {"description": "lines that contain 1 to 5 numbers and 1 letter.", "ground_truth": "([^0-9]*[0-9][^0-9]*){1,5}&(.*[A-Za-z].*)", "chatgpt_output": "^[a-z].{0,4}\\d{1,5}[a-z]$"}, {"description": "lines that end with 'and'", "ground_truth": ".*and", "chatgpt_output": "/\\.and$/"}, {"description": "lines that utilize 'pan' following words starting with 'pe'.", "ground_truth": ".*\\bpe[A-Za-z]*\\b.*pan.*", "chatgpt_output": "^(?=.\\YPE).*\\pan\\b"}, {"description": "lines that have the word 'Facebook'", "ground_truth": ".*\\bFacebook\\b.*", "chatgpt_output": "/\\bfacebook\\b/.+/"}, {"description": "lines that have words with 're'.", "ground_truth": ".*\\b[A-Za-z]*re[A-Za-z]*\\b.*", "chatgpt_output": "/\\.+\\s+[^.]++(re)[^.]+\\.+/g (This regex pattern matches lines containing the substring \"re\" in any position.)"}, {"description": "lines that have 3 or more words containing the letters 'ly'.", "ground_truth": "(.*((\\b[A-Za-z]+\\b)&(.*ly.*)).*){3,}", "chatgpt_output": "^(.*\\b[wl][ly]\\w{1,2}[wl][ly]\\w{1,2}\\b.*\\b[wl][ly]\\w{1,2}[wl][ly]\\w{1,2}\\b.*|.*\\b[wl][ly]\\w{1,2}[wl][ly]\\w{1,2}\\b.*\\b[wl][ly]\\w{1,2}[wl][ly]\\w{1,2}\\b).*$"}, {"description": "lines with instances of 'ABC' between 'XYX' and a comma", "ground_truth": ".*XYX.*ABC.*\\,.*|.*\\,.*ABC.*XYX.*", "chatgpt_output": "~(?:XYX)(.*?)ABC(.*?) /******/ \\1, \\2"}, {"description": "lines that have a word containing 'a' or 'b'", "ground_truth": ".*\\b([A-Za-z]+&.*(a|b).*)\\b.*", "chatgpt_output": "^.(.*\\ba|\\ba.*).*$"}, {"description": "lines using the word 'of' or the word 'in'", "ground_truth": "(.*\\bof\\b.*)|(.*\\bin\\b.*)", "chatgpt_output": "^(.*(\\\u0431\u043ef|\u0438n).*).$"}, {"description": "lines containing two or more words containing 'y'.", "ground_truth": "(.*\\b[A-Za-z]*y[A-Za-z]*\\b.*){2,}", "chatgpt_output": "^(.*\\ Wy.*\\ Wy.*|.*\\ Wy\\s+\\w+Y.*|.*\\ Wy\\s+\\w+Y\\s+\\w+Y.*|.+\\ Wy{2,}.+)$ # This pattern matches lines containing two or more occurrences of the letter 'y' in separate words. It should be noted that this pattern does not account for the case difference, meaning it will recognize both uppercase 'Y' and lowercase 'y'. To ensure that both occurrences of 'y' are lowercase, the pattern should be modified accordingly."}, {"description": "lines that contain at least one 'z'", "ground_truth": ".*z.*", "chatgpt_output": "^(.*z.*).*$"}, {"description": "lines that contain a word using the letters 'ire'", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(.*ire.*)).*", "chatgpt_output": "\\b\\w*ire\\w*\\b"}, {"description": "lines that have 'ser' after 'lin' or 'ku'.", "ground_truth": ".*(lin|ku).*ser.*", "chatgpt_output": "^(lin[[:blank:]]+ser|ku[[:blank:]]+ser)"}, {"description": "lines that have three words comprised of 4 characters each.", "ground_truth": ".*(.*\\b[A-Za-z]{4}\\b.*){3}.*", "chatgpt_output": "^.\\S{3}\\s+\\S{4}\\S{3}\\s+\\S{4}\\S{3}$"}, {"description": "lines ending in 'az'", "ground_truth": ".*az", "chatgpt_output": "^(.*)az$"}, {"description": "lines which begin with the letter 'z'.", "ground_truth": "z.*", "chatgpt_output": "^[z].* $"}, {"description": "lines containing 'ku' after 'mar' or 'is'.", "ground_truth": ".*(mar|is).*ku.*", "chatgpt_output": "^(mar|is)[[:blank:]]+(ku.).*$"}, {"description": "lines that contain 2 numbers and 3 words and contain the letter 't'.", "ground_truth": ".*(.*[0-9].*){2}&(.*\\b[A-Za-z]+\\b.*){3}&(.*t.*).*", "chatgpt_output": "\\bt\\W+\\d+\\W+\\S+\\W+\\d+\\W+\\S+\\W+\\S+\\W+\\S\\b (Multiple word characters \\S are used to match words. This assumes words are separated by whitespace or single word boundaries \\b)"}, {"description": "lines that include one word using at least 2 letters", "ground_truth": ".*\\b[A-Za-z]{2,}\\b.*", "chatgpt_output": "^.[a-z]{2,}\\."}, {"description": "lines that have a capital 'A', but not a lowercase 'a'.", "ground_truth": "(.*A.*)&(~(.*a.*))", "chatgpt_output": "^[^a].*\\A[A]"}, {"description": "lines that start with the letter 'e' followed by the word 'jr'.", "ground_truth": "e.*\\bjr\\b.*", "chatgpt_output": "^e\\.?jr[\\w\\s]*$"}, {"description": "lines containing 'b', or 'c'", "ground_truth": ".*(b|c).*", "chatgpt_output": "^.[bc].*$"}, {"description": "lines that contain 'Beaker' but do not contain 'Bunsen'.", "ground_truth": "(.*Beaker.*)&(~(.*Bunsen.*))", "chatgpt_output": "^(.*Beaker.*)[^Bunsen]"}, {"description": "lines where '4' is between '3' and '5'", "ground_truth": ".*3.*4.*5.*|.*5.*4.*3.*", "chatgpt_output": "^.[3][0-9]{1}[4][0-9]{1}[5].$"}, {"description": "lines that contain a word in all uppercase.", "ground_truth": ".*\\b[A-Z]+\\b.*", "chatgpt_output": "^([A-Z]+.[^A-Z]|[A-Z]+)$"}, {"description": "lines which start with the word 'The'", "ground_truth": "\\bThe\\b.*", "chatgpt_output": "^The\\.*(?:[^\\n]|(?:\\n[^\\n]*))*$"}, {"description": "lines containing 3 or more vowels and 5 or more words", "ground_truth": "(.*[AEIOUaeiou].*){3,}&(.*\\b[A-Za-z]+\\b.*){5,}", "chatgpt_output": "/\\.{3,}[aeiou]{3,}\\s+\\S+\\s+\\S+\\s+\\S+\\s+\\S+/g"}, {"description": "lines that contain words starting with 'bo'.", "ground_truth": ".*\\bbo[A-Za-z]*\\b.*", "chatgpt_output": "^([bbio][\\w\\s]*).*$"}, {"description": "6 letter lines", "ground_truth": "[A-Za-z]{6}", "chatgpt_output": "\\.{6}"}, {"description": "lines with 'ock'", "ground_truth": ".*ock.*", "chatgpt_output": "/^.{0,2}ock.{0,2}/gm"}, {"description": "lines using a capital letter followed by a number", "ground_truth": ".*[A-Z].*[0-9].*", "chatgpt_output": "^[A-Z][0-9]+"}, {"description": "lines that start with 'ABC' and end with 'TRY'", "ground_truth": "ABC.*TRY", "chatgpt_output": "^ABC.*TRY$"}, {"description": "lines ending with 'cem'", "ground_truth": ".*cem", "chatgpt_output": "^.*(cem)$"}, {"description": "lines that contain a number.", "ground_truth": ".*[0-9].*", "chatgpt_output": "^(.\\d.).*$"}, {"description": "lines that have words ending with a 'g'", "ground_truth": ".*((\\b.*g\\b)&([A-Za-z]+)).*", "chatgpt_output": "\\b\\w*\\bg"}, {"description": "lines that contain 2 repetitions of the word 'a'", "ground_truth": "(.*\\ba\\b.*){2}", "chatgpt_output": "^(.+)?\\Ab\\K\\A\\b(?=.*\\1)[bis]\\1$"}, {"description": "lines that utilize words starting with 'ko'.", "ground_truth": ".*\\bko[A-Za-z]*\\b.*", "chatgpt_output": "^(?=.*\\boworld{2}ko\\w*).*$"}, {"description": "lines that show the text '1:15' and the word 'midnight'.", "ground_truth": "(.*1:15.*)&(.*\\bmidnight\\b.*)", "chatgpt_output": "^(.* one:\\d{2}:\\d{2}\\s+midnight\\.*).$"}, {"description": "lines that contain three or more digits", "ground_truth": "(.*[0-9].*){3}", "chatgpt_output": "^.{0,}[\\d){3,}.*$"}, {"description": "lines using 'ness' or 'ed'", "ground_truth": ".*(ness|ed).*", "chatgpt_output": "^.*(ness|ed).*$"}, {"description": "lines that are only comprised of uppercase letters.", "ground_truth": "[A-Z]*", "chatgpt_output": "^[A-Z]*$"}, {"description": "lines using 'lugg' before 'age'", "ground_truth": ".*lugg.*age.*", "chatgpt_output": "^(.*)lugg(.*?)age(.*)$"}, {"description": "lines with the word 'and' between 'zyx' and 'cba'", "ground_truth": ".*zyx.*\\band\\b.*cba.*|.*cba.*\\band\\b.*zyx.*", "chatgpt_output": "/\\bzyx\\s+and\\s+cba\\b/g"}, {"description": "lines containing the number 11 and the word 'eleven'.", "ground_truth": "(.*11.*)&(.*eleven.*)", "chatgpt_output": "/\\b(11\\s+eleven|eleven\\s+11)\\b/g"}, {"description": "lines that are composed of the letters 'a', 'b', and 'd'.", "ground_truth": "(a|b|d)*", "chatgpt_output": "^[ad]{3}$"}, {"description": "lines that mention 'Randy' and also contain 'fox'", "ground_truth": "(.*Randy.*)&(.*fox.*)", "chatgpt_output": "/\\barandy\\.+(fox)|(fox)\\s+randy/\\"}, {"description": "lines utilizing '!'", "ground_truth": ".*\\!.*", "chatgpt_output": "^[!*].*$ # Matches lines starting with an '!' character."}, {"description": "lines that end with vowels.", "ground_truth": ".*[AEIOUaeiou]", "chatgpt_output": "/[aeiou]\\s*$/"}, {"description": "lines that have 'ace' after 'pl' or 'tr'.", "ground_truth": ".*(pl|tr).*ace.*", "chatgpt_output": "\\bpl\\.(?:tr|[_]?[a-z]?)[\\s\\S]*ace"}, {"description": "lines starting with 'tra'", "ground_truth": "tra.*", "chatgpt_output": "^tra.+"}, {"description": "lines containing one instance of 'ca' followed by an 'r' or a 't'", "ground_truth": ".*(.*ca.*(r|t).*).*", "chatgpt_output": "^.*ca[rt].*$"}, {"description": "lines where there are exactly two words and 7 characters.", "ground_truth": "((([^A-Za-z])*\\b[A-Za-z]+\\b([^A-Za-z])*){2}&.{7})", "chatgpt_output": "^.\\s+\\S+\\s+\\S{7}$"}, {"description": "lines that have 3 words and two numbers.", "ground_truth": "(.*\\b[A-Za-z]+\\b.*){3}&(.*[0-9].*){2}", "chatgpt_output": "\\^[\\w\\s]+[\\w\\s]+\\s+[\\d]+ [\\w\\s]+ [\\d]+[\\w\\s]*$"}, {"description": "lines using words starting with 'fi'.", "ground_truth": ".*\\bfi[A-Za-z]*\\b.*", "chatgpt_output": "^fi.\\w+"}, {"description": "lines with 'buck'", "ground_truth": ".*buck.*", "chatgpt_output": "/buck./"}, {"description": "lines containing words which begin with 'c' and end with 'd'", "ground_truth": ".*\\bc[A-Za-z]*d\\b.*", "chatgpt_output": "^[c].*[d]$"}, {"description": "lines containg the number '9'.", "ground_truth": ".*9.*", "chatgpt_output": ".~\\D*[9]\\D*"}, {"description": "lines that utilize words starting with 'ni' followed by the word 'knight'", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(ni.*)).*\\bknight\\b.*", "chatgpt_output": "\\bni\\.?[[:blank:]]+knight\\b"}, {"description": "lines which begin with 'y', has a 'z' in the middle and end in a number.", "ground_truth": "y.*z.*[0-9]", "chatgpt_output": "^y..*z..*\\d$"}, {"description": "lines containing 'tal' and containing 'tel' too", "ground_truth": "(.*tal.*)&(.*tel.*)", "chatgpt_output": "/\\btal.*tel\\b/g"}, {"description": "lines that contain the 'staphyloccus aureus.'", "ground_truth": ".*staphyloccus aureus.*", "chatgpt_output": "/\\bstaphyloccus aureus\\b/g"}, {"description": "lines that use 'Jane' but not 'Janet' or '2'.", "ground_truth": "(.*Jane.*)&(~(.*(Janet|2).*))", "chatgpt_output": "^(?!\\bis(?: Janet|2)|Jane\\b)[[:<:]]+Jane[[:>:]]"}, {"description": "lines that contain words starting with 'go'.", "ground_truth": ".*\\bgo[A-Za-z]*\\b.*", "chatgpt_output": "^.(.*\\s+go.\\w+).*$"}, {"description": "lines that contain only 2 words, and, begin with the letter 'f'.", "ground_truth": "f.*&(([^A-Za-z])*\\b[A-Za-z]+\\b([^A-Za-z])*){2}", "chatgpt_output": "^[\u0444][\u0430-\u0437\u0430-\u044f\u044d\u0451\\- ]+ [\u0441\u043b\u043e\u0432\u043e] [\u0430-\u0437\u0430-\u044f\u044d\u0451\\- ]+ $"}, {"description": "lines containing only four words.", "ground_truth": "(([^A-Za-z])*\\b[A-Za-z]+\\b([^A-Za-z])*){4}", "chatgpt_output": "\\^.\\{3\\}\\s+\\{4\\}.*$"}, {"description": "lines which do not contain 'excellent'", "ground_truth": "~(.*excellent.*)", "chatgpt_output": "^(?!.*excellent).*$"}, {"description": "lines that end with 'hey'", "ground_truth": ".*hey", "chatgpt_output": "^.+(hey)$"}, {"description": "lines that have no instances of 'old' but at least one instance of 'ion'.", "ground_truth": "(~(.*old.*))&((.*ion.*){1,})", "chatgpt_output": "^(.*[ion].*[^old]).*$"}, {"description": "lines that utilize words starting with 'r'.", "ground_truth": ".*\\br[A-Za-z]*\\b.*", "chatgpt_output": "^[^\\r\\n]*(r\\w+)[^\\r\\n]*$"}, {"description": "lines using words that end with the letter 'n'", "ground_truth": ".*\\b[A-Za-z]*n\\b.*", "chatgpt_output": "/\\.*\\bn\\b/gm"}, {"description": "lines that use numbers.", "ground_truth": ".*[0-9].*", "chatgpt_output": "^.[0-9].*$ # This regex matches lines that contain at least one number anywhere in the line."}, {"description": "lines having words starting with 'fo'.", "ground_truth": ".*((\\b[A-Za-z][A-Za-z]*\\b)&(fo.*)).*", "chatgpt_output": "^.*\\bfo\\w.*"}, {"description": "lines using words that have 'ire'", "ground_truth": ".*\\b[A-Za-z]*ire[A-Za-z]*\\b.*", "chatgpt_output": "/\\b[a-z]*ire[a-z]*\\b/gi"}, {"description": "lines that only have 3 words", "ground_truth": "(([^A-Za-z])*\\b[A-Za-z]+\\b([^A-Za-z])*){3}", "chatgpt_output": "^[\\s\\w]+[\\s]+\\w+[\\s]+\\w+[\\s]+\\w+$"}, {"description": "lines that contain words starting in 's'", "ground_truth": ".*((\\b[A-Za-z][A-Za-z]*\\b)&(s.*)).*", "chatgpt_output": "^[s].\\+"}, {"description": "lines that contain text made up of more than 6 letters total.", "ground_truth": "(.*[A-Za-z].*){7,}", "chatgpt_output": "^.\\{7,}$"}, {"description": "lines that contain the letter 'a' in the middle of a word.", "ground_truth": ".*(\\b[A-Za-z]+a[A-Za-z]+\\b).*", "chatgpt_output": "/\\bis [a][^s]\\w* [is not an ideal solution as it only looks for the letter 'a' in position 2 of words. If you want to allow for the word boundary to be anywhere in the line, you can use:]/g[b] \\w*a\\w*/g"}, {"description": "lines where the letter 'b' appears exactly 4 times", "ground_truth": "([^b]*b[^b]*){4}", "chatgpt_output": "^.(.*[b]{4}.*).$"}, {"description": "lines that contain a word  starting with 'l'.", "ground_truth": ".*\\bl[A-Za-z]*\\b.*", "chatgpt_output": "^.*\\bil\\w.*"}, {"description": "lines that contain a word with five or more vowels.", "ground_truth": ".*((\\b[A-Za-z][A-Za-z]*\\b)&(.*[AEIOUaeiou].*){5}).*", "chatgpt_output": "\\b[aeiou]{5,}[aeiou]\\b # Matches words with five or more vowels."}, {"description": "lines which do not begin with an uppercase letter.", "ground_truth": "~([A-Z].*)", "chatgpt_output": "^[^A-Z].*"}, {"description": "lines which start with 'n' and end with 'y'", "ground_truth": "(n.*)&(.*y)", "chatgpt_output": "^n[^y]*$"}, {"description": "lines that contain at least two words beginging with 'y'.", "ground_truth": "(.*\\by[A-Za-z]*\\b.*){2}", "chatgpt_output": "^(.+ \\w+ Yanas\\w+ \\w+.\\1)+$"}, {"description": "lines that have a word containing the string 'ude'", "ground_truth": ".*\\b[A-Za-z]*ude[A-Za-z]*\\b.*", "chatgpt_output": "/^(.*\\bude\\b.*)/gm"}, {"description": "lines having words with 'ro'.", "ground_truth": ".*\\b[A-Za-z]*ro[A-Za-z]*\\b.*", "chatgpt_output": "^.*\\b(ro)\\w*\\b.*$"}, {"description": "lines using 4 or more words", "ground_truth": "(.*\\b[A-Za-z]+\\b.*){4,}", "chatgpt_output": "\\.{3,\\.[^\\s]+\\.[^\\s]+}"}, {"description": "lines using at least 4 'c'", "ground_truth": "(.*c.*){4,}", "chatgpt_output": "^(.*).{4}c.[.]*c.[.]*c.[.]*c.$"}, {"description": "lines starting with 'cl'", "ground_truth": "cl.*", "chatgpt_output": "^cl.\\*"}, {"description": "lines that contain 'number' written in words.", "ground_truth": ".*number.*", "chatgpt_output": "^(?!.*[0-9]).*[a-z]*[:\\s][a-z]*[h]/[o][u] [o][r][e] [z][e][r][o] [a-z]*[:]?[.?!]\\s*$"}, {"description": "lines that have at least 3 words.", "ground_truth": "(.*\\b[A-Za-z]+\\b.*){3}", "chatgpt_output": "\\s+\\w+\\s+\\w+\\s+\\w+"}, {"description": "lines which have 3 words.", "ground_truth": ".*(.*\\b[A-Za-z]+\\b.*){3}.*", "chatgpt_output": "\\.\\s+[^\\s]+\\s+[^\\s]+\\s+[^\\s]+"}, {"description": "lines utilizing the phrase 'this is it'.", "ground_truth": ".*this is it.*", "chatgpt_output": "/\\bthis is it\\b/gm"}, {"description": "lines that contain words starting with 'ba'.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(ba.*)).*", "chatgpt_output": "^[ab.{1,}a].*$"}, {"description": "lines using the vowel combination 'ou' and 'th'.", "ground_truth": "(.*ou.*)&(.*th.*)", "chatgpt_output": "~(/[^\\w]thm[ou][^\\w][^\\n]) The regex looks for the substring \"thm\" followed by the sequence \"ou\" and matches the entire line if found. If you want to match lines containing the word \"though\" instead, use \"~(/[^\\w]though[^\\w][^\\n])\" instead. Remember that regex is case sensitive by default. If you want to make it case insensitive, use a different regex flavor or add the i flag if your flavor supports it."}, {"description": "lines which contain 'rh' but do not contain the letter 'y'.", "ground_truth": "(.*rh.*)&~(.*y.*)", "chatgpt_output": "^.[^y]*.rh.[^y]*$"}, {"description": "lines that have any instance of 'ight'.", "ground_truth": ".*ight.*", "chatgpt_output": "/.\\ight./g"}, {"description": "lines using the letter sequence 'ably' followed by a word ending in 'ed'.", "ground_truth": ".*ably.*\\b[A-Za-z]*ed\\b.*", "chatgpt_output": "/\\bisably\\w+ed\\b/g"}, {"description": "lines having words ending with 'lo'.", "ground_truth": ".*\\b[A-Za-z]*lo\\b.*", "chatgpt_output": "^[^ ]+ (?=\\s*(lo|LO)$)[^ ]+$"}, {"description": "lines that feature 'c' or 'd' before words that start with capital letters.", "ground_truth": ".*(c|d).*\\b[A-Z][A-Za-z]*\\b.*", "chatgpt_output": "^[cd]\\s[A-Z][a-zA-Z0-9]*"}, {"description": "lines using 'foo' between 'car' and 'cop'", "ground_truth": ".*(car.*foo.*cop|cop.*foo.*car).*", "chatgpt_output": "/\\bcar\\s+(.*foo.*)\\s+cop\\b/g"}, {"description": "lines that list the word 'Bean'.", "ground_truth": ".*\\bBean\\b.*", "chatgpt_output": "/\\\u0431ean\\b/gi"}, {"description": "lines which have at least one word which has six or more letters.", "ground_truth": ".*\\b[A-Za-z]{6,}\\b.*", "chatgpt_output": "\\b\\w{6,}\\b(?=[\\s.\\-]*(?=\\w|$))"}, {"description": "lines containing vowels", "ground_truth": ".*[AEIOUaeiou].*", "chatgpt_output": "^.[aeiou].*$"}, {"description": "lines starting with 'sign'", "ground_truth": "sign.*", "chatgpt_output": "^sign.\\*"}, {"description": "lines that utilize words starting with 'ab'.", "ground_truth": ".*\\bab[A-Za-z]*\\b.*", "chatgpt_output": "^(?=.*\\bab\\w*).*$"}, {"description": "lines that contain numbers.", "ground_truth": ".*[0-9].*", "chatgpt_output": "^.[0-9].*$"}, {"description": "lines containing 4 words.", "ground_truth": "(.*\\b[A-Za-z]+\\b.*){4,}", "chatgpt_output": "/^[^\\s]+\\s+[^\\s]+\\s+[^\\s]+\\s+[^\\s]+/g"}, {"description": "lines that have three numbers between 'abc' and 'def'.", "ground_truth": ".*(abc.*(.*[0-9].*){3}.*def|.*def.*(.*[0-9].*){3}.*abc).*", "chatgpt_output": "/abc(\\d+)(\\d+)(\\d+)def/g"}, {"description": "lines that use 'native' and 'tribes'.", "ground_truth": "(.*native.*)&(.*tribes.*)", "chatgpt_output": "^(?=.*native).*(?:[^.]*)(tribes)[^.]*\\.$ ^or^ ^/(?=.*native).*tribes.* ["}, {"description": "lines that does not contain any vowels.", "ground_truth": "~(.*[AEIOUaeiou].*)", "chatgpt_output": "^[^aeiouAEIOU].*$"}, {"description": "lines that have 5 or more words of 3 or fewer letters.", "ground_truth": "(.*\\b[A-Za-z]{1,3}\\b.*){5,}", "chatgpt_output": "^(.\\h{1,2}[a-z][.\\h{1,2}[a-z]]{4,}(?![.\\s]|$)|[.\\n]+\\1$ ^|$((\\w{3,}\\s+\\w{3,}\\s+){4,}[\\s\\n]+|[\\s\\n]+)$"}, {"description": "lines that contain a '?' or an '!'.", "ground_truth": "(.*\\?.*)|(.*!.*)", "chatgpt_output": "^.[?!].*$"}, {"description": "lines that begin with a number", "ground_truth": "[0-9].*", "chatgpt_output": "^[0-9]+.*}"}, {"description": "lines that contain at least 2 digits.", "ground_truth": "(.*[0-9].*){2,}", "chatgpt_output": "^.+\\d{2,}$"}, {"description": "lines that use a numerical number.", "ground_truth": ".*[0-9].*", "chatgpt_output": "^[\ufffd0-9.\\-]+$"}, {"description": "lines that contain words using 'ie'", "ground_truth": ".*\\b[A-Za-z]*ie[A-Za-z]*\\b.*", "chatgpt_output": "\\b[^blank]ie[^blank][^blank]\\b"}, {"description": "lines that contain 'fast' and contain '2'", "ground_truth": "(.*fast.*)&(.*2.*)", "chatgpt_output": "^.(.*\\bfast.*.*\\d[0-9]=[\\s]+\\d[0-9]=\\d[0-9]2.[^]*)$"}, {"description": "lines where there is only one word.", "ground_truth": "[^A-Za-z]*\\b[A-Za-z]+\\b[^A-Za-z]*", "chatgpt_output": "^[\\w]+$"}, {"description": "lines containing only a letter", "ground_truth": "[A-Za-z]", "chatgpt_output": "^[a-zA-Z]+$"}, {"description": "lines containing the word 'country'", "ground_truth": ".*\\bcountry\\b.*", "chatgpt_output": "/\\bcountry\\b/g"}, {"description": "lines that have words containing 'ei'", "ground_truth": ".*\\b[A-Za-z]*ei[A-Za-z]*\\b.*", "chatgpt_output": "^[^\"]*(\\w+ei\\w+)[^\"]*$ # Matches lines containing words with the substring \"ei\""}, {"description": "lines that contain words ending in 'os'", "ground_truth": ".*\\b[A-Za-z]*os\\b.*", "chatgpt_output": "^.[^.]+\\b(os)$"}, {"description": "lines that have words ending in 'ing'.", "ground_truth": ".*\\b[A-Za-z]*ing\\b.*", "chatgpt_output": "^.[^.]*[^-\\s]inging[$]"}, {"description": "lines that include both 'cake' and 'candles'.", "ground_truth": "(.*cake.*)&(.*candles.*)", "chatgpt_output": "^(.*\\bcake.*\\bcandles.*).*$"}, {"description": "lines using 1 number and 2 letters", "ground_truth": ".*(.*[0-9].*)&(.*[A-Za-z].*){2}.*", "chatgpt_output": "^.[0-9][a-z]{2}.*$"}, {"description": "lines using five letter words.", "ground_truth": ".*\\b[A-Za-z]{5}\\b.*", "chatgpt_output": "\\.{4}[a-z]{5}\\."}, {"description": "lines containing 'sing' or 'sung'", "ground_truth": ".*(sing|sung).*", "chatgpt_output": "^.(?=.*sing|.*sung).*$"}, {"description": "lines using 6 instances of 'fu'", "ground_truth": ".*(.*fu.*){6}.*", "chatgpt_output": "^.*(fu{6}).*$"}, {"description": "lines that have at least 6 characters", "ground_truth": ".{6,}", "chatgpt_output": "^.\\{6,\\}$"}, {"description": "lines that have six letter words ending in 'th'.", "ground_truth": ".*\\b[A-Za-z]{4}th\\b.*", "chatgpt_output": "\\b\\w{6}\\b[cht]\\.?$"}, {"description": "lines containing the word 'pray' at the end.", "ground_truth": ".*\\bpray", "chatgpt_output": "^.+\\ pray$"}, {"description": "lines that contain 5 numbers and 2 words that contain 'ly'.", "ground_truth": ".*(.*[0-9].*){5}&(.*\\b[A-Za-z]*ly[A-Za-z]*\\b.*){2}.*", "chatgpt_output": "^(.\\w+ \\w+[idy]\\w+ \\d+ \\w+ [ily]\\w+ \\d+ \\w+ [ily]\\w+\\s+.\\w+ \\d+ \\w+[idy]\\w+.\\s+.[^.\\n]$"}, {"description": "lines that utilize only three words", "ground_truth": "(([^A-Za-z])*\\b[A-Za-z]+\\b([^A-Za-z])*){3}", "chatgpt_output": "^[\\s\\S]+\\s+[\\w\\-][\\s\\S]+[\\s\\S]+\\s+[\\w\\-][\\s\\S]+[\\s\\S]$"}, {"description": "lines using 'Bill' or 'bill'", "ground_truth": ".*(B|b)ill.*", "chatgpt_output": "/\\Bill|^[bB]ill/g"}, {"description": "lines that have no vowels.", "ground_truth": "~(.*[AEIOUaeiou].*)", "chatgpt_output": "^[bcdpgh rmtfldpqwxz]+$"}, {"description": "lines that have a number in them", "ground_truth": ".*[0-9].*", "chatgpt_output": "^.[0-9].*$"}, {"description": "lines that contain 7 or more words", "ground_truth": "(.*\\b[A-Za-z]+\\b.*){7}", "chatgpt_output": "^.\\s+[\\w\\s]{7,}[\\w\\s]+\\.$"}, {"description": "lines using words starting with 'be'.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(be.*)).*", "chatgpt_output": "^[^:\\n]+be[^:\\n]+"}, {"description": "lines that use words ending with 'at'.", "ground_truth": ".*\\b[A-Za-z]*at\\b.*", "chatgpt_output": "^.[^.]*(at)$"}, {"description": "lines which mention 'Pat' with the word 'turkey'.", "ground_truth": ".*(.*Pat.*)&(.*\\bturkey\\b.*).*", "chatgpt_output": "/\\bPat\\s+ turkey\\b/gi"}, {"description": "lines that have a number, but only if it is followed by 'ABC'", "ground_truth": ".*[0-9].*ABC.*", "chatgpt_output": "^(.*[0-9]+\\s*ABC).*\\r?$"}, {"description": "lines that contain two words that have two letters.", "ground_truth": "(.*\\b[A-Za-z]{2}\\b.*){2}", "chatgpt_output": "\\b([a-z]{2}[^\\s] [a-z]{2}[^\\s])\\b"}, {"description": "lines that end in 'y' and begins in 'a'.", "ground_truth": "a.*y", "chatgpt_output": "^[axy]$"}, {"description": "lines that match to the text 'I went into'.", "ground_truth": ".*I went into.*", "chatgpt_output": "^I\\s+went\\s+into$"}, {"description": "lines which end with 'hula'", "ground_truth": ".*hula", "chatgpt_output": "^.[^hula]*(hula)$"}, {"description": "lines that begins with the word 'total'.", "ground_truth": "total\\b.*", "chatgpt_output": "^total.*"}, {"description": "lines using the word 'God'.", "ground_truth": ".*(.*\\bGod\\b.*).*", "chatgpt_output": "/\\bgod\\b/.+\"/gmi"}, {"description": "lines that utilize words starting with 'bu'.", "ground_truth": ".*(([A-Za-z]+)&(\\bbu.*\\b)).*", "chatgpt_output": "^bu\\.+\\s"}, {"description": "lines that contain 'Freddie Mercury' and contain 'AIDS'.", "ground_truth": "(.*Freddie Mercury.*)&(.*AIDS.*)", "chatgpt_output": "/(\\.*.)Freddie Mercury(\\.*.)AIDS(\\.*.)/gmic"}, {"description": "lines that are composed of 5 words or less where at least one word begins with the letter 'k'.", "ground_truth": "(([^A-Za-z]*\\b[A-Za-z]+\\b[^A-Za-z]*){0,5})&(.*\\bk[A-Za-z]*\\b.*)", "chatgpt_output": "\\^([kle][\\w\\s]{1,4}[\\w]|[.\\W]+\\1[ \\1]{0,3}[\\w]{1,4}[ \\1]{0,2}\"[^\"]{1,4}\\1|\\1\\h{1,5}|[^ ]*\\h{1,5}[ \\1])\\h*(?=\\h*(?=\\Z|[.\\n]))"}, {"description": "lines that contain three words that start with the letter 'Y'.", "ground_truth": "(.*\\bY[A-Za-z]*\\b.*){3}", "chatgpt_output": "^(.*\\BY\\w+\\s+[^-][\\w]\\s+\\BY\\w+\\s+\\BY\\w.*)$"}, {"description": "lines that contain a 3 letter word and a 2 letter word.", "ground_truth": ".*(.*\\b[A-Za-z]{3}\\b.*)&(.*\\b[A-Za-z]{2}\\b.*).*", "chatgpt_output": "^(.\\w{3}\\.\\s.*\\.\\w{2})"}, {"description": "lines that contain a word starting with 'a' and ending with 'a'", "ground_truth": ".*\\ba([A-Za-z]*a)?\\b.*", "chatgpt_output": "\\b[aA]\\w*[aA]\\b (This regex pattern matches words that start and end with the letter 'a' (\\b is a word boundary marker))"}, {"description": "lines that start with words containing 'w'.", "ground_truth": "\\b[A-Za-z]*w[A-Za-z]*\\b.*", "chatgpt_output": "^[walan\\-w].*"}, {"description": "lines that use the number '33'.", "ground_truth": ".*33.*", "chatgpt_output": "^.*{3}3[0-9]*$"}, {"description": "lines which start with 'alpha'", "ground_truth": "alpha.*", "chatgpt_output": "^alpha.+"}, {"description": "lines that have only two words in them.", "ground_truth": "(([^A-Za-z])*\\b[A-Za-z]+\\b([^A-Za-z])*){2}", "chatgpt_output": "^.\\s+[^-][^\\s]+\\s+[^-][^\\s]+$"}, {"description": "lines that contain 4 or more 'b'", "ground_truth": "(.*b.*){4}", "chatgpt_output": "^.(b{4,}).*$"}, {"description": "lines containing words using the letters 'ers'.", "ground_truth": ".*\\b[A-Za-z]*ers[A-Za-z]*\\b.*", "chatgpt_output": "/\\b[wernm]\\h*\\w{1,2}ers\\w*\\h*\\b/g"}, {"description": "lines which have instances of 'tch'.", "ground_truth": ".*tch.*", "chatgpt_output": "/tch/g"}, {"description": "lines using the string 'gue'", "ground_truth": ".*gue.*", "chatgpt_output": "/gue/.+/gm"}, {"description": "lines that have 'aba' between 'bcb' and 'cbc'", "ground_truth": ".*bcb.*aba.*cbc.*|.*cbc.*aba.*bcb.*", "chatgpt_output": "^(.*bcb.{3}aba.{3}cbc.*)$"}, {"description": "lines containing the country name 'New Zealand'.", "ground_truth": ".*New Zealand.*", "chatgpt_output": "/\\New Zealand/"}, {"description": "lines which contain both 'i' and 'e' but no instances of 'u'.", "ground_truth": "(.*i.*)&(.*e.*)&(~(.*u.*))", "chatgpt_output": "^(.*[ae]{2,}.*[^u][ae]{2,}.*)$"}, {"description": "lines that contain a number and contain a 3 letter word.", "ground_truth": "(.*\\b[A-Za-z]{3}\\b.*)&(.*[0-9].*)", "chatgpt_output": "^(.*[A-Za-z]{3}\\d[A-Za-z0-9\\s]*[A-Za-z]{3}[0-9].*$)"}, {"description": "lines which start with 'start'", "ground_truth": "start.*", "chatgpt_output": "^start"}, {"description": "lines using 'ox' before 'en'", "ground_truth": ".*ox.*en.*", "chatgpt_output": "^(.*ox.*en.*) $"}, {"description": "lines containing 'l' before 'y'", "ground_truth": ".*l.*y.*", "chatgpt_output": "^.[l].*y.*$"}, {"description": "lines that begin with 'a' and end with 'z'", "ground_truth": "a.*z", "chatgpt_output": "^a.[z]$"}, {"description": "lines containing 'lake' and containing the word 'house'", "ground_truth": ".*lake.*&(.*\\bhouse\\b.*)", "chatgpt_output": "/\\blake\\.+\\bhouse\\b/g"}, {"description": "lines using 5 or more words.", "ground_truth": "(.*\\b[A-Za-z]+\\b.*){5}", "chatgpt_output": "\\.{4}(\\s\\S+){4,}"}, {"description": "lines that contain words with at least 3 vowels", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(.*[AEIOUaeiou].*){3}).*", "chatgpt_output": "`/(.+)[aeiou]{3}[aeiou].+/g`"}, {"description": "lines that have 'eak' after 'red'", "ground_truth": ".*red.*eak.*", "chatgpt_output": "^(red.\\ K|eak)$"}, {"description": "lines containing the word 'preordained'.", "ground_truth": ".*\\bpreordained\\b.*", "chatgpt_output": "/\\bpreordained\\b/g"}, {"description": "lines that feature the word 'moot', and at least 3 words of 6 letters or more.", "ground_truth": "(.*\\bmoot\\b.*)&(.*\\b[A-Za-z]{6,}\\b.*){3,}", "chatgpt_output": "^(.*\\bmoot\\b\\s+(_[a-z]\\w{5}[\\_ ][a-z]\\w{5}\\s+){3,}[^.\\n]*)$"}, {"description": "lines using 2 instances of 'irl'", "ground_truth": ".*(.*irl.*){2}.*", "chatgpt_output": "^.*(irl)[^rl]*(irl).*$"}, {"description": "lines that contain 4 or more capital letters", "ground_truth": ".*(.*[A-Z].*){4}.*", "chatgpt_output": "^(.*[A-Z]{4,}.*).*$"}, {"description": "lines that end with 'after'", "ground_truth": ".*after", "chatgpt_output": "^.(.* after)$"}, {"description": "lines that contain four letter words.", "ground_truth": ".*\\b[A-Za-z]{4}\\b.*", "chatgpt_output": "\\b[a-z]{4}\\b"}, {"description": "lines that start with 'iffl'", "ground_truth": "iffl.*", "chatgpt_output": "^iffl"}, {"description": "lines that contain 'on'", "ground_truth": ".*on.*", "chatgpt_output": "/on/.+/gm"}, {"description": "lines that begin with a number and end with 'street' or 'avenue'.", "ground_truth": "[0-9].*(street|avenue)", "chatgpt_output": "^[0-9]+(?!.[^.]\\.(?!street|avenue))[.\\s]*(?:street|avenue)$"}, {"description": "lines with vowels", "ground_truth": ".*[AEIOUaeioui].*", "chatgpt_output": "/\\. [a-eiouA-EIOU]\\*./g for multiline strings or /[a-eiouA-EIOU]/g for single line strings."}, {"description": "lines using 'lives', 'lifes', or 'life'", "ground_truth": ".*li(ves|fes|fe).*", "chatgpt_output": "/[lL]ife[sS]?/g"}, {"description": "lines that contain the text 'then I said'.", "ground_truth": ".*then I said.*", "chatgpt_output": "/ ^.*(then I said).* $/gm"}, {"description": "lines that contain the word 'movie' in them.", "ground_truth": ".*\\bmovie\\b.*", "chatgpt_output": "/\\bmovie\\b/g (This regex pattern will match the word 'movie' with word boundaries)"}, {"description": "lines that have less than 6 words but more than 3 words.", "ground_truth": "([^A-Za-z]*\\b[A-Za-z]+\\b[^A-Za-z]*){0,5}&(.*\\b[A-Za-z]+\\b.*){4,}", "chatgpt_output": "\\^.\\{3,5}\\s+\\S+\\{4,}"}, {"description": "lines using at least 2 instances of 'ly'", "ground_truth": "(.*ly.*){2,}", "chatgpt_output": "^(.*(\\ Wales|fully|only|just|really|often|very|seriously|quite|seldom|really|often|extremely|particularly|completely|totally)\\ 1stly\\.\\s+.*\\ \\1stly|.*\\ 2ndly\\.\\s+.*\\ 2ndly).*$"}, {"description": "lines containing words that start with 'fa'", "ground_truth": ".*\\bfa[A-Za-z]*\\b.*", "chatgpt_output": "^fa\\w+(\\s.*|$)"}, {"description": "lines containing 'GHF', but not 'JFK'", "ground_truth": "(.*GHF.*)&(~(.*JFK.*))", "chatgpt_output": "^.(GHF)[^JFK].*$"}, {"description": "lines which have words beginning with 'H'.", "ground_truth": ".*\\bH[A-Za-z]*\\b.*", "chatgpt_output": "^[H][a-zA-Z0-9\\s]*"}, {"description": "lines where there is at least one word in which 'e' follows 'i'", "ground_truth": ".*((\\b[A-Za-z][A-Za-z]*\\b)&(.*i.*e.*)).*", "chatgpt_output": "`\\b(|\\W)i[aeiou](?=\\W[aeiou]?e\\b)[a-z]+`"}, {"description": "lines having words ending with 'te'.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(.*te)).*", "chatgpt_output": "^.[^.]+\\b(te)$"}, {"description": "lines that contain words that end in 'y' that do not begin with 'w'", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(.*y)&(~(w.*))).*", "chatgpt_output": "`^(?!w).*[^ ]+y$`"}, {"description": "lines that contain 5 or more words.", "ground_truth": ".*(.*\\b[A-Za-z][A-Za-z]*\\b.*){5}.*", "chatgpt_output": "\\.+\\s+\\S+\\s+\\S+(\\s+\\S+){4,}"}, {"description": "lines that contain words ending in 'az'", "ground_truth": ".*\\b[A-Za-z]*az\\b.*", "chatgpt_output": "^(.*\\bau|azz\\b)"}, {"description": "lines that contain any numbers.", "ground_truth": ".*[0-9].*", "chatgpt_output": "^.[0-9].*$"}, {"description": "lines utilizing the number '1'.", "ground_truth": ".*1.*", "chatgpt_output": "^.[1].*$"}, {"description": "lines that use the word 'white'", "ground_truth": ".*\\bwhite\\b.*", "chatgpt_output": "/\\bwhite\\b/g"}, {"description": "lines which do not have numbers.", "ground_truth": "~(.*[0-9].*)", "chatgpt_output": "^[^0-9.\\-]+$"}, {"description": "lines that end with numbers.", "ground_truth": ".*[0-9]", "chatgpt_output": "/\\.[\\d]+$/"}, {"description": "lines containing words that  have 5 letters in them.", "ground_truth": ".*\\b[A-Za-z]{5}\\b.*", "chatgpt_output": "^.\\h*([b-z]\\1{4})\\h*$ # This regex matches lines containing words with exactly five letters consisting only of lowercase alphabets."}, {"description": "lines with instances of 'at'.", "ground_truth": ".*at.*", "chatgpt_output": "/at/g"}, {"description": "lines which contain 'x' and 'y'.", "ground_truth": "(.*x.*)&(.*y.*)", "chatgpt_output": "/[\\w.]+\\xb7[xy]\\wb[\\w.]+\\/g"}, {"description": "lines that do not use the word 'the'", "ground_truth": "~(.*\\bthe\\b.*)", "chatgpt_output": "^(?!.*\\bthe\\b).*$"}, {"description": "lines that contain either of 'y' or 'z'", "ground_truth": ".*(y|z).*", "chatgpt_output": "^.[yz].*$"}, {"description": "lines using three letter words.", "ground_truth": ".*\\b[A-Za-z]{3}\\b.*", "chatgpt_output": "\\b\\w{3}\\b"}, {"description": "lines containing the word 'laughing'.", "ground_truth": ".*\\blaughing\\b.*", "chatgpt_output": "/\\vlaughing\\/.+/gm"}, {"description": "lines containing the word 'trade'.", "ground_truth": ".*\\btrade\\b.*", "chatgpt_output": "/\\btrade\\b/g"}, {"description": "lines where the word 'and' appears between the words 'sand' and 'tide'", "ground_truth": ".*\\bsand\\b.*\\band\\b.*\\btide\\b.*|.*\\btide\\b.*\\band\\b.*\\bsand\\b.*", "chatgpt_output": "`/(sand\\s+and\\s+tide)/`"}, {"description": "lines with numbers", "ground_truth": ".*[0-9].*", "chatgpt_output": "^.[0-9]+.*$"}, {"description": "lines that contain a period after a number, but only if before 'ABC'.", "ground_truth": ".*[0-9].*\\..*ABC.*", "chatgpt_output": "^([0-9]\\.([^ABC]|$)[ -~]*ABC)"}, {"description": "lines that contain at least 2 vowels in a word.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(.*[AEIOUaeiou].*){2}).*", "chatgpt_output": "\\.( [aeiouAEIOU]{2,}[aeiouAEIOU]* ).*"}, {"description": "lines that have two words containing 5 or more letters.", "ground_truth": "(.*\\b[A-Za-z]{5,}\\b.*){2}", "chatgpt_output": "^(.+\\s+[a-z\u0430-\u044f\u0435-\u0439\u0438-\u0439\u043e-\u0443-\u0443\u0435-\u044c\u044d\u044d\u044e\u044f]{5,}\\s+[a-z\u0430-\u044f\u0435-\u0439\u0438-\u0439\u043e-\u0443-\u0443\u0435-\u044c\u044d\u044d\u044e\u044f]{5,}.*)$"}, {"description": "lines using 'life' or 'lives'", "ground_truth": ".*(life|lives).*", "chatgpt_output": "/\\blife|\\blives\\b/g"}, {"description": "lines that have 4 characters", "ground_truth": ".{4}", "chatgpt_output": "^.\\{4\\}$"}, {"description": "lines that end in '!' but do not contain 'surprise'.", "ground_truth": "(.*\\!)&(~(.*surprise.*))", "chatgpt_output": "^(.*[^!]*).*![^surprise]$"}, {"description": "lines with three numbers and the word 'kitten'.", "ground_truth": "(.*[0-9].*){3}&(.*\\bkitten\\b.*).*", "chatgpt_output": "^(.*\\d\\.\\d\\.\\d\\s+kitten).*$"}, {"description": "lines that have no letters.", "ground_truth": "~(.*[A-Za-z].*)", "chatgpt_output": "^[^a-zA-Z]*$"}, {"description": "lines using 'art' or 'led'", "ground_truth": ".*(art|led).*", "chatgpt_output": "^.[a-t-z].*{1,}art|.[a-t-z].*{1,}led$"}, {"description": "lines containing the word 'house'.", "ground_truth": ".*\\bhouse\\b.*", "chatgpt_output": "/^.[^ ]+ house [.\\n]/"}, {"description": "lines that utilize the number '7'.", "ground_truth": ".*7.*", "chatgpt_output": "^.*\\d=\\d+\\s*(7|0\\d|\\d7)\\s*.$"}, {"description": "lines using 3 instances of 'b'", "ground_truth": ".*(.*b.*){3}.*", "chatgpt_output": "^.[b].[b].[b].*$"}, {"description": "lines that include words with 'ra'.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(.*ra.*)).*", "chatgpt_output": "/\\bw(?:ra\\w+|\\bra\\b)(?=\\s|\\z)/g"}, {"description": "lines having words ending with 'oo'.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(.*oo)).*", "chatgpt_output": "^.[^.]*(oo)$"}, {"description": "lines that contain 3 words.", "ground_truth": "(.*\\b[A-Za-z]+\\b.*){3}", "chatgpt_output": "^[\\w\\s]+[\\w\\s]+\\s+[\\w\\s]+"}, {"description": "lines using 7 'f'", "ground_truth": "(.*f.*){7}", "chatgpt_output": "^.{7}f.{7}|^f{7}$"}, {"description": "lines that contain the word 'bar'", "ground_truth": ".*\\bbar\\b.*", "chatgpt_output": "/\\bbar\\b/g"}, {"description": "lines that contain 'wig' after 'er' or 'let'.", "ground_truth": ".*(er|let).*wig.*", "chatgpt_output": "/(er|let).*wig/g"}, {"description": "lines that contain words using the letters 'ant'", "ground_truth": ".*\\b[A-Za-z]*ant[A-Za-z]*\\b.*", "chatgpt_output": "\\b(\\w*ant\\w*).*\\b # Matches lines containing words with the letters 'ant' in them (case insensitive). The \\b ensures matching occurs at a word boundary."}, {"description": "lines that ends with 'ABC' and contain two numbers.", "ground_truth": "(.*[0-9].*){2}ABC", "chatgpt_output": "^.*\\d+\\s+\\d+\\s+ABC$"}, {"description": "lines containing only one word", "ground_truth": "([^A-Za-z])*\\b[A-Za-z]+\\b([^A-Za-z])*", "chatgpt_output": "^[A-Za-z]+ \\1*$"}, {"description": "lines that contain the text, 'New York'.", "ground_truth": ".*New York.*", "chatgpt_output": "/\\New York\\/"}, {"description": "lines using the word 'hurry' followed by the word 'up'.", "ground_truth": "(.*\\bhurry\\b.*)(.*\\bup\\b.*)", "chatgpt_output": "/\\bhurry\\s+up\\b/g"}, {"description": "lines which do have numbers.", "ground_truth": ".*[0-9].*", "chatgpt_output": "^(.*[0-9].*).*$"}, {"description": "lines that utilize the '$' symbol.", "ground_truth": ".*(.*\\$.*)", "chatgpt_output": "/\\$.*/g"}, {"description": "lines where there are three characters between instances of 'ABC' and 'WEX'", "ground_truth": ".*ABC.*.{3}.*WEX.*|.*WEX.*.{3}.*ABC.*", "chatgpt_output": "~(?:ABC.[^ABC]{3}WEX)+~"}, {"description": "lines containing 'oo' and 'at'.", "ground_truth": "(.*oo.*)&(.*at.*)", "chatgpt_output": "^.*(oo.*at).*\\$"}, {"description": "lines that have more than 5 words ending with a 'c.'", "ground_truth": "(.*\\b[A-Za-z]*c\\b.*){6,}", "chatgpt_output": "^(.*[\\w ]+ \\1_[bc.]{3} [\\w ]+ [\\w ]+ [\\w ]+ [\\w ]+ .*)$"}, {"description": "lines containing 'left' and also containing 'right'", "ground_truth": "(.*left.*)&(.*right.*)", "chatgpt_output": "^(.*left.*right.*).$"}, {"description": "lines that contain 'dre' or 'ber'", "ground_truth": ".*(dre|ber).*", "chatgpt_output": "^.(dre|ber).*$"}, {"description": "lines using a 3 letter sequence starting with 'n'", "ground_truth": ".*n[A-Za-z]{2}.*", "chatgpt_output": "^[n][a-zA-Z]{2}[\\s\\S]*$"}, {"description": "lines that start with the letter 'c'", "ground_truth": "c.*", "chatgpt_output": "^[c].*"}, {"description": "lines with 'un'", "ground_truth": ".*un.*", "chatgpt_output": "^.*(un).*$"}, {"description": "lines that have 'oe'.", "ground_truth": ".*oe.*", "chatgpt_output": "/oe/g"}, {"description": "lines that do not contain a number.", "ground_truth": "~(.*[0-9].*)", "chatgpt_output": "^[^\\d].*$ # This regular expression will match any line that does not contain any digits at all."}, {"description": "lines containing 'ch' or 'dh'", "ground_truth": ".*(ch|dh).*", "chatgpt_output": "^.[ch|dh].*$"}, {"description": "lines that contain 'tran' and the word 'nguyen'.", "ground_truth": "(.*tran.*)&(.*\\bnguyen\\b.*)", "chatgpt_output": "^.*tran\\s+nguyen.*$"}, {"description": "lines containing '8' and containing a '3' as well.", "ground_truth": ".*(.*8.*)&(.*3.*).*", "chatgpt_output": "^.*8.\\ hack here .*3.$"}, {"description": "lines that have the letter 'X' at the end of a word.", "ground_truth": ".*\\b[A-Za-z]*X\\b.*", "chatgpt_output": "/\\bm[a-z]*X\\b/g"}, {"description": "lines using at least 4 characters", "ground_truth": ".*.{4}.*", "chatgpt_output": "^.\\{4,}$"}, {"description": "lines that have the word 'laugh', and at least 1 number.", "ground_truth": "(.*\\blaugh\\b.*)&(.*[0-9].*)", "chatgpt_output": "/\\wlaugh\\d./gm"}, {"description": "lines that contain the words 'the' and  'cold'.", "ground_truth": "(.*\\bthe\\b.*)&(.*\\bcold\\b.*)", "chatgpt_output": "/\\bthe\\s+cold\\b/g"}, {"description": "lines using 'pid' immediately after 'stu'", "ground_truth": ".*stupid.*", "chatgpt_output": "^stu\\s+pid:\\d+"}, {"description": "lines that start with 'news'", "ground_truth": "news.*", "chatgpt_output": "^news.*"}, {"description": "lines in which there are words that begin with 'th'.", "ground_truth": ".*\\bth[A-Za-z]*\\b.*", "chatgpt_output": "^(.*\\bth\\w.*\\s)*(?=\\s|$)"}, {"description": "lines that begin with the word 'Topo'.", "ground_truth": "\\bTopo\\b.*", "chatgpt_output": "^Topo\\."}, {"description": "lines that contain words using aught in them.", "ground_truth": ".*(.*\\b[A-Za-z]*aught[A-Za-z]*\\b.*).*", "chatgpt_output": "~\\baughed\\w*"}, {"description": "lines that use 'mo' followed by words starting with 'fo'", "ground_truth": ".*mo.*((\\b[A-Za-z]+\\b)&(fo.*)).*", "chatgpt_output": "^.[m]{1}o[ \\t.]*(fo\\w+)"}, {"description": "lines utilizing the number '2'.", "ground_truth": ".*2.*", "chatgpt_output": "^.*\\d\\ equals \\d\\ 2 .*$"}, {"description": "lines that contain at least one vowel in each word.", "ground_truth": "~(.*((\\b[A-Za-z]+\\b)&([^AEIOUaeiou]*)).*)", "chatgpt_output": "\\b[aeiouAEIOU]\\w+\\b(?=(?: \\w{1,}[aeiouAEIOU])+\\b)[^.\\n]+\\R #MATCHES Lines with at least one vowel in every word. This pattern matches lines containing at least one word that has at least one vowel, separated by whitespace, until the end of the line."}, {"description": "lines ending with 'fer'", "ground_truth": ".*fer", "chatgpt_output": "^.*(fer)$"}, {"description": "lines composed of at least 3 words of 4 or more letters", "ground_truth": "(.*\\b[A-Za-z]{4,}\\b.*){3,}", "chatgpt_output": "^[\\w\\s]\\+[\\w\\s]+\\s+[\\w\\s]{4,}[\\w\\s]+\\s+[\\w\\s]{4,}[\\w\\s]+\\.?$"}, {"description": "lines that have at least five words that start with a vowel.", "ground_truth": "(.*\\b[AEIOUaeiou][A-Za-z]*\\b.*){5}", "chatgpt_output": "^([aeiou]\\w{4,}\\s+[aeiou]\\w{4,}\\s{0,}[aeiou]\\w{4,}\\s{0,}[aeiou]\\w{4,}\\s{0,}[aeiou]\\w{4,}\\s{0,}[^[\\s][aeiou]\\w{4,}|[^[\\s]]+[.!?])$ If the regex looks too complex, you could simplify it by checking if each word has at least one vowel, then check the number of words on each line. However, the provided regex pattern checks if there are exactly five words with five vowels each, which might not be what you intended but is consistent with the description."}, {"description": "lines that use the '@' symbol", "ground_truth": ".*\\@.*", "chatgpt_output": "^.+\\@.+$"}, {"description": "lines that have three words of five letters each.", "ground_truth": "(.*\\b[A-Za-z]{5}\\b.*){3}", "chatgpt_output": "^(\\w{5}\\s){3}\\w{5}$"}, {"description": "lines that begin with the word 'the'.", "ground_truth": "the\\b.*", "chatgpt_output": "^the\\W.*"}, {"description": "lines of 6 characters that end with the letter 's'.", "ground_truth": ".{5}s", "chatgpt_output": "^.\\{5\\} $[chs] $"}, {"description": "lines that contain the word 'tron' but not 'bot'.", "ground_truth": "(.*tron.*)&(~(.*bot.*))", "chatgpt_output": "^(?!.*bot).*tron"}, {"description": "lines that have 'efg' followed by the word 'car'", "ground_truth": ".*efg.*\\bcar\\b.*", "chatgpt_output": "^.(?=.*efg).*(car)$"}, {"description": "lines that contain words starting with the letter 'g'", "ground_truth": ".*\\bg[A-Za-z]*\\b.*", "chatgpt_output": "^[bg].*\\s+\\w+"}, {"description": "lines that contain 5 or less words that have 4 or more letters where one of those letters is an 'a'.", "ground_truth": "([^A-Za-z]*((\\b[A-Za-z]+\\b)&([A-Za-z]{4,})&(.*a.*))[^A-Za-z]*){0,5}", "chatgpt_output": "^([\\w']{1,4}[a][\\w']{1,3}|[\\w']{5,}){4,}(?=\\.|\\Z)"}, {"description": "lines that contain words starting with 'da'.", "ground_truth": ".*\\bda[A-Za-z]*\\b.*", "chatgpt_output": "^[[:<space:]]*(da\\w.*)$"}, {"description": "lines that have the numbers '12345' and '54321'.", "ground_truth": "(.*12345.*)&(.*54321.*)", "chatgpt_output": "^(.*[12345].*[54321].*).*$"}, {"description": "lines that have words that start with 'b'.", "ground_truth": ".*\\bb[A-Za-z]*\\b.*", "chatgpt_output": "^(\\vb[w]\\S*).*"}, {"description": "lines that contain at least one word without any vowels.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(~(.*[AEIOUaeiou].*))).*", "chatgpt_output": "^[^aeiouAEIOU ]+\\S+[^aeiouAEIOU ]+\\b"}, {"description": "2 letter lines", "ground_truth": "[A-Za-z]{2}", "chatgpt_output": "^.[_.]*[.]{1}[._]?[a-z]{2}$"}, {"description": "lines using words that end with a vowel.", "ground_truth": ".*\\b[A-Za-z]*[aeiouAEIOU]\\b.*", "chatgpt_output": "\\b[aegiomu]\rb(?=\\W|$)"}, {"description": "lines that have words ending with 'as'.", "ground_truth": ".*((\\b.*as\\b)&([A-Za-z]+)).*", "chatgpt_output": "^(\\S.*\\s)[as]{2}$"}, {"description": "lines using at least 5 characters", "ground_truth": ".*.{5}.*", "chatgpt_output": "^.\\{5,}$"}, {"description": "lines where numbers exist only after a sequence of 'ABC' and 'XYZ'", "ground_truth": "([^0-9]*)|((([^0-9]*)&(.*ABC.*)&(.*XYZ.*)).*)", "chatgpt_output": "^(ABC|XYZ).*\\d+"}, {"description": "lines with 'bit' and not 'ch'.", "ground_truth": "(.*bit.*)&(~(.*ch.*))", "chatgpt_output": "^.*bit(?!\\.ch).*$"}, {"description": "lines which have 'ing' and 'out' but not 'sh' or 'cl'.", "ground_truth": "((.*ing.*)&(.*out.*)&(~(.*(sh|cl).*)))", "chatgpt_output": "^(.*[(]?(?:[b-df-hj-nr-tv-z]|[l])[ing](?![sh|cl])[out].*)$"}, {"description": "lines that start with 'A' or An", "ground_truth": "A.*|An.*", "chatgpt_output": "^[Aa]\\."}, {"description": "lines using more than 5 characters", "ground_truth": ".*.{6,}.*", "chatgpt_output": "^.\\{6,}$"}, {"description": "lines which contain multiple quoted words.", "ground_truth": "(.*\\'[A-Za-z]+\\'.*){2,}", "chatgpt_output": "\\.(?\":\"[^\"]+)|[^\"]+*(?=[\\r\\n\"])[^\"]+*\\2"}, {"description": "lines that contain the word 'Kelly' but do not contain the word 'Chris'.", "ground_truth": "(.*\\bKelly\\b.*)&(~(.*\\bChris\\b.*))", "chatgpt_output": "^(?!.*Chris).*\\ Kelly"}, {"description": "lines that only contain vowels.", "ground_truth": "[AEIOUaeiou]*", "chatgpt_output": "^[aeiouAEIOU]*$"}, {"description": "lines that have words ending in 'ing' or 'est'.", "ground_truth": ".*\\b[A-Za-z]*(ing|est)\\b.*", "chatgpt_output": "^(.*[\\w]+\\b(?:ing|est)\\b.*)$"}, {"description": "lines with 'Quasi' as a stand alone word.", "ground_truth": ".*\\bQuasi\\b.*", "chatgpt_output": "/Quasi\\s*(?![0-9])/g"}, {"description": "lines containing the word 'tag'.", "ground_truth": ".*\\btag\\b.*", "chatgpt_output": "/\\btag\\b./gm (This will match the word 'tag' only, not tagged words like 'tagged' or 'attributes'.)"}, {"description": "lines containing both letters and numbers, but no capitals.", "ground_truth": "(.*[A-Za-z].*)&(.*[0-9].*)&(~(.*[A-Z].*))", "chatgpt_output": "^[a-z0-9.]+$"}, {"description": "lines using at least two numbers, 'aby', and 'oz'.", "ground_truth": "(.*[0-9].*){2}&(.*aby.*)&(.*oz.*)", "chatgpt_output": "^(.*[0-9]{2,}.*abya.*oz.*.)$"}, {"description": "lines that utilize the number '1'", "ground_truth": ".*1.*", "chatgpt_output": "~(.*\\d==1.*|\\bd1\\b)"}, {"description": "lines containing the letter 'z' but not the letter 'q'.", "ground_truth": "(.*z.*)&(~(.*q.*))", "chatgpt_output": "^.[^q].*z.$"}, {"description": "lines containing 3 letter words starting with 'z'", "ground_truth": ".*\\bz[A-Za-z]{2}\\b.*", "chatgpt_output": "^.[z][a-z]{2}$"}, {"description": "lines using a word starting with a vowel and ending with 'y'", "ground_truth": ".*\\b[AEIOUaeiou][A-Za-z]*y\\b.*", "chatgpt_output": "^[aeiou][^y]*y$"}, {"description": "lines that use words ending in 'g'", "ground_truth": ".*((.*g)&(\\b[A-Za-z][A-Za-z]*\\b)).*", "chatgpt_output": "^.[^g]*g$"}, {"description": "lines with words matching the word 'fur'.", "ground_truth": ".*\\bfur\\b.*", "chatgpt_output": "^.*\\s+(fur)\\s.*$ # This regex looks for the word 'fur' with optional whitespace before and after."}, {"description": "lines that start with 'an'", "ground_truth": "an.*", "chatgpt_output": "^an.*"}, {"description": "lines utilizing words with 'be'.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(.*be.*)).*", "chatgpt_output": "\\b(am|is|are|was|were|be|been|being)\\b"}, {"description": "lines in which all words start with the letter 'a'.", "ground_truth": "~(.*((\\b[A-Za-z]+\\b)&([^a].*)).*)", "chatgpt_output": "^[a-z]+(\\s[a-z][a-z]*)*$"}, {"description": "lines that begin with a vowel and end with a vowel", "ground_truth": "[aeiouAEIOU](.*[aeiouAEIOU])?", "chatgpt_output": "^[aeiou].*\\1$"}, {"description": "lines that contain words starting with 'na'.", "ground_truth": ".*\\bna[A-Za-z]*\\b.*", "chatgpt_output": "^na\\w+"}, {"description": "lines that mention 'fireflies' but not 'butterflies'.", "ground_truth": "(.*fireflies.*)&(~(.*butterflies.*))", "chatgpt_output": "/(?=.*fireflies).*fireflies(?!.*butterflies)/"}, {"description": "lines having the letter 'x'.", "ground_truth": ".*x.*", "chatgpt_output": "/[Alex]/g for the string 'Alex' or simply /x/ if you're looking for any occurrence of the letter x."}, {"description": "lines which contain 'q' and 'u'", "ground_truth": ".*q.*u.*|.*u.*q.*", "chatgpt_output": "^.[q].[u].*$"}, {"description": "lines using 'ly' or 'ny'", "ground_truth": ".*(ly|ny).*", "chatgpt_output": "/[^]\\.(ely|ny)[^.]/gm"}, {"description": "lines that start with 'Transport One' and end in a number.", "ground_truth": "Transport One.*[0-9]", "chatgpt_output": "^Transport One.\\d$"}, {"description": "lines that end with '...'", "ground_truth": ".*\\.\\.\\.", "chatgpt_output": "/\\.{3}$/"}, {"description": "lines containing 3 or more ';'", "ground_truth": "(.*;.*){3,}", "chatgpt_output": "^.[;]{3,}.*$"}, {"description": "lines that contain 'I' in each word.", "ground_truth": "~(.*((\\b[A-Za-z]+\\b)&([^I]*)).*)", "chatgpt_output": "\\bI\\w*\\b.(?:\\s+\\bI\\w*\\b)(?=[\\s.$])"}, {"description": "lines that contain the phrase 'bedrock' or 'yabadabadoo'.", "ground_truth": ".*(bedrock|yabadabadoo).*", "chatgpt_output": "^(.*(bedrock|yabadabadoo).*)$"}, {"description": "lines that contain words starting with 'ge'.", "ground_truth": ".*\\bge[A-Za-z]*\\b.*", "chatgpt_output": "^.*\\bg\u0435[a-zA-Z0-9]*"}, {"description": "lines containing words that end with s.", "ground_truth": ".*\\b[A-Za-z]*s\\b.*", "chatgpt_output": "^.[^.]*s$"}, {"description": "lines using words which have a vowel.", "ground_truth": ".*\\b[A-Za-z]*[aeiouAEIOU][A-Za-z]*\\b.*", "chatgpt_output": "^.[aeiou].*"}, {"description": "lines using 'an' before 'imal'", "ground_truth": ".*an.*imal.*", "chatgpt_output": "^(.*an.*imal)$"}, {"description": "lines that contain 'if' before 'then' or 'else'.", "ground_truth": ".*if.*(then|else).*", "chatgpt_output": "^(.*if.*then|.*if.*else).*$"}, {"description": "lines using words that begin with the letter 'G'.", "ground_truth": ".*\\bG[A-Za-z]*\\b.*", "chatgpt_output": "^[G].*"}, {"description": "lines containing words ending with 'mie'.", "ground_truth": ".*\\b[A-Za-z]*mie\\b.*", "chatgpt_output": "^.[^.].*mie$"}, {"description": "lines that start with 'gates'", "ground_truth": "gates.*", "chatgpt_output": "^gates.*"}, {"description": "lines composed of 3 or more characters", "ground_truth": ".*.{3,}.*", "chatgpt_output": "^.{3,}"}, {"description": "lines that start with 'Al' but do not contain any numbers.", "ground_truth": "(Al.*)&(~(.*[0-9].*))", "chatgpt_output": "^Al[^0-9]\\*$"}, {"description": "lines using words ending in 'ness'", "ground_truth": ".*\\b[A-Za-z]*ness\\b.*", "chatgpt_output": "^.[^.]+\\bness\\b"}, {"description": "lines with words that end with 'ca' before words that end with 'att'", "ground_truth": ".*\\b[A-Za-z]*ca\\b.*\\b[A-Za-z]*att\\b.*", "chatgpt_output": "^(.*\\b[^ ]+ca\\b)[^\\n]*(?=\\s*\\b[^ ]+att\\b)"}, {"description": "lines that contain words with 'ci'.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(.*ci.*)).*", "chatgpt_output": "^(.*\\bci\\w*).*$"}, {"description": "lines containing words ending in 're'", "ground_truth": ".*\\b[A-Za-z]*re\\b.*", "chatgpt_output": "^.\\*(\\w+re)$"}, {"description": "lines that use only four words", "ground_truth": "(([^A-Za-z])*\\b[A-Za-z]+\\b([^A-Za-z])*){4}", "chatgpt_output": "^.\\s+(\\S+\\s+){3}\\S+$"}, {"description": "lines ending with the letter 'f'", "ground_truth": ".*f", "chatgpt_output": "^.(*.)f$"}, {"description": "lines that end in 't'", "ground_truth": ".*t", "chatgpt_output": "/\\.t$/"}, {"description": "lines that start with the letter 't'.", "ground_truth": "t.*", "chatgpt_output": "^t.*,"}, {"description": "lines containing a 5 letter word beginning with 't'", "ground_truth": ".*\\bt[A-Za-z]{4}\\b.*", "chatgpt_output": "^.[t][a-z]{3}[a-z]$"}, {"description": "lines ending with 'uns'", "ground_truth": ".*uns", "chatgpt_output": "^.(.*uns)$"}, {"description": "lines ending with 'end'", "ground_truth": ".*end", "chatgpt_output": "^.(.* end)$"}, {"description": "lines that contain 'day' or 'to'", "ground_truth": ".*(day|to).*", "chatgpt_output": "^[^.]*(day|to)[^.].*$"}, {"description": "lines that contain at least one word and the number '12'", "ground_truth": ".*(.*\\b[A-Za-z]+\\b.*)&(.*12.*).*", "chatgpt_output": "\\b\\w+\\s+\\d*{1}12\\b"}, {"description": "lines ending with 'wrench' that use the word 'monkey'.", "ground_truth": ".*\\bmonkey\\b.*wrench", "chatgpt_output": "^(.*.monkey).*wrench$"}, {"description": "lines that contain at least one digit.", "ground_truth": ".*[0-9].*", "chatgpt_output": "^[^\\d]*\\d[^\\d]*$"}, {"description": "lines starting and ending with 'a'", "ground_truth": "a(.*a)?", "chatgpt_output": "^a.*$ or ^[a]$ ( repeatedly for multiple 'a' at start or end )"}, {"description": "lines that have 'car'", "ground_truth": ".*car.*", "chatgpt_output": "/.[c a r]./"}, {"description": "lines of words whose last letters are 'ing'.", "ground_truth": ".*\\b[A-Za-z]*ing\\b.*", "chatgpt_output": "^.[^.]+\\.inging$"}, {"description": "lines beginning with the letter 's' and ending with the letter 'y'", "ground_truth": "s.*y", "chatgpt_output": "^[s].*y$"}, {"description": "lines that use words ending with 'es'.", "ground_truth": ".*\\b[A-Za-z]*es\\b.*", "chatgpt_output": "^[^*]\\S*(es)$"}, {"description": "lines that have 3 characters after the first vowel", "ground_truth": ".*[AEIOUaeiou].*(.{3}).*", "chatgpt_output": "^[aeiou]\\w{1,2}[\\w]{3}$"}, {"description": "lines ending in 'z' preceded by a word that ends in 'nt'", "ground_truth": ".*\\b[A-Za-z]*nt\\b.*z", "chatgpt_output": "^(\\w+nt)[[:space:]]+zed$"}, {"description": "lines using the word 'day' followed by the letters 'abc'", "ground_truth": ".*\\bday\\b.*abc.*", "chatgpt_output": "^(.+\\bday\\.+\\w+abc) $"}, {"description": "lines that contain words starting with 'gu'.", "ground_truth": ".*\\bgu[A-Za-z]*\\b.*", "chatgpt_output": "^.(.*\\bg\u0443[iv][bceg]\\b.).*$"}, {"description": "lines that have the word 'pray'.", "ground_truth": ".*\\bpray\\b.*", "chatgpt_output": "^.(.*\\bpray\\b).*$"}, {"description": "lines that contain words between 'I' and 'you'", "ground_truth": ".*I.*\\b[A-Za-z]+\\b.*you.*|.*you.*\\b[A-Za-z]+\\b.*I.*", "chatgpt_output": "/I\\s+[\\w']+\\s+you/g"}, {"description": "lines that contain 3 words with at least 1 number in between the 1st and 3rd word.", "ground_truth": "[^A-Za-z]*\\b[A-Za-z]+\\b((.*\\b[A-Za-z]+\\b.*)&(.*[0-9].*))\\b[A-Za-z]+\\b[^A-Za-z]*", "chatgpt_output": "^(.*[a-z]+ [0-9]+ [a-z]+\\s*){3,}"}, {"description": "lines containing the text 'and so it came to pass'", "ground_truth": ".*and so it came to pass.*", "chatgpt_output": "/\\.*and so it came to pass./"}, {"description": "lines with 'helper' where the word 'little' does not appear before 'helper' in that line.", "ground_truth": "(.*helper.*)&(~(.*\\blittle\\b.*helper.*))", "chatgpt_output": "^(?!\\s*little\\s*).*\\s+helper"}, {"description": "lines that have a word ending with the letters 'ked'.", "ground_truth": ".*\\b[A-Za-z]*ked\\b.*", "chatgpt_output": "\\b[^-_][^)]*ked\\b"}, {"description": "lines that each begin with a vowel", "ground_truth": "[AEIOUaeiou].*", "chatgpt_output": "^[aeiouAEIOU].* $"}, {"description": "lines ending in 'fuzz'", "ground_truth": ".*fuzz", "chatgpt_output": "^.*)tfuzz$"}, {"description": "lines using 6 'e'", "ground_truth": "(.*e.*){6}", "chatgpt_output": "^.{6}e[e\u0435]{3}.*$"}, {"description": "lines that contain words starting with a vowel and ending with a vowel.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&([AEIOUaeiou].*)&(.*[AEIOUaeiou])).*", "chatgpt_output": "^[aeiou][aeiou][a-z]*$"}, {"description": "lines that contain words using 'oo' in them.", "ground_truth": ".*\\b[A-Za-z]*oo[A-Za-z]*\\b.*", "chatgpt_output": "/\\b\\w*oo\\w*\\b/g (This will match words containing 'oo' instead of lines if you want to match words only in a string, use \\b\\w*oo\\w*\\b in String method of a language like Python)"}, {"description": "lines which contain 'out'", "ground_truth": ".*out.*", "chatgpt_output": "/out./"}, {"description": "lines using words ending with 'tu'.", "ground_truth": ".*\\b[A-Za-z]*tu\\b.*", "chatgpt_output": "^.+(\\btu\\b)\\b[\\\\s\\\\S]*$"}, {"description": "lines having 'sh' after 'wi' and 'st' before 'ar'.", "ground_truth": ".*((.*wi.*sh.*)&(.*st.*ar.*)).*", "chatgpt_output": "^(.*wi.[^]]*sh.*st.[^]]*ar)[^.\\n]$"}, {"description": "lines that start with the word 'The'", "ground_truth": "The\\b.*", "chatgpt_output": "^The\\s.*"}, {"description": "lines that contain more than five words.", "ground_truth": "(.*\\b[A-Za-z]+\\b.*){6,}", "chatgpt_output": "~\\b\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\b(?=\\.|$)"}, {"description": "lines that do not contain the letter 'c'.", "ground_truth": "~(.*c.*)", "chatgpt_output": "^.[^c].*$"}, {"description": "lines starting with 'the'", "ground_truth": "the.*", "chatgpt_output": "^the.*"}, {"description": "lines that contain words ending with a vowel.", "ground_truth": ".*\\b[A-Za-z]*[AEIOUaeiou]\\b.*", "chatgpt_output": "`/\\.[aeiou]$/g`"}, {"description": "lines that contain at least one word which is 8 characters or longer", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(.{8,})).*", "chatgpt_output": "^.\\* \\+[a-zA-Z]{8,}.*\\r?$"}, {"description": "lines that contain words ending with 'el'.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(.*el)).*", "chatgpt_output": "^.[^.]*(el)$"}, {"description": "lines containing words that end with 'P'", "ground_truth": ".*((\\b.*P\\b)&([A-Za-z]+)).*.*", "chatgpt_output": "^.[^P]*[P]$"}, {"description": "lines using a word which has uppercase letters and has lowercase letters", "ground_truth": ".*\\b(([A-Za-z]*[A-Z][A-Za-z]*)&([A-Za-z]*[a-z][A-Za-z]*))\\b.*", "chatgpt_output": "^.*[a-zA-Z].*\\1$"}, {"description": "lines that contain words with 're'.", "ground_truth": ".*\\b[A-Za-z]*re[A-Za-z]*\\b.*", "chatgpt_output": "^.*\\b(re|Re)\\b.*$"}, {"description": "lines that start with the letter 'a' and end with the letter 'c'", "ground_truth": "a.*c", "chatgpt_output": "^[a].*[ac]$"}, {"description": "lines that have three characters before the sequence 'SBC'", "ground_truth": ".*.{3}SBC.*", "chatgpt_output": "^.{3}SBC"}, {"description": "lines using the letter pair 'no'", "ground_truth": ".*no.*", "chatgpt_output": "^.+no.+$"}, {"description": "lines containing 3 or more vowels.", "ground_truth": "(.*[AEIOUaeiou].*){3,}", "chatgpt_output": "/[aeiou]{3,}/g"}, {"description": "lines which contain a word using 2 or more letters", "ground_truth": ".*\\b[A-Za-z]{2,}\\b.*", "chatgpt_output": "^.[a-z]{2,}.*$"}, {"description": "lines that contain 'er' at the end of every word.", "ground_truth": "~(.*((\\b[A-Za-z]+\\b)&(~(.*er))).*)", "chatgpt_output": "/\\b[^-]+\\ber\\b/g"}, {"description": "lines using 4 instances of 'ug'", "ground_truth": ".*(.*ug.*){4}.*", "chatgpt_output": "^.*(\\ug){4}.*$"}, {"description": "lines that do not have 'the' in them", "ground_truth": "~(.*the.*)", "chatgpt_output": "^(?!.*\\bthe\\b.[^.\\n]*).*$"}, {"description": "lines containing at least one uppercase letter, and at least one lowercase letter", "ground_truth": "(.*[A-Z].*)&(.*[a-z].*)", "chatgpt_output": "^.(?=.*[A-Z])(?=.*[a-z]).*$"}, {"description": "lines that contain the phrase 'Wednesday' but not 'Sunday'.", "ground_truth": "(.*Wednesday.*)&(~(.*Sunday.*))", "chatgpt_output": "^(?!.*Sunday).*Wednesday.*$"}, {"description": "lines containing the word 'revolution'.", "ground_truth": ".*\\brevolution\\b.*", "chatgpt_output": "^.[^.]*(revolution)[.^]*$"}, {"description": "lines ending with 'xyz'", "ground_truth": ".*xyz", "chatgpt_output": "^.+(xyz)$"}, {"description": "lines that contain a nine letter word.", "ground_truth": ".*\\b[A-Za-z]{9}\\b.*", "chatgpt_output": "\\b\\w{9}\\b"}, {"description": "lines with fox that do not contain the word chicken.", "ground_truth": "(.*fox.*)&(~(.*\\bchicken\\b.*))", "chatgpt_output": "/^(?!.*chicken).*fox./gm"}, {"description": "lines utilizing words ending with 'fe'.", "ground_truth": ".*((\\b[A-Za-z]+\\b)&(.*fe)).*", "chatgpt_output": "^.[^ ]+fe$"}, {"description": "lines that do not have any word consisting of 4 letters.", "ground_truth": "~(.*\\b[A-Za-z]{4}\\b.*)", "chatgpt_output": "^[^[:alnum:]{4}]+$"}, {"description": "lines which start with 'oocl'", "ground_truth": "oocl.*", "chatgpt_output": "^oocl.*"}, {"description": "lines that do not contain numerical characters.", "ground_truth": "~(.*[0-9].*)", "chatgpt_output": "^.[^0-9]*$ # Matches lines containing only non-numerical characters."}, {"description": "lines using 'gophers' and containing the words 'grass' and 'seeds'.", "ground_truth": "(.*gophers.*)&(.*\\bgrass\\b.*)&(.*\\bseeds\\b.*)", "chatgpt_output": "^.(.*gophers.*grass.*seeds).*$"}, {"description": "lines containing 'annou' and 'irth' that do not have a 'c' anywhere.", "ground_truth": "(.*annou.*)&(.*irth.*)&(~(.*c.*))", "chatgpt_output": "^annou[hbarijkmnopqstvwxyz]*irth$ (without the 'c')"}, {"description": "lines using 'x' before 'z'", "ground_truth": ".*x.*z.*", "chatgpt_output": "^.[x].*[z].*$"}, {"description": "lines beginning with the letter 'f'", "ground_truth": "f.*", "chatgpt_output": "^f.+"}, {"description": "4 letter lines", "ground_truth": "[A-Za-z]{4}", "chatgpt_output": "^.[a-z]{4}.$"}, {"description": "lines using numbers that show two or more '0'.", "ground_truth": ".*(.*0.*){2,}.*", "chatgpt_output": "^(.*[\\d][0]{2,}.*).*$"}]